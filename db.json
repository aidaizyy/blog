{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/baidusitemap.xml","path":"baidusitemap.xml","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/sitemap.xml","path":"sitemap.xml","modified":0,"renderable":0},{"_id":"themes/landscape-plus/source/css/bdshare.styl","path":"css/bdshare.styl","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/img/scrollup.png","path":"img/scrollup.png","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape-plus/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"15d2b262956cbd79450316a0e112e25872008a06","modified":1494261635000},{"_id":"source/CNAME","hash":"f9a607335f7be25feebddb51024d8b6b1b400b68","modified":1494261635000},{"_id":"source/404.html","hash":"3cb1b23ff4b4b734408dc6f1670046f782a4fc00","modified":1494261635000},{"_id":"source/baidusitemap.xml","hash":"b34cc53ca5d9d719549c1db5c5e28a28f78524f7","modified":1494261635000},{"_id":"themes/landscape-plus/.DS_Store","hash":"e24b757911108408e27bed50573042ac6363eb6d","modified":1494261692000},{"_id":"source/favicon.ico","hash":"7678474d9b5b54af16295a6b6c0dbe9c3ecd07fc","modified":1494261635000},{"_id":"source/robots.txt","hash":"4b51c1160118132f8dd0f20d783fc45f40871a32","modified":1494261635000},{"_id":"source/sitemap.xml","hash":"fe3e9362a4ef24c602f49125b10f3b3c223013ca","modified":1494261635000},{"_id":"themes/landscape-plus/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1494261692000},{"_id":"themes/landscape-plus/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1494261692000},{"_id":"themes/landscape-plus/README.md","hash":"04a1227d8fc5a019884fe7f2149d8a3ac9f1a689","modified":1494261692000},{"_id":"themes/landscape-plus/_config.yml","hash":"64719423255034677c30cd23b9be56ee609e8364","modified":1494261692000},{"_id":"themes/landscape-plus/package.json","hash":"b2bc52ea54ee3e5798de96d8f16f55b74af1ab4b","modified":1494261692000},{"_id":"source/_posts/android_proguard.md","hash":"09d448f6bcc22505618312665563024a201d561f","modified":1494261635000},{"_id":"source/_posts/.DS_Store","hash":"6ca2890d1d2fa36b27b067b2d74f35065c8dc7a4","modified":1494261635000},{"_id":"source/_posts/cache_miss_type.md","hash":"20e7742c61207e5fe917a0ab0404ba045c94e1fd","modified":1494261635000},{"_id":"source/_posts/dpdk.md","hash":"7bfb35aa6c419d7b92a46e54928ff94664377780","modified":1494261635000},{"_id":"source/_posts/dpdk_l2fwd.md","hash":"3f3ebc98b2982bb76b19220d85df976747921f17","modified":1494261635000},{"_id":"source/_posts/hadoop.md","hash":"44cf3405a4a7855ecbce93a97f55618120bb0f96","modified":1494261635000},{"_id":"source/_posts/openvswitch-build.md","hash":"4567c523882368bd4fc08e2af1e359c10b1d8d87","modified":1494261635000},{"_id":"source/_posts/openvswitch-qos.md","hash":"e6bd57ea9152703f7a3e97e5277eeb81e8686874","modified":1494261635000},{"_id":"source/_posts/spdk.md","hash":"12f8db5f07656f3a318f7a9b88c3b505dd6ba678","modified":1494263624000},{"_id":"source/_posts/ssh.md","hash":"593beda29c938d1e18fc4aa9603d2755e3a3015a","modified":1494261635000},{"_id":"source/_posts/swift_1.md","hash":"abf88c8104b62f0e18c1e4f115f9fb2b63de08db","modified":1494261635000},{"_id":"source/_posts/swift_10.md","hash":"43d5ef6137502d11e81fb3568d08d0bc211cae6a","modified":1494261635000},{"_id":"source/_posts/swift_12.md","hash":"ddac06188f2e63c7b29b3fa6905ff250e66b5ae7","modified":1494261635000},{"_id":"source/_posts/swift_11.md","hash":"67ce5657f567d8dd34ed76c24970414b858812f5","modified":1494261635000},{"_id":"source/_posts/swift_13.md","hash":"930b3824f9cde4a575fadfbe6a8c3671b0a5f968","modified":1494261635000},{"_id":"source/_posts/swift_14.md","hash":"b4b165e37ee9377133eee6126c98c77c1ad92175","modified":1494261635000},{"_id":"source/_posts/swift_2.md","hash":"1986fe69424cce596ff2ea9238c33fae01971850","modified":1494261635000},{"_id":"source/_posts/swift_4.md","hash":"3866b2ddaf4b822b412cf7264ea0b1b960193df4","modified":1494261635000},{"_id":"source/_posts/swift_3.md","hash":"44cd7e18cb1226a1a67413a80b3b64da3c17665e","modified":1494261635000},{"_id":"source/_posts/swift_5.md","hash":"0686971bc17b4ec79b66b6e79d25101003320d6f","modified":1494261635000},{"_id":"source/_posts/swift_6.md","hash":"eecbf721f0863d1ed618dabaf00ff47345bc3161","modified":1494261635000},{"_id":"source/_posts/swift_7.md","hash":"eebb374231ea5791eff174a24a767dbf602628a5","modified":1494261635000},{"_id":"source/_posts/swift_8.md","hash":"b384d754d926dfe4023586727bb33f6f6fe2a0f9","modified":1494261635000},{"_id":"source/_posts/swift_9.md","hash":"872f5483ede209674fd4b60ef16df570765bb35d","modified":1494261635000},{"_id":"source/about/.DS_Store","hash":"8208a60b8feacf7ffb9395ac09bc39029f5b3898","modified":1494261635000},{"_id":"source/about/index.md","hash":"8bb120bbbbd9df1b9e018f2860db45411c360187","modified":1494261635000},{"_id":"source/search/index.md","hash":"22a4054ef7ab92389189ebe7ecb0f7b01e42a850","modified":1494261635000},{"_id":"themes/landscape-plus/layout/.DS_Store","hash":"f474f095d085ffa105063aa431f130217a2d72f7","modified":1494261692000},{"_id":"themes/landscape-plus/languages/.DS_Store","hash":"7660904b56bc986b346f1f22e63b7f6942a49e59","modified":1494261692000},{"_id":"themes/landscape-plus/languages/zh-CN.yml","hash":"c7f273107b09217fa10f3e1dd9f4c3e9aae660f2","modified":1494261692000},{"_id":"themes/landscape-plus/languages/default.yml","hash":"06f4e3aaa695b5d5a8fb7087e66fdab9749d2527","modified":1494261692000},{"_id":"themes/landscape-plus/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1494261692000},{"_id":"themes/landscape-plus/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1494261692000},{"_id":"themes/landscape-plus/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1494261692000},{"_id":"themes/landscape-plus/layout/layout.ejs","hash":"0ba5a76e4b510981d89cb647333dc49b90fda089","modified":1494261692000},{"_id":"themes/landscape-plus/scripts/.DS_Store","hash":"fe424674c982006112a8fc98bc971c9063e86dcc","modified":1494261692000},{"_id":"themes/landscape-plus/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1494261692000},{"_id":"themes/landscape-plus/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1494261692000},{"_id":"themes/landscape-plus/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1494261692000},{"_id":"themes/landscape-plus/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1494261692000},{"_id":"themes/landscape-plus/source/.DS_Store","hash":"3e6f4a7c94289bd3a01dc5683080f1ea3bf87de9","modified":1494261692000},{"_id":"themes/landscape-plus/layout/_partial/.DS_Store","hash":"91ec5b41e85dce8937d32b107b822223651b4792","modified":1494261692000},{"_id":"themes/landscape-plus/layout/_partial/after-footer.ejs","hash":"cb089c9316a1ad1ed5c1741a29ab10005834e97f","modified":1494261692000},{"_id":"themes/landscape-plus/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1494261692000},{"_id":"themes/landscape-plus/layout/_partial/archive.ejs","hash":"d7de6421497ffaf65e4f5fe4bed71fcea51fde80","modified":1494261692000},{"_id":"themes/landscape-plus/layout/_partial/article.ejs","hash":"011291497daeda65916240eabf5e9eea5a644e2c","modified":1494261692000},{"_id":"themes/landscape-plus/layout/_partial/footer.ejs","hash":"a02150682b09f3aebe7ae12deef7fa65de2d5af2","modified":1494261692000},{"_id":"themes/landscape-plus/layout/_partial/google-analytics.ejs","hash":"78823298e9e47d8e6556fc2bb4598fc2814f2d52","modified":1494261692000},{"_id":"themes/landscape-plus/layout/_partial/head.ejs","hash":"93eb99cadcece8c1428d8287e3a508fb434f7fb3","modified":1494261692000},{"_id":"themes/landscape-plus/layout/_partial/header.ejs","hash":"33313f5247282e8ce1e8111ffa0e727ea2785992","modified":1494261692000},{"_id":"themes/landscape-plus/layout/_partial/mathjax.ejs","hash":"7b3d1a8d27ea674c373022a8f95898b5f1bf4a33","modified":1494261692000},{"_id":"themes/landscape-plus/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1494261692000},{"_id":"themes/landscape-plus/layout/_widget/.DS_Store","hash":"3fad88d994cca7f7ded302e9a94bb950fe8763db","modified":1494261692000},{"_id":"themes/landscape-plus/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1494261692000},{"_id":"themes/landscape-plus/layout/_partial/totop.ejs","hash":"aa3a3eadf31d9b3e4d3081cd3ca61860e55ef553","modified":1494261692000},{"_id":"themes/landscape-plus/layout/_widget/links.ejs","hash":"231e8caa63e8ab4c12215915e8fa66541a666dab","modified":1494261692000},{"_id":"themes/landscape-plus/layout/_widget/archive.ejs","hash":"bbb86beab343e08e689a372ddb60bfa782e93bc4","modified":1494261692000},{"_id":"themes/landscape-plus/layout/_widget/category.ejs","hash":"ae96217d072f637925c907f5f467450083863f50","modified":1494261692000},{"_id":"themes/landscape-plus/layout/_widget/recent_posts.ejs","hash":"bb4b99b49fb0b647f6c9d8ebb06fc94bbca6b7f7","modified":1494261692000},{"_id":"themes/landscape-plus/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1494261692000},{"_id":"themes/landscape-plus/layout/_widget/tag.ejs","hash":"b461390feb5ef82df7aef9677a31d5137c352f61","modified":1494261692000},{"_id":"themes/landscape-plus/layout/_widget/weibo.ejs","hash":"6d8b422e8b2cb4bcd1505ee95db42d17de5cb0e8","modified":1494261692000},{"_id":"themes/landscape-plus/source/css/.DS_Store","hash":"171b5f7ef37d003f22609035632127f4d3d9507f","modified":1494261692000},{"_id":"themes/landscape-plus/source/css/_extend.styl","hash":"3f8a9e4e63b7249408ac54559a5f9633d703e132","modified":1494261692000},{"_id":"themes/landscape-plus/source/css/_variables.styl","hash":"7d8a3ff6f9864a0aee94b41db1f0f49e6fd7345d","modified":1494261692000},{"_id":"themes/landscape-plus/source/css/bdshare.styl","hash":"efb757d9aa21c35f75601dec49533d81b2d9fd08","modified":1494261692000},{"_id":"themes/landscape-plus/source/fancybox/.DS_Store","hash":"3f083f51a55fc756b7ca8a4f991db06e34580f15","modified":1494261692000},{"_id":"themes/landscape-plus/source/css/style.styl","hash":"30fdb982f5324d0023f38c28e83238b9518f2756","modified":1494261692000},{"_id":"themes/landscape-plus/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1494261692000},{"_id":"themes/landscape-plus/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1494261692000},{"_id":"themes/landscape-plus/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1494261692000},{"_id":"themes/landscape-plus/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1494261692000},{"_id":"themes/landscape-plus/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1494261692000},{"_id":"themes/landscape-plus/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1494261692000},{"_id":"themes/landscape-plus/source/img/.DS_Store","hash":"2bc0f55c532d1f65dae6a14427226c0ad4e7f907","modified":1494261692000},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1494261692000},{"_id":"themes/landscape-plus/source/js/.DS_Store","hash":"1c0a8cfbc71463463e997d7a628dd5248c4a7a8c","modified":1494261692000},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1494261692000},{"_id":"themes/landscape-plus/source/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1494261692000},{"_id":"themes/landscape-plus/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1494261692000},{"_id":"themes/landscape-plus/source/js/script.js","hash":"f3bc4ff3fb41918a6b58f9b86bf4249ecc6bbb0c","modified":1494261692000},{"_id":"themes/landscape-plus/layout/_partial/post/.DS_Store","hash":"ef49dc80469681393edde9dabff2b432f237e168","modified":1494261692000},{"_id":"themes/landscape-plus/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1494261692000},{"_id":"themes/landscape-plus/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1494261692000},{"_id":"themes/landscape-plus/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1494261692000},{"_id":"themes/landscape-plus/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1494261692000},{"_id":"themes/landscape-plus/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1494261692000},{"_id":"themes/landscape-plus/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1494261692000},{"_id":"themes/landscape-plus/source/css/_partial/.DS_Store","hash":"fe0dbbb9b108bee4e9309bdd475e83d265bc3985","modified":1494261692000},{"_id":"themes/landscape-plus/source/css/_partial/archive.styl","hash":"19b5af4e0969d93fb757577bd6ff380ef2224eb9","modified":1494261692000},{"_id":"themes/landscape-plus/source/css/_partial/article.styl","hash":"d7869c19e796c4a59042665576af13fd0c5ba90f","modified":1494261692000},{"_id":"themes/landscape-plus/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1494261692000},{"_id":"themes/landscape-plus/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1494261692000},{"_id":"themes/landscape-plus/source/css/_partial/header.styl","hash":"f8d63b45dcfb9ab343199d6774db9875623f311a","modified":1494261692000},{"_id":"themes/landscape-plus/source/css/_partial/highlight.styl","hash":"a3c2f696d9477223bd45b49e5f996d7998ae52e5","modified":1494261692000},{"_id":"themes/landscape-plus/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1494261692000},{"_id":"themes/landscape-plus/source/css/_partial/sidebar-bottom.styl","hash":"bc5487b9a0bfe5f745423331824d3f3637ccd430","modified":1494261692000},{"_id":"themes/landscape-plus/source/css/_util/.DS_Store","hash":"ed8888cf2b55c5a5eba0e93e1e25e868394ce0cb","modified":1494261692000},{"_id":"themes/landscape-plus/source/css/_partial/sidebar-aside.styl","hash":"c9ea5b3956b73418dc8b1572e32eb65dc68ca0e5","modified":1494261692000},{"_id":"themes/landscape-plus/source/css/_partial/sidebar.styl","hash":"b7bdc11effa98c6d88850eff75634e2ea9207c14","modified":1494261692000},{"_id":"themes/landscape-plus/source/css/_partial/totop.styl","hash":"817f36dd591d6beef9d41011ae8490d31d5e2e50","modified":1494261692000},{"_id":"themes/landscape-plus/source/css/fonts/.DS_Store","hash":"154536d21aa0bf8533054ca2dcaa7fb07c55f786","modified":1494261692000},{"_id":"themes/landscape-plus/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1494261692000},{"_id":"themes/landscape-plus/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1494261692000},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1494261692000},{"_id":"themes/landscape-plus/source/css/images/.DS_Store","hash":"80534e36b1096e84ddfec9707417c065dd941490","modified":1494261692000},{"_id":"themes/landscape-plus/source/fancybox/helpers/.DS_Store","hash":"2ca75121cd7775f43fed579e1e63f9c445fef36c","modified":1494261692000},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1494261692000},{"_id":"themes/landscape-plus/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1494261692000},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1494261692000},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1494261692000},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1494261692000},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1494261692000},{"_id":"themes/landscape-plus/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1494261692000},{"_id":"themes/landscape-plus/source/css/fonts/FontAwesome.otf","hash":"6270a4a561a69fef5f5cc18cdf9efc256ec2ccbe","modified":1494261692000},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1494261692000},{"_id":"themes/landscape-plus/source/css/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1494261692000},{"_id":"themes/landscape-plus/source/css/images/banner.jpg","hash":"28bde0491ed558215efe7d4c6f5a9e73ea397ccd","modified":1494261692000},{"_id":"public/baidusitemap.xml","hash":"2a0718e604ecd84a4ce0c7e5cac7f17f30641ec7","modified":1494263628067},{"_id":"public/sitemap.xml","hash":"59f81a084a16ba485a85eed7c4316d437224292d","modified":1494263628350},{"_id":"public/atom.xml","hash":"06294ae406660cdc506fe6ec7ee9c22c75f32291","modified":1494263628368},{"_id":"public/404.html","hash":"d7172d576554c1ebd7d082b7cdce455ba0f4f3ff","modified":1494263387075},{"_id":"public/about/index.html","hash":"53b094e45c01483011d946746d576fc83e5c87ec","modified":1494263387076},{"_id":"public/search/index.html","hash":"a648ab16fca4c5133e3feacff72dc341c4de5b3f","modified":1494263387076},{"_id":"public/archives/2015/03/index.html","hash":"8c907d029384dd8703c038fad40c2ef8ddd87a95","modified":1494263387076},{"_id":"public/archives/2015/04/index.html","hash":"2e04c7f21a8a1c2bba505cb92f30dc00dac960fa","modified":1494263387076},{"_id":"public/archives/2015/12/index.html","hash":"e06166a1115e90818cd6139c13723b92ccd1e954","modified":1494263387076},{"_id":"public/archives/2016/index.html","hash":"a636552cc9125f8c21539a01b079d3476d7987f5","modified":1494263387076},{"_id":"public/archives/2016/05/index.html","hash":"e800924f0d75fd46866cdfdf33dadb9e8ce148d7","modified":1494263387076},{"_id":"public/archives/2016/08/index.html","hash":"1e4f2718dcaa438cd76503644768882a8cc9f6be","modified":1494263387076},{"_id":"public/archives/2016/11/index.html","hash":"a55f50e6fccaf0df8b509ff813fbafd498b880a3","modified":1494263387076},{"_id":"public/categories/android/index.html","hash":"4a52d8eec66d4f19fa720cb4017f7997cc5f5dd0","modified":1494263387076},{"_id":"public/categories/computer-architecture/index.html","hash":"46a0b6de4145874097e29e3ee90b7bdda3027a3b","modified":1494263387077},{"_id":"public/categories/dpdk/index.html","hash":"60a5434a8f0f8bc953354fc0dd453611fd603913","modified":1494263387077},{"_id":"public/categories/hadoop/index.html","hash":"abea4f7263fa83014f7f15c406e416181673188e","modified":1494263387077},{"_id":"public/categories/openvswitch/index.html","hash":"de341190948b7d14bf427dae853294e65b955e86","modified":1494263387077},{"_id":"public/categories/spdk/index.html","hash":"8a7612b21861b5cee9a7fa95da034fc28132662a","modified":1494263387077},{"_id":"public/categories/linux/index.html","hash":"c716ecf02eb1f491fbcb5baa2912dba5d3419bf6","modified":1494263387077},{"_id":"public/categories/swift/page/2/index.html","hash":"e2ca3caac1d03b5808797b529668d579497c1fed","modified":1494263387077},{"_id":"public/tags/android/index.html","hash":"1e47a49accf27bdf1ab581cd0ecc9e735c72b5a6","modified":1494263387077},{"_id":"public/tags/proguard/index.html","hash":"2ab9b1ed93643d21b5147cf599277cb0b035cf2c","modified":1494263387077},{"_id":"public/tags/cache/index.html","hash":"081bb479bd351e98d019b02067511d78cc5b67e3","modified":1494263387077},{"_id":"public/tags/computer-architecture/index.html","hash":"190f27fd7b4abb4be77b5085350b1fb02f496489","modified":1494263387077},{"_id":"public/tags/dpdk/index.html","hash":"4fb463360a2102a725c5b4842339ee9e9d4b4bfd","modified":1494263387077},{"_id":"public/tags/hadoop/index.html","hash":"cc3c5e476725decaa15c87da0942a0f008eb305d","modified":1494263387077},{"_id":"public/tags/java/index.html","hash":"1ce47c63e6dd97ec674d145877ca4d733447ce71","modified":1494263387077},{"_id":"public/tags/openvswitch/index.html","hash":"bae924e8c9429ba57d4f72b3018d6988c3acf830","modified":1494263387078},{"_id":"public/tags/openflow/index.html","hash":"35a5f9bd31d9c4a3609131dae60affbcf78c2719","modified":1494263387078},{"_id":"public/tags/spdk/index.html","hash":"2854a97f873943fe44e785340898bbf8c079e909","modified":1494263387078},{"_id":"public/tags/swift/page/2/index.html","hash":"54c824a3563bb135c75850f83ab986200ce092e6","modified":1494263387078},{"_id":"public/openvswitch-qos/index.html","hash":"7f240b339d11f3841d23b544db557b108dd7910c","modified":1494263387078},{"_id":"public/openvswitch-build/index.html","hash":"368484995172e4f6bd05036702316b05704425de","modified":1494263387078},{"_id":"public/ssh/index.html","hash":"e081a00850ed9d17bd5faff6ede913f348b878d4","modified":1494263387078},{"_id":"public/spdk/index.html","hash":"b30dd8fb48060df20a2a46e29ff3f4dce57adfc3","modified":1494263628424},{"_id":"public/hadoop/index.html","hash":"c8c32779a7276e9766b798915e7c9e46ddb431e9","modified":1494263387079},{"_id":"public/cache_miss_type/index.html","hash":"23ec19221b14c9e4cd230ab7fe9f9d1c39e91d19","modified":1494263387080},{"_id":"public/swift_14/index.html","hash":"73957514fc220a32ee26f186bb541fb2e05eb366","modified":1494263387080},{"_id":"public/swift_13/index.html","hash":"e9eb8dddc7759f23ab23d1ee635071a885bef2aa","modified":1494263387080},{"_id":"public/swift_12/index.html","hash":"44c2a9811f798cefb68ce25bc1ed6ee8234492d5","modified":1494263387080},{"_id":"public/swift_11/index.html","hash":"60967b490e487f60be0f06eaea3826ee8b59750b","modified":1494263387080},{"_id":"public/swift_10/index.html","hash":"2d932de18489198aa63083a3fb6c50e8de4940c6","modified":1494263387080},{"_id":"public/swift_9/index.html","hash":"d5b2121f682450be29032a66bdacb9883c0b330f","modified":1494263387080},{"_id":"public/swift_8/index.html","hash":"1b544d0a6636e2885c808a2c393dd5738dca473a","modified":1494263387080},{"_id":"public/swift_7/index.html","hash":"ef1ceaf70000f5e2d5385582797c39c0ee7e90cf","modified":1494263387080},{"_id":"public/swift_6/index.html","hash":"e7c03e47e5ffabdff6c09de8e0e764cfa13cdc4a","modified":1494263387080},{"_id":"public/swift_5/index.html","hash":"180027f4fb469ef50dbdbc00471e22c2b6e9b501","modified":1494263387080},{"_id":"public/swift_4/index.html","hash":"34c0c918b675449c6fd5b904105305c0708bc959","modified":1494263387081},{"_id":"public/swift_3/index.html","hash":"0ec4e993c4b595586440098ed7bab80f4eed6010","modified":1494263387081},{"_id":"public/swift_2/index.html","hash":"6c7b076ea7befd213afcedb3ea0109a8ce510afb","modified":1494263387081},{"_id":"public/swift_1/index.html","hash":"3dd68eb9f9bd801f1decc2496ae0de3b7d91ee2d","modified":1494263387081},{"_id":"public/android_proguard/index.html","hash":"6739baa8118d4aaa9dd8aef8afd9e6c608ffc8a2","modified":1494263387081},{"_id":"public/dpdk/index.html","hash":"50627d0b3a8730f19bb94f3939586c187963fa23","modified":1494263387081},{"_id":"public/dpdk_l2fwd/index.html","hash":"ba97eabd2d96d7968d6fadf651ea25747685d4eb","modified":1494263387081},{"_id":"public/archives/index.html","hash":"d339b3e8e237156ae9d73f21f6f15827a478b32e","modified":1494263387081},{"_id":"public/archives/2015/index.html","hash":"609ecc1ca57eb89874fc4ddf6a1917fcbbb09ef5","modified":1494263387081},{"_id":"public/archives/2015/07/index.html","hash":"7fb1ab3e3dcee37fb8969388d9b33916583a835c","modified":1494263387081},{"_id":"public/categories/swift/index.html","hash":"7997f352caf062ada4f9a25368e49380b89cc297","modified":1494263387082},{"_id":"public/index.html","hash":"1b39e7127b60ea569672bf9ceae8616c7510d47b","modified":1494263387082},{"_id":"public/page/2/index.html","hash":"972e5abdad530e1eacfdb224d453e7182e9e9a66","modified":1494263387082},{"_id":"public/page/3/index.html","hash":"42a30f8f63011365d770f040f2b7ae66f12b20f4","modified":1494263387082},{"_id":"public/tags/swift/index.html","hash":"73c1967faf56608dceb4c674fc871c3c847dc370","modified":1494263387082},{"_id":"public/CNAME","hash":"f9a607335f7be25feebddb51024d8b6b1b400b68","modified":1494263387092},{"_id":"public/favicon.ico","hash":"7678474d9b5b54af16295a6b6c0dbe9c3ecd07fc","modified":1494263387092},{"_id":"public/robots.txt","hash":"4b51c1160118132f8dd0f20d783fc45f40871a32","modified":1494263387092},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1494263387092},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1494263387092},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1494263387092},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1494263387092},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1494263387093},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1494263387093},{"_id":"public/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1494263387093},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"0183979056f0b87616cd99d5c54a48f3b771eee6","modified":1494263387093},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1494263387093},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"7d65e0227d0d7cdc1718119cd2a7dce0638f151c","modified":1494263387093},{"_id":"public/css/fonts/FontAwesome.otf","hash":"6270a4a561a69fef5f5cc18cdf9efc256ec2ccbe","modified":1494263388175},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"6225ccc4ec94d060f19efab97ca42d842845b949","modified":1494263388185},{"_id":"public/css/bdshare.css","hash":"bd23dc37cba7a688396e7d68c78fbb9a6a9067d4","modified":1494263388207},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1494263388207},{"_id":"public/js/script.js","hash":"f3bc4ff3fb41918a6b58f9b86bf4249ecc6bbb0c","modified":1494263388207},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1494263388207},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1494263388207},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1494263388207},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1494263388207},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1494263388207},{"_id":"public/css/style.css","hash":"d0ccf7b53add51d15aa7556ec9cb99306bb6456e","modified":1494263388208},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1494263388208},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1494263388208},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"cd980eab6db5fa57db670cb2e4278e67e1a4d6c9","modified":1494263388231},{"_id":"public/css/images/banner.jpg","hash":"28bde0491ed558215efe7d4c6f5a9e73ea397ccd","modified":1494263388306}],"Category":[{"name":"android","_id":"cj2gdu6j70005v1o3p8liwdhm"},{"name":"computer architecture","_id":"cj2gdu6jl000av1o3y52e8lbn"},{"name":"dpdk","_id":"cj2gdu6jq000fv1o3foanz2jc"},{"name":"hadoop","_id":"cj2gdu6k8000rv1o3yv0uqo8d"},{"name":"openvswitch","_id":"cj2gdu6kg000yv1o3xe1rn6cx"},{"name":"spdk","_id":"cj2gdu6kz001bv1o3u0cc6rrq"},{"name":"linux","_id":"cj2gdu6l7001gv1o33kkbdl06"},{"name":"swift","_id":"cj2gdu6lj001nv1o3bbgrzjv1"}],"Data":[],"Page":[{"yout":false,"_content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n    <title>404</title>\n    <link rel=\"icon\" href=\"/favicon.ico\">\n  </head>\n  <body>\n    <div align=\"center\">\n      <p>出错啦~！</p>\n      <p>邮箱联系: aidaizyy@gmail.com</p>\n    </div>\n  </body>\n</html>\n","source":"404.html","raw":"yout: false\n--------\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n    <title>404</title>\n    <link rel=\"icon\" href=\"/favicon.ico\">\n  </head>\n  <body>\n    <div align=\"center\">\n      <p>出错啦~！</p>\n      <p>邮箱联系: aidaizyy@gmail.com</p>\n    </div>\n  </body>\n</html>\n","date":"2017-05-08T16:40:35.000Z","updated":"2017-05-08T16:40:35.000Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cj2gdu6gn0000v1o34wc3nm2v","content":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    <title>404</title>\n    <link rel=\"icon\" href=\"/favicon.ico\">\n  </head>\n  <body>\n    <div align=\"center\">\n      <p>出错啦~！</p>\n      <p>邮箱联系: aidaizyy@gmail.com</p>\n    </div>\n  </body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n    <title>404</title>\n    <link rel=\"icon\" href=\"/favicon.ico\">\n  </head>\n  <body>\n    <div align=\"center\">\n      <p>出错啦~！</p>\n      <p>邮箱联系: aidaizyy@gmail.com</p>\n    </div>\n  </body>\n</html>\n"},{"title":"About Me","toc":false,"_content":"\n[Yunyao Zhang（张云尧）](http://aidaiz.com)\n\nBirthday: December 25, 1992\n\nEmail Address: <aidaizyy@gmail.com>\n\nResearch Area: Computer Architecture & High Performance Computer\n\nLaboratory: [High Performance Computer Research Center](http://www.ncic.ac.cn)\n\nEducation: \n- [Institute of Computing Technology](http://www.ict.ac.cn), [University of Chinese Academy of Sciences](http://www.ucas.ac.cn), since 2015 \n\n- [College of Software Engineering](http://sw.scu.edu.cn), [Sichuan University](http://www.scu.edu.cn), 2011 - 2015\n\n- [Mianzhu High School](http://www.scmzzx.com), Sichuan Province, 2008 - 2011\n\nWeibo: [@张云尧](http://weibo.com/aidaiz)\n\nGitHub: [aidaizyy](https:///github.com/aidaizyy)\n\n<img src=\"http://7xivk7.com1.z0.glb.clouddn.com/about.jpg\" width = \"360\" align = \"left\" />\n","source":"about/index.md","raw":"title: About Me\ntoc: false\n---\n\n[Yunyao Zhang（张云尧）](http://aidaiz.com)\n\nBirthday: December 25, 1992\n\nEmail Address: <aidaizyy@gmail.com>\n\nResearch Area: Computer Architecture & High Performance Computer\n\nLaboratory: [High Performance Computer Research Center](http://www.ncic.ac.cn)\n\nEducation: \n- [Institute of Computing Technology](http://www.ict.ac.cn), [University of Chinese Academy of Sciences](http://www.ucas.ac.cn), since 2015 \n\n- [College of Software Engineering](http://sw.scu.edu.cn), [Sichuan University](http://www.scu.edu.cn), 2011 - 2015\n\n- [Mianzhu High School](http://www.scmzzx.com), Sichuan Province, 2008 - 2011\n\nWeibo: [@张云尧](http://weibo.com/aidaiz)\n\nGitHub: [aidaizyy](https:///github.com/aidaizyy)\n\n<img src=\"http://7xivk7.com1.z0.glb.clouddn.com/about.jpg\" width = \"360\" align = \"left\" />\n","date":"2017-05-08T16:40:35.000Z","updated":"2017-05-08T16:40:35.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj2gdu6iu0002v1o3va7l8kji","content":"<p><a href=\"http://aidaiz.com\">Yunyao Zhang（张云尧）</a></p>\n<p>Birthday: December 25, 1992</p>\n<p>Email Address: <a href=\"&#x6d;&#97;&#105;&#x6c;&#116;&#111;&#58;&#x61;&#105;&#100;&#97;&#105;&#x7a;&#121;&#x79;&#x40;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#46;&#99;&#x6f;&#109;\">&#x61;&#105;&#100;&#97;&#105;&#x7a;&#121;&#x79;&#x40;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#46;&#99;&#x6f;&#109;</a></p>\n<p>Research Area: Computer Architecture &amp; High Performance Computer</p>\n<p>Laboratory: <a href=\"http://www.ncic.ac.cn\" target=\"_blank\" rel=\"external\">High Performance Computer Research Center</a></p>\n<p>Education: </p>\n<ul>\n<li><p><a href=\"http://www.ict.ac.cn\" target=\"_blank\" rel=\"external\">Institute of Computing Technology</a>, <a href=\"http://www.ucas.ac.cn\" target=\"_blank\" rel=\"external\">University of Chinese Academy of Sciences</a>, since 2015 </p>\n</li>\n<li><p><a href=\"http://sw.scu.edu.cn\" target=\"_blank\" rel=\"external\">College of Software Engineering</a>, <a href=\"http://www.scu.edu.cn\" target=\"_blank\" rel=\"external\">Sichuan University</a>, 2011 - 2015</p>\n</li>\n<li><p><a href=\"http://www.scmzzx.com\" target=\"_blank\" rel=\"external\">Mianzhu High School</a>, Sichuan Province, 2008 - 2011</p>\n</li>\n</ul>\n<p>Weibo: <a href=\"http://weibo.com/aidaiz\" target=\"_blank\" rel=\"external\">@张云尧</a></p>\n<p>GitHub: <a href=\"https:///github.com/aidaizyy\" target=\"_blank\" rel=\"external\">aidaizyy</a></p>\n<p><img src=\"http://7xivk7.com1.z0.glb.clouddn.com/about.jpg\" width=\"360\" align=\"left\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"http://aidaiz.com\">Yunyao Zhang（张云尧）</a></p>\n<p>Birthday: December 25, 1992</p>\n<p>Email Address: <a href=\"&#x6d;&#97;&#105;&#x6c;&#116;&#111;&#58;&#x61;&#105;&#100;&#97;&#105;&#x7a;&#121;&#x79;&#x40;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#46;&#99;&#x6f;&#109;\">&#x61;&#105;&#100;&#97;&#105;&#x7a;&#121;&#x79;&#x40;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#46;&#99;&#x6f;&#109;</a></p>\n<p>Research Area: Computer Architecture &amp; High Performance Computer</p>\n<p>Laboratory: <a href=\"http://www.ncic.ac.cn\" target=\"_blank\" rel=\"external\">High Performance Computer Research Center</a></p>\n<p>Education: </p>\n<ul>\n<li><p><a href=\"http://www.ict.ac.cn\" target=\"_blank\" rel=\"external\">Institute of Computing Technology</a>, <a href=\"http://www.ucas.ac.cn\" target=\"_blank\" rel=\"external\">University of Chinese Academy of Sciences</a>, since 2015 </p>\n</li>\n<li><p><a href=\"http://sw.scu.edu.cn\" target=\"_blank\" rel=\"external\">College of Software Engineering</a>, <a href=\"http://www.scu.edu.cn\" target=\"_blank\" rel=\"external\">Sichuan University</a>, 2011 - 2015</p>\n</li>\n<li><p><a href=\"http://www.scmzzx.com\" target=\"_blank\" rel=\"external\">Mianzhu High School</a>, Sichuan Province, 2008 - 2011</p>\n</li>\n</ul>\n<p>Weibo: <a href=\"http://weibo.com/aidaiz\" target=\"_blank\" rel=\"external\">@张云尧</a></p>\n<p>GitHub: <a href=\"https:///github.com/aidaizyy\" target=\"_blank\" rel=\"external\">aidaizyy</a></p>\n<p><img src=\"http://7xivk7.com1.z0.glb.clouddn.com/about.jpg\" width=\"360\" align=\"left\"></p>\n"},{"layout":"search","title":"search","_content":"","source":"search/index.md","raw":"layout: search\ntitle: search\n----\n","date":"2017-05-08T16:40:35.000Z","updated":"2017-05-08T16:40:35.000Z","path":"search/index.html","comments":1,"_id":"cj2gdu6iz0004v1o3pmudq1tq","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Android代码混淆（Proguard）","date":"2015-07-13T03:42:52.000Z","toc":true,"_content":"\nAndroid采用Java语言，编译成class文件，会很容易被反编译为java源代码。为了代码不被反编译，往往采用代码混淆。Android自带Proguard可以完成这项工作，同时删除没有使用的字段属性等，优化代码。\n\n<!--more-->\n**Title: [Android代码混淆（Proguard）](https://aidaizyy.github.io/android_proguard)**\n**Author: [Yunyao Zhang（张云尧）](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-07-13](http://aidaizyy.github.io)**\n\n##概要\n\nProguard并没有改变程序结构，只是通过修改名称，调整顺序等措施将代码变得难以阅读，难以理解，但却可以运行。\n在Android项目的主目录里自带proguard-project.txt文件，代码混淆的规则就写在里面。\n\n##配置\n\n主目录的project.properties文件需要加上下面这句话，以告诉项目需要运行Proguard：\n\n_proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt_ \n\n创建好的Android项目一般自带这条语句，不过开头用#注释了，去掉#即可。\n\n##规则\n_摘抄自http://blog.csdn.net/banketree/article/details/41928175_\n\n``` bash\n-include {filename}    从给定的文件中读取配置参数 \n-basedirectory {directoryname}    指定基础目录为以后相对的档案名称 \n-injars {class_path}    指定要处理的应用程序jar,war,ear和目录 \n-outjars {class_path}    指定处理完后要输出的jar,war,ear和目录的名称 \n-libraryjars {classpath}    指定要处理的应用程序jar,war,ear和目录所需要的程序库文件 \n-dontskipnonpubliclibraryclasses    指定不去忽略非公共的库类。 \n-dontskipnonpubliclibraryclassmembers    指定不去忽略包可见的库类的成员。\n\n保留选项 \n-keep {Modifier} {class_specification}    保护指定的类文件和类的成员 \n-keepclassmembers {modifier} {class_specification}    保护指定类的成员，如果此类受到保护他们会保护的更好\n-keepclasseswithmembers {class_specification}    保护指定的类和类的成员，但条件是所有指定的类和类成员是要存在。 \n-keepnames {class_specification}    保护指定的类和类的成员的名称（如果他们不会压缩步骤中删除） \n-keepclassmembernames {class_specification}    保护指定的类的成员的名称（如果他们不会压缩步骤中删除） \n-keepclasseswithmembernames {class_specification}    保护指定的类和类的成员的名称，如果所有指定的类成员出席（在压缩步骤之后） \n-printseeds {filename}    列出类和类的成员-keep选项的清单，标准输出到给定的文件 \n\n压缩 \n-dontshrink    不压缩输入的类文件 \n-printusage {filename} \n-whyareyoukeeping {class_specification}     \n\n优化 \n-dontoptimize    不优化输入的类文件 \n-assumenosideeffects {class_specification}    优化时假设指定的方法，没有任何副作用 \n-allowaccessmodification    优化时允许访问并修改有修饰符的类和类的成员 \n\n混淆 \n-dontobfuscate    不混淆输入的类文件 \n-printmapping {filename} \n-applymapping {filename}    重用映射增加混淆 \n-obfuscationdictionary {filename}    使用给定文件中的关键字作为要混淆方法的名称 \n-overloadaggressively    混淆时应用侵入式重载 \n-useuniqueclassmembernames    确定统一的混淆类的成员名称来增加混淆 \n-flattenpackagehierarchy {package_name}    重新包装所有重命名的包并放在给定的单一包中 \n-repackageclass {package_name}    重新包装所有重命名的类文件中放在给定的单一包中 \n-dontusemixedcaseclassnames    混淆时不会产生形形色色的类名 \n-keepattributes {attribute_name,...}    保护给定的可选属性，例如LineNumberTable, LocalVariableTable, SourceFile, Deprecated, Synthetic, Signature, and InnerClasses. \n-renamesourcefileattribute {string}    设置源文件中给定的字符串常量\n```\n\n##实例\n\nproject-proguard.txt中创建混淆规则。\n缺省情况下会混淆所有代码，导致出错，必须保证不能被混淆的代码被保持。\n\n``` java\n-ignorewarnings\t\t\t\t# 忽略警告，避免打包时某些警告出现\n-optimizationpasses 5\t\t\t# 指定代码的压缩级别\n-dontusemixedcaseclassnames\t\t# 是否使用大小写混合\n-dontskipnonpubliclibraryclasses\t# 是否混淆第三方jar\n-dontpreverify                   \t# 混淆时是否做预校验\n-verbose                            \t# 混淆时是否记录日志\n-optimizations !code/simplification/arithmetic,!field/\\*,!class/merging/\\*\t# 混淆时所采用的算法\n\n-keepattributes \\*Annotation\\*\n-keepattributes Signature\n\n-libraryjars   libs/treecore.jar\t# 保持第三方jar包不被混淆\n-libraryjars   libs/android-viewbadger.jar\n-libraryjars   libs/MapApi.jar\n-libraryjars   libs/SinaWeiboSDK.jar\n\n-dontwarn android.support.v4.**     \n-dontwarn android.os.**\n\n-keep class android.support.v4.** { *; } \t\t# 保持哪些类不被混淆\n-keep class com.baidu.** { *; }  \n-keep class vi.com.gdi.bgl.android.**{*;}\n-keep class android.os.**{*;}\n\n-keep interface android.support.v4.app.** { *; }  \n-keep public class * extends android.support.v4.**  \n-keep public class * extends android.app.Fragment\n-keep public class * extends android.app.Activity\n-keep public class * extends android.app.Application\n-keep public class * extends android.app.Service\n-keep public class * extends android.content.BroadcastReceiver\n-keep public class * extends android.content.ContentProvider\n-keep public class * extends android.support.v4.widget\n-keep public class * extends com.sqlcrypt.database\n-keep public class * extends com.sqlcrypt.database.sqlite\n-keep public class * extends com.treecore.**\n-keep public class * extends de.greenrobot.dao.**\n\n\n-keepclasseswithmembernames class * {\t# 保持 native 方法不被混淆\n    native <methods>;\n}\n\n-keepclasseswithmembers class * {\t# 保持自定义控件类不被混淆\n    public <init>(android.content.Context, android.util.AttributeSet);\n}\n\n-keepclasseswithmembers class * {\t# 保持自定义控件类不被混淆\n    public <init>(android.content.Context, android.util.AttributeSet, int);\n}\n\n-keepclassmembers class * extends android.app.Activity {\t#保持类成员\n   public void *(android.view.View);\n}\n\n-keepclassmembers enum * {\t# 保持枚举 enum 类不被混淆\n    public static **[] values();\n    public static ** valueOf(java.lang.String);\n}\n\n-keep class * implements android.os.Parcelable {\t# 保持 Parcelable 不被混淆\n  public static final android.os.Parcelable$Creator *;\n}\n\n-keep class MyClass;\t# 保持自己定义的类不被混淆\n```\n##反编译\n\ndex2jar：将apk转化为class文件\n``` bash\nhttps://github.com/pxb1988/dex2jar \n```\nJD-GUI：将class文件转化为java文件\n``` bash\nhttp://jd.benow.ca/ \n```\n\n通过这个两个工具可以将apk转化为java源文件。\n通过Proguard生成的apk可转化为java源文件来进行比对以检测Proguard是否生效。\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","source":"_posts/android_proguard.md","raw":"title: \"Android代码混淆（Proguard）\"\ndate: 2015-07-13 11:42:52\ntags:\n- android\n- proguard\ncategories: android\ntoc: true\n---\n\nAndroid采用Java语言，编译成class文件，会很容易被反编译为java源代码。为了代码不被反编译，往往采用代码混淆。Android自带Proguard可以完成这项工作，同时删除没有使用的字段属性等，优化代码。\n\n<!--more-->\n**Title: [Android代码混淆（Proguard）](https://aidaizyy.github.io/android_proguard)**\n**Author: [Yunyao Zhang（张云尧）](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-07-13](http://aidaizyy.github.io)**\n\n##概要\n\nProguard并没有改变程序结构，只是通过修改名称，调整顺序等措施将代码变得难以阅读，难以理解，但却可以运行。\n在Android项目的主目录里自带proguard-project.txt文件，代码混淆的规则就写在里面。\n\n##配置\n\n主目录的project.properties文件需要加上下面这句话，以告诉项目需要运行Proguard：\n\n_proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt_ \n\n创建好的Android项目一般自带这条语句，不过开头用#注释了，去掉#即可。\n\n##规则\n_摘抄自http://blog.csdn.net/banketree/article/details/41928175_\n\n``` bash\n-include {filename}    从给定的文件中读取配置参数 \n-basedirectory {directoryname}    指定基础目录为以后相对的档案名称 \n-injars {class_path}    指定要处理的应用程序jar,war,ear和目录 \n-outjars {class_path}    指定处理完后要输出的jar,war,ear和目录的名称 \n-libraryjars {classpath}    指定要处理的应用程序jar,war,ear和目录所需要的程序库文件 \n-dontskipnonpubliclibraryclasses    指定不去忽略非公共的库类。 \n-dontskipnonpubliclibraryclassmembers    指定不去忽略包可见的库类的成员。\n\n保留选项 \n-keep {Modifier} {class_specification}    保护指定的类文件和类的成员 \n-keepclassmembers {modifier} {class_specification}    保护指定类的成员，如果此类受到保护他们会保护的更好\n-keepclasseswithmembers {class_specification}    保护指定的类和类的成员，但条件是所有指定的类和类成员是要存在。 \n-keepnames {class_specification}    保护指定的类和类的成员的名称（如果他们不会压缩步骤中删除） \n-keepclassmembernames {class_specification}    保护指定的类的成员的名称（如果他们不会压缩步骤中删除） \n-keepclasseswithmembernames {class_specification}    保护指定的类和类的成员的名称，如果所有指定的类成员出席（在压缩步骤之后） \n-printseeds {filename}    列出类和类的成员-keep选项的清单，标准输出到给定的文件 \n\n压缩 \n-dontshrink    不压缩输入的类文件 \n-printusage {filename} \n-whyareyoukeeping {class_specification}     \n\n优化 \n-dontoptimize    不优化输入的类文件 \n-assumenosideeffects {class_specification}    优化时假设指定的方法，没有任何副作用 \n-allowaccessmodification    优化时允许访问并修改有修饰符的类和类的成员 \n\n混淆 \n-dontobfuscate    不混淆输入的类文件 \n-printmapping {filename} \n-applymapping {filename}    重用映射增加混淆 \n-obfuscationdictionary {filename}    使用给定文件中的关键字作为要混淆方法的名称 \n-overloadaggressively    混淆时应用侵入式重载 \n-useuniqueclassmembernames    确定统一的混淆类的成员名称来增加混淆 \n-flattenpackagehierarchy {package_name}    重新包装所有重命名的包并放在给定的单一包中 \n-repackageclass {package_name}    重新包装所有重命名的类文件中放在给定的单一包中 \n-dontusemixedcaseclassnames    混淆时不会产生形形色色的类名 \n-keepattributes {attribute_name,...}    保护给定的可选属性，例如LineNumberTable, LocalVariableTable, SourceFile, Deprecated, Synthetic, Signature, and InnerClasses. \n-renamesourcefileattribute {string}    设置源文件中给定的字符串常量\n```\n\n##实例\n\nproject-proguard.txt中创建混淆规则。\n缺省情况下会混淆所有代码，导致出错，必须保证不能被混淆的代码被保持。\n\n``` java\n-ignorewarnings\t\t\t\t# 忽略警告，避免打包时某些警告出现\n-optimizationpasses 5\t\t\t# 指定代码的压缩级别\n-dontusemixedcaseclassnames\t\t# 是否使用大小写混合\n-dontskipnonpubliclibraryclasses\t# 是否混淆第三方jar\n-dontpreverify                   \t# 混淆时是否做预校验\n-verbose                            \t# 混淆时是否记录日志\n-optimizations !code/simplification/arithmetic,!field/\\*,!class/merging/\\*\t# 混淆时所采用的算法\n\n-keepattributes \\*Annotation\\*\n-keepattributes Signature\n\n-libraryjars   libs/treecore.jar\t# 保持第三方jar包不被混淆\n-libraryjars   libs/android-viewbadger.jar\n-libraryjars   libs/MapApi.jar\n-libraryjars   libs/SinaWeiboSDK.jar\n\n-dontwarn android.support.v4.**     \n-dontwarn android.os.**\n\n-keep class android.support.v4.** { *; } \t\t# 保持哪些类不被混淆\n-keep class com.baidu.** { *; }  \n-keep class vi.com.gdi.bgl.android.**{*;}\n-keep class android.os.**{*;}\n\n-keep interface android.support.v4.app.** { *; }  \n-keep public class * extends android.support.v4.**  \n-keep public class * extends android.app.Fragment\n-keep public class * extends android.app.Activity\n-keep public class * extends android.app.Application\n-keep public class * extends android.app.Service\n-keep public class * extends android.content.BroadcastReceiver\n-keep public class * extends android.content.ContentProvider\n-keep public class * extends android.support.v4.widget\n-keep public class * extends com.sqlcrypt.database\n-keep public class * extends com.sqlcrypt.database.sqlite\n-keep public class * extends com.treecore.**\n-keep public class * extends de.greenrobot.dao.**\n\n\n-keepclasseswithmembernames class * {\t# 保持 native 方法不被混淆\n    native <methods>;\n}\n\n-keepclasseswithmembers class * {\t# 保持自定义控件类不被混淆\n    public <init>(android.content.Context, android.util.AttributeSet);\n}\n\n-keepclasseswithmembers class * {\t# 保持自定义控件类不被混淆\n    public <init>(android.content.Context, android.util.AttributeSet, int);\n}\n\n-keepclassmembers class * extends android.app.Activity {\t#保持类成员\n   public void *(android.view.View);\n}\n\n-keepclassmembers enum * {\t# 保持枚举 enum 类不被混淆\n    public static **[] values();\n    public static ** valueOf(java.lang.String);\n}\n\n-keep class * implements android.os.Parcelable {\t# 保持 Parcelable 不被混淆\n  public static final android.os.Parcelable$Creator *;\n}\n\n-keep class MyClass;\t# 保持自己定义的类不被混淆\n```\n##反编译\n\ndex2jar：将apk转化为class文件\n``` bash\nhttps://github.com/pxb1988/dex2jar \n```\nJD-GUI：将class文件转化为java文件\n``` bash\nhttp://jd.benow.ca/ \n```\n\n通过这个两个工具可以将apk转化为java源文件。\n通过Proguard生成的apk可转化为java源文件来进行比对以检测Proguard是否生效。\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","slug":"android_proguard","published":1,"updated":"2017-05-08T16:40:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2gdu6if0001v1o36agfpyts","content":"<p>Android采用Java语言，编译成class文件，会很容易被反编译为java源代码。为了代码不被反编译，往往采用代码混淆。Android自带Proguard可以完成这项工作，同时删除没有使用的字段属性等，优化代码。</p>\n<a id=\"more\"></a>\n<p><strong>Title: <a href=\"https://aidaizyy.github.io/android_proguard\" target=\"_blank\" rel=\"external\">Android代码混淆（Proguard）</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang（张云尧）</a></strong><br><strong>E-mail: <a href=\"&#x6d;&#97;&#105;&#x6c;&#x74;&#111;&#x3a;&#x61;&#x69;&#x64;&#x61;&#105;&#x7a;&#121;&#x79;&#64;&#103;&#109;&#x61;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;\">&#x61;&#x69;&#x64;&#x61;&#105;&#x7a;&#121;&#x79;&#64;&#103;&#109;&#x61;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-07-13</a></strong></p>\n<p>##概要</p>\n<p>Proguard并没有改变程序结构，只是通过修改名称，调整顺序等措施将代码变得难以阅读，难以理解，但却可以运行。<br>在Android项目的主目录里自带proguard-project.txt文件，代码混淆的规则就写在里面。</p>\n<p>##配置</p>\n<p>主目录的project.properties文件需要加上下面这句话，以告诉项目需要运行Proguard：</p>\n<p><em>proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt</em> </p>\n<p>创建好的Android项目一般自带这条语句，不过开头用#注释了，去掉#即可。</p>\n<p>##规则<br><em>摘抄自<a href=\"http://blog.csdn.net/banketree/article/details/41928175\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/banketree/article/details/41928175</a></em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">-include &#123;filename&#125;    从给定的文件中读取配置参数 </div><div class=\"line\">-basedirectory &#123;directoryname&#125;    指定基础目录为以后相对的档案名称 </div><div class=\"line\">-injars &#123;class_path&#125;    指定要处理的应用程序jar,war,ear和目录 </div><div class=\"line\">-outjars &#123;class_path&#125;    指定处理完后要输出的jar,war,ear和目录的名称 </div><div class=\"line\">-libraryjars &#123;classpath&#125;    指定要处理的应用程序jar,war,ear和目录所需要的程序库文件 </div><div class=\"line\">-dontskipnonpubliclibraryclasses    指定不去忽略非公共的库类。 </div><div class=\"line\">-dontskipnonpubliclibraryclassmembers    指定不去忽略包可见的库类的成员。</div><div class=\"line\"></div><div class=\"line\">保留选项 </div><div class=\"line\">-keep &#123;Modifier&#125; &#123;class_specification&#125;    保护指定的类文件和类的成员 </div><div class=\"line\">-keepclassmembers &#123;modifier&#125; &#123;class_specification&#125;    保护指定类的成员，如果此类受到保护他们会保护的更好</div><div class=\"line\">-keepclasseswithmembers &#123;class_specification&#125;    保护指定的类和类的成员，但条件是所有指定的类和类成员是要存在。 </div><div class=\"line\">-keepnames &#123;class_specification&#125;    保护指定的类和类的成员的名称（如果他们不会压缩步骤中删除） </div><div class=\"line\">-keepclassmembernames &#123;class_specification&#125;    保护指定的类的成员的名称（如果他们不会压缩步骤中删除） </div><div class=\"line\">-keepclasseswithmembernames &#123;class_specification&#125;    保护指定的类和类的成员的名称，如果所有指定的类成员出席（在压缩步骤之后） </div><div class=\"line\">-printseeds &#123;filename&#125;    列出类和类的成员-keep选项的清单，标准输出到给定的文件 </div><div class=\"line\"></div><div class=\"line\">压缩 </div><div class=\"line\">-dontshrink    不压缩输入的类文件 </div><div class=\"line\">-printusage &#123;filename&#125; </div><div class=\"line\">-whyareyoukeeping &#123;class_specification&#125;     </div><div class=\"line\"></div><div class=\"line\">优化 </div><div class=\"line\">-dontoptimize    不优化输入的类文件 </div><div class=\"line\">-assumenosideeffects &#123;class_specification&#125;    优化时假设指定的方法，没有任何副作用 </div><div class=\"line\">-allowaccessmodification    优化时允许访问并修改有修饰符的类和类的成员 </div><div class=\"line\"></div><div class=\"line\">混淆 </div><div class=\"line\">-dontobfuscate    不混淆输入的类文件 </div><div class=\"line\">-printmapping &#123;filename&#125; </div><div class=\"line\">-applymapping &#123;filename&#125;    重用映射增加混淆 </div><div class=\"line\">-obfuscationdictionary &#123;filename&#125;    使用给定文件中的关键字作为要混淆方法的名称 </div><div class=\"line\">-overloadaggressively    混淆时应用侵入式重载 </div><div class=\"line\">-useuniqueclassmembernames    确定统一的混淆类的成员名称来增加混淆 </div><div class=\"line\">-flattenpackagehierarchy &#123;package_name&#125;    重新包装所有重命名的包并放在给定的单一包中 </div><div class=\"line\">-repackageclass &#123;package_name&#125;    重新包装所有重命名的类文件中放在给定的单一包中 </div><div class=\"line\">-dontusemixedcaseclassnames    混淆时不会产生形形色色的类名 </div><div class=\"line\">-keepattributes &#123;attribute_name,...&#125;    保护给定的可选属性，例如LineNumberTable, LocalVariableTable, SourceFile, Deprecated, Synthetic, Signature, and InnerClasses. </div><div class=\"line\">-renamesourcefileattribute &#123;string&#125;    设置源文件中给定的字符串常量</div></pre></td></tr></table></figure>\n<p>##实例</p>\n<p>project-proguard.txt中创建混淆规则。<br>缺省情况下会混淆所有代码，导致出错，必须保证不能被混淆的代码被保持。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\">-ignorewarnings\t\t\t\t# 忽略警告，避免打包时某些警告出现</div><div class=\"line\">-optimizationpasses 5\t\t\t# 指定代码的压缩级别</div><div class=\"line\">-dontusemixedcaseclassnames\t\t# 是否使用大小写混合</div><div class=\"line\">-dontskipnonpubliclibraryclasses\t# 是否混淆第三方jar</div><div class=\"line\">-dontpreverify                   \t# 混淆时是否做预校验</div><div class=\"line\">-verbose                            \t# 混淆时是否记录日志</div><div class=\"line\">-optimizations !code/simplification/arithmetic,!field/\\*,!class/merging/\\*\t# 混淆时所采用的算法</div><div class=\"line\"></div><div class=\"line\">-keepattributes \\*Annotation\\*</div><div class=\"line\">-keepattributes Signature</div><div class=\"line\"></div><div class=\"line\">-libraryjars   libs/treecore.jar\t# 保持第三方jar包不被混淆</div><div class=\"line\">-libraryjars   libs/android-viewbadger.jar</div><div class=\"line\">-libraryjars   libs/MapApi.jar</div><div class=\"line\">-libraryjars   libs/SinaWeiboSDK.jar</div><div class=\"line\"></div><div class=\"line\">-dontwarn android.support.v4.**     </div><div class=\"line\">-dontwarn android.os.**</div><div class=\"line\"></div><div class=\"line\">-keep class android.support.v4.** &#123; *; &#125; \t\t# 保持哪些类不被混淆</div><div class=\"line\">-keep class com.baidu.** &#123; *; &#125;  </div><div class=\"line\">-keep class vi.com.gdi.bgl.android.**&#123;*;&#125;</div><div class=\"line\">-keep class android.os.**&#123;*;&#125;</div><div class=\"line\"></div><div class=\"line\">-keep interface android.support.v4.app.** &#123; *; &#125;  </div><div class=\"line\">-keep public class * extends android.support.v4.**  </div><div class=\"line\">-keep public class * extends android.app.Fragment</div><div class=\"line\">-keep public class * extends android.app.Activity</div><div class=\"line\">-keep public class * extends android.app.Application</div><div class=\"line\">-keep public class * extends android.app.Service</div><div class=\"line\">-keep public class * extends android.content.BroadcastReceiver</div><div class=\"line\">-keep public class * extends android.content.ContentProvider</div><div class=\"line\">-keep public class * extends android.support.v4.widget</div><div class=\"line\">-keep public class * extends com.sqlcrypt.database</div><div class=\"line\">-keep public class * extends com.sqlcrypt.database.sqlite</div><div class=\"line\">-keep public class * extends com.treecore.**</div><div class=\"line\">-keep public class * extends de.greenrobot.dao.**</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">-keepclasseswithmembernames class * &#123;\t# 保持 native 方法不被混淆</div><div class=\"line\">    native &lt;methods&gt;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-keepclasseswithmembers class * &#123;\t# 保持自定义控件类不被混淆</div><div class=\"line\">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-keepclasseswithmembers class * &#123;\t# 保持自定义控件类不被混淆</div><div class=\"line\">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-keepclassmembers class * extends android.app.Activity &#123;\t#保持类成员</div><div class=\"line\">   public void *(android.view.View);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-keepclassmembers enum * &#123;\t# 保持枚举 enum 类不被混淆</div><div class=\"line\">    public static **[] values();</div><div class=\"line\">    public static ** valueOf(java.lang.String);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-keep class * implements android.os.Parcelable &#123;\t# 保持 Parcelable 不被混淆</div><div class=\"line\">  public static final android.os.Parcelable$Creator *;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-keep class MyClass;\t# 保持自己定义的类不被混淆</div></pre></td></tr></table></figure>\n<p>##反编译</p>\n<p>dex2jar：将apk转化为class文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://github.com/pxb1988/dex2jar</div></pre></td></tr></table></figure></p>\n<p>JD-GUI：将class文件转化为java文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://jd.benow.ca/</div></pre></td></tr></table></figure></p>\n<p>通过这个两个工具可以将apk转化为java源文件。<br>通过Proguard生成的apk可转化为java源文件来进行比对以检测Proguard是否生效。</p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>Android采用Java语言，编译成class文件，会很容易被反编译为java源代码。为了代码不被反编译，往往采用代码混淆。Android自带Proguard可以完成这项工作，同时删除没有使用的字段属性等，优化代码。</p>","more":"<p><strong>Title: <a href=\"https://aidaizyy.github.io/android_proguard\" target=\"_blank\" rel=\"external\">Android代码混淆（Proguard）</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang（张云尧）</a></strong><br><strong>E-mail: <a href=\"&#x6d;&#97;&#105;&#x6c;&#x74;&#111;&#x3a;&#x61;&#x69;&#x64;&#x61;&#105;&#x7a;&#121;&#x79;&#64;&#103;&#109;&#x61;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;\">&#x61;&#x69;&#x64;&#x61;&#105;&#x7a;&#121;&#x79;&#64;&#103;&#109;&#x61;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-07-13</a></strong></p>\n<p>##概要</p>\n<p>Proguard并没有改变程序结构，只是通过修改名称，调整顺序等措施将代码变得难以阅读，难以理解，但却可以运行。<br>在Android项目的主目录里自带proguard-project.txt文件，代码混淆的规则就写在里面。</p>\n<p>##配置</p>\n<p>主目录的project.properties文件需要加上下面这句话，以告诉项目需要运行Proguard：</p>\n<p><em>proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt</em> </p>\n<p>创建好的Android项目一般自带这条语句，不过开头用#注释了，去掉#即可。</p>\n<p>##规则<br><em>摘抄自<a href=\"http://blog.csdn.net/banketree/article/details/41928175\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/banketree/article/details/41928175</a></em></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\">-include &#123;filename&#125;    从给定的文件中读取配置参数 </div><div class=\"line\">-basedirectory &#123;directoryname&#125;    指定基础目录为以后相对的档案名称 </div><div class=\"line\">-injars &#123;class_path&#125;    指定要处理的应用程序jar,war,ear和目录 </div><div class=\"line\">-outjars &#123;class_path&#125;    指定处理完后要输出的jar,war,ear和目录的名称 </div><div class=\"line\">-libraryjars &#123;classpath&#125;    指定要处理的应用程序jar,war,ear和目录所需要的程序库文件 </div><div class=\"line\">-dontskipnonpubliclibraryclasses    指定不去忽略非公共的库类。 </div><div class=\"line\">-dontskipnonpubliclibraryclassmembers    指定不去忽略包可见的库类的成员。</div><div class=\"line\"></div><div class=\"line\">保留选项 </div><div class=\"line\">-keep &#123;Modifier&#125; &#123;class_specification&#125;    保护指定的类文件和类的成员 </div><div class=\"line\">-keepclassmembers &#123;modifier&#125; &#123;class_specification&#125;    保护指定类的成员，如果此类受到保护他们会保护的更好</div><div class=\"line\">-keepclasseswithmembers &#123;class_specification&#125;    保护指定的类和类的成员，但条件是所有指定的类和类成员是要存在。 </div><div class=\"line\">-keepnames &#123;class_specification&#125;    保护指定的类和类的成员的名称（如果他们不会压缩步骤中删除） </div><div class=\"line\">-keepclassmembernames &#123;class_specification&#125;    保护指定的类的成员的名称（如果他们不会压缩步骤中删除） </div><div class=\"line\">-keepclasseswithmembernames &#123;class_specification&#125;    保护指定的类和类的成员的名称，如果所有指定的类成员出席（在压缩步骤之后） </div><div class=\"line\">-printseeds &#123;filename&#125;    列出类和类的成员-keep选项的清单，标准输出到给定的文件 </div><div class=\"line\"></div><div class=\"line\">压缩 </div><div class=\"line\">-dontshrink    不压缩输入的类文件 </div><div class=\"line\">-printusage &#123;filename&#125; </div><div class=\"line\">-whyareyoukeeping &#123;class_specification&#125;     </div><div class=\"line\"></div><div class=\"line\">优化 </div><div class=\"line\">-dontoptimize    不优化输入的类文件 </div><div class=\"line\">-assumenosideeffects &#123;class_specification&#125;    优化时假设指定的方法，没有任何副作用 </div><div class=\"line\">-allowaccessmodification    优化时允许访问并修改有修饰符的类和类的成员 </div><div class=\"line\"></div><div class=\"line\">混淆 </div><div class=\"line\">-dontobfuscate    不混淆输入的类文件 </div><div class=\"line\">-printmapping &#123;filename&#125; </div><div class=\"line\">-applymapping &#123;filename&#125;    重用映射增加混淆 </div><div class=\"line\">-obfuscationdictionary &#123;filename&#125;    使用给定文件中的关键字作为要混淆方法的名称 </div><div class=\"line\">-overloadaggressively    混淆时应用侵入式重载 </div><div class=\"line\">-useuniqueclassmembernames    确定统一的混淆类的成员名称来增加混淆 </div><div class=\"line\">-flattenpackagehierarchy &#123;package_name&#125;    重新包装所有重命名的包并放在给定的单一包中 </div><div class=\"line\">-repackageclass &#123;package_name&#125;    重新包装所有重命名的类文件中放在给定的单一包中 </div><div class=\"line\">-dontusemixedcaseclassnames    混淆时不会产生形形色色的类名 </div><div class=\"line\">-keepattributes &#123;attribute_name,...&#125;    保护给定的可选属性，例如LineNumberTable, LocalVariableTable, SourceFile, Deprecated, Synthetic, Signature, and InnerClasses. </div><div class=\"line\">-renamesourcefileattribute &#123;string&#125;    设置源文件中给定的字符串常量</div></pre></td></tr></table></figure>\n<p>##实例</p>\n<p>project-proguard.txt中创建混淆规则。<br>缺省情况下会混淆所有代码，导致出错，必须保证不能被混淆的代码被保持。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div></pre></td><td class=\"code\"><pre><div class=\"line\">-ignorewarnings\t\t\t\t# 忽略警告，避免打包时某些警告出现</div><div class=\"line\">-optimizationpasses 5\t\t\t# 指定代码的压缩级别</div><div class=\"line\">-dontusemixedcaseclassnames\t\t# 是否使用大小写混合</div><div class=\"line\">-dontskipnonpubliclibraryclasses\t# 是否混淆第三方jar</div><div class=\"line\">-dontpreverify                   \t# 混淆时是否做预校验</div><div class=\"line\">-verbose                            \t# 混淆时是否记录日志</div><div class=\"line\">-optimizations !code/simplification/arithmetic,!field/\\*,!class/merging/\\*\t# 混淆时所采用的算法</div><div class=\"line\"></div><div class=\"line\">-keepattributes \\*Annotation\\*</div><div class=\"line\">-keepattributes Signature</div><div class=\"line\"></div><div class=\"line\">-libraryjars   libs/treecore.jar\t# 保持第三方jar包不被混淆</div><div class=\"line\">-libraryjars   libs/android-viewbadger.jar</div><div class=\"line\">-libraryjars   libs/MapApi.jar</div><div class=\"line\">-libraryjars   libs/SinaWeiboSDK.jar</div><div class=\"line\"></div><div class=\"line\">-dontwarn android.support.v4.**     </div><div class=\"line\">-dontwarn android.os.**</div><div class=\"line\"></div><div class=\"line\">-keep class android.support.v4.** &#123; *; &#125; \t\t# 保持哪些类不被混淆</div><div class=\"line\">-keep class com.baidu.** &#123; *; &#125;  </div><div class=\"line\">-keep class vi.com.gdi.bgl.android.**&#123;*;&#125;</div><div class=\"line\">-keep class android.os.**&#123;*;&#125;</div><div class=\"line\"></div><div class=\"line\">-keep interface android.support.v4.app.** &#123; *; &#125;  </div><div class=\"line\">-keep public class * extends android.support.v4.**  </div><div class=\"line\">-keep public class * extends android.app.Fragment</div><div class=\"line\">-keep public class * extends android.app.Activity</div><div class=\"line\">-keep public class * extends android.app.Application</div><div class=\"line\">-keep public class * extends android.app.Service</div><div class=\"line\">-keep public class * extends android.content.BroadcastReceiver</div><div class=\"line\">-keep public class * extends android.content.ContentProvider</div><div class=\"line\">-keep public class * extends android.support.v4.widget</div><div class=\"line\">-keep public class * extends com.sqlcrypt.database</div><div class=\"line\">-keep public class * extends com.sqlcrypt.database.sqlite</div><div class=\"line\">-keep public class * extends com.treecore.**</div><div class=\"line\">-keep public class * extends de.greenrobot.dao.**</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">-keepclasseswithmembernames class * &#123;\t# 保持 native 方法不被混淆</div><div class=\"line\">    native &lt;methods&gt;;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-keepclasseswithmembers class * &#123;\t# 保持自定义控件类不被混淆</div><div class=\"line\">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-keepclasseswithmembers class * &#123;\t# 保持自定义控件类不被混淆</div><div class=\"line\">    public &lt;init&gt;(android.content.Context, android.util.AttributeSet, int);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-keepclassmembers class * extends android.app.Activity &#123;\t#保持类成员</div><div class=\"line\">   public void *(android.view.View);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-keepclassmembers enum * &#123;\t# 保持枚举 enum 类不被混淆</div><div class=\"line\">    public static **[] values();</div><div class=\"line\">    public static ** valueOf(java.lang.String);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-keep class * implements android.os.Parcelable &#123;\t# 保持 Parcelable 不被混淆</div><div class=\"line\">  public static final android.os.Parcelable$Creator *;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">-keep class MyClass;\t# 保持自己定义的类不被混淆</div></pre></td></tr></table></figure>\n<p>##反编译</p>\n<p>dex2jar：将apk转化为class文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">https://github.com/pxb1988/dex2jar</div></pre></td></tr></table></figure></p>\n<p>JD-GUI：将class文件转化为java文件<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">http://jd.benow.ca/</div></pre></td></tr></table></figure></p>\n<p>通过这个两个工具可以将apk转化为java源文件。<br>通过Proguard生成的apk可转化为java源文件来进行比对以检测Proguard是否生效。</p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>"},{"title":"容量失效（capacity miss）与冲突失效（conflict miss）的区别","date":"2015-12-10T08:26:02.000Z","toc":false,"_content":"\nCache访问失效分为强制性失效/冷失效（compulsory miss/cold miss）、容量失效（capacity miss）和冲突失效（conflict miss）。其中容量失效和冲突失效概念非常相近，理解起来不容易区别。\n\n<!--more-->\n**Title: [容量失效（capacity miss）与冲突失效（conflict miss）的区别](https://aidaizyy.github.io/cache_miss_type)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-12-10](http://aidaizyy.github.io)**\n\n# 概念\n\n- **强制性失效：**CPU第一次访问相应cache块，cache中肯定没有该cache块，引起的失效叫做强制性失效。这是不可避免的。\n- **容量失效：**有限的cache容量导致cache放不下而替换出cache块，被替换出去的cache块再被访问，引起的失效叫做容量失效。\n- **冲突失效：**在直接相联或组相联的cache中，不同的cache块由于index相同相互替换，引起的失效叫做冲突失效。\n\n#理解\n\n如果两个cache块指向同一个cache位置，替换后，访问被替换cache块到底是属于容量失效还是冲突失效呢？\n主要看当前cache的存储情况。\n假设这里有32KB大小的直接相联cache。\n情况一（容量失效）：如果有一个64KB大小的数组需要重复访问，数组的大小远远大于cache大小，没办法全部放入cache。第一次访问数组发生的失效全都是强制性失效。之后再访问数组，再发生的失效则全都是容量失效，这时cache已经存满，容量不足以存储全部数据。\n情况二（冲突失效）：如果有两个8KB大小的数据需要来回访问，但是这两个数组都映射到相同的地址，cache大小足够存储全部的数据，但是因为相同地址发生了冲突需要来回替换，发生的失效则全都是冲突失效（第一次访问失效依旧是强制性失效），这时cache并没有存满。\n避免容量失效只能通过增加cache大小实现，而避免冲突失效则可以通过提高相联度，优化替换策略，优化代码，增大cache容量等很多措施实现。\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","source":"_posts/cache_miss_type.md","raw":"title: 容量失效（capacity miss）与冲突失效（conflict miss）的区别\ndate: 2015-12-10 16:26:02\ntags: \n- cache\n- computer architecture\ncategories: computer architecture\ntoc: false\n---\n\nCache访问失效分为强制性失效/冷失效（compulsory miss/cold miss）、容量失效（capacity miss）和冲突失效（conflict miss）。其中容量失效和冲突失效概念非常相近，理解起来不容易区别。\n\n<!--more-->\n**Title: [容量失效（capacity miss）与冲突失效（conflict miss）的区别](https://aidaizyy.github.io/cache_miss_type)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-12-10](http://aidaizyy.github.io)**\n\n# 概念\n\n- **强制性失效：**CPU第一次访问相应cache块，cache中肯定没有该cache块，引起的失效叫做强制性失效。这是不可避免的。\n- **容量失效：**有限的cache容量导致cache放不下而替换出cache块，被替换出去的cache块再被访问，引起的失效叫做容量失效。\n- **冲突失效：**在直接相联或组相联的cache中，不同的cache块由于index相同相互替换，引起的失效叫做冲突失效。\n\n#理解\n\n如果两个cache块指向同一个cache位置，替换后，访问被替换cache块到底是属于容量失效还是冲突失效呢？\n主要看当前cache的存储情况。\n假设这里有32KB大小的直接相联cache。\n情况一（容量失效）：如果有一个64KB大小的数组需要重复访问，数组的大小远远大于cache大小，没办法全部放入cache。第一次访问数组发生的失效全都是强制性失效。之后再访问数组，再发生的失效则全都是容量失效，这时cache已经存满，容量不足以存储全部数据。\n情况二（冲突失效）：如果有两个8KB大小的数据需要来回访问，但是这两个数组都映射到相同的地址，cache大小足够存储全部的数据，但是因为相同地址发生了冲突需要来回替换，发生的失效则全都是冲突失效（第一次访问失效依旧是强制性失效），这时cache并没有存满。\n避免容量失效只能通过增加cache大小实现，而避免冲突失效则可以通过提高相联度，优化替换策略，优化代码，增大cache容量等很多措施实现。\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","slug":"cache_miss_type","published":1,"updated":"2017-05-08T16:40:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2gdu6iw0003v1o3c931u9e3","content":"<p>Cache访问失效分为强制性失效/冷失效（compulsory miss/cold miss）、容量失效（capacity miss）和冲突失效（conflict miss）。其中容量失效和冲突失效概念非常相近，理解起来不容易区别。</p>\n<a id=\"more\"></a>\n<p><strong>Title: <a href=\"https://aidaizyy.github.io/cache_miss_type\" target=\"_blank\" rel=\"external\">容量失效（capacity miss）与冲突失效（conflict miss）的区别</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#x6d;&#97;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#97;&#105;&#x64;&#97;&#105;&#x7a;&#x79;&#x79;&#64;&#103;&#109;&#97;&#x69;&#108;&#46;&#x63;&#111;&#x6d;\">&#97;&#105;&#x64;&#97;&#105;&#x7a;&#x79;&#x79;&#64;&#103;&#109;&#97;&#x69;&#108;&#46;&#x63;&#111;&#x6d;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-12-10</a></strong></p>\n<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><ul>\n<li><strong>强制性失效：</strong>CPU第一次访问相应cache块，cache中肯定没有该cache块，引起的失效叫做强制性失效。这是不可避免的。</li>\n<li><strong>容量失效：</strong>有限的cache容量导致cache放不下而替换出cache块，被替换出去的cache块再被访问，引起的失效叫做容量失效。</li>\n<li><strong>冲突失效：</strong>在直接相联或组相联的cache中，不同的cache块由于index相同相互替换，引起的失效叫做冲突失效。</li>\n</ul>\n<p>#理解</p>\n<p>如果两个cache块指向同一个cache位置，替换后，访问被替换cache块到底是属于容量失效还是冲突失效呢？<br>主要看当前cache的存储情况。<br>假设这里有32KB大小的直接相联cache。<br>情况一（容量失效）：如果有一个64KB大小的数组需要重复访问，数组的大小远远大于cache大小，没办法全部放入cache。第一次访问数组发生的失效全都是强制性失效。之后再访问数组，再发生的失效则全都是容量失效，这时cache已经存满，容量不足以存储全部数据。<br>情况二（冲突失效）：如果有两个8KB大小的数据需要来回访问，但是这两个数组都映射到相同的地址，cache大小足够存储全部的数据，但是因为相同地址发生了冲突需要来回替换，发生的失效则全都是冲突失效（第一次访问失效依旧是强制性失效），这时cache并没有存满。<br>避免容量失效只能通过增加cache大小实现，而避免冲突失效则可以通过提高相联度，优化替换策略，优化代码，增大cache容量等很多措施实现。</p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>Cache访问失效分为强制性失效/冷失效（compulsory miss/cold miss）、容量失效（capacity miss）和冲突失效（conflict miss）。其中容量失效和冲突失效概念非常相近，理解起来不容易区别。</p>","more":"<p><strong>Title: <a href=\"https://aidaizyy.github.io/cache_miss_type\" target=\"_blank\" rel=\"external\">容量失效（capacity miss）与冲突失效（conflict miss）的区别</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#x6d;&#97;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#97;&#105;&#x64;&#97;&#105;&#x7a;&#x79;&#x79;&#64;&#103;&#109;&#97;&#x69;&#108;&#46;&#x63;&#111;&#x6d;\">&#97;&#105;&#x64;&#97;&#105;&#x7a;&#x79;&#x79;&#64;&#103;&#109;&#97;&#x69;&#108;&#46;&#x63;&#111;&#x6d;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-12-10</a></strong></p>\n<h1 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h1><ul>\n<li><strong>强制性失效：</strong>CPU第一次访问相应cache块，cache中肯定没有该cache块，引起的失效叫做强制性失效。这是不可避免的。</li>\n<li><strong>容量失效：</strong>有限的cache容量导致cache放不下而替换出cache块，被替换出去的cache块再被访问，引起的失效叫做容量失效。</li>\n<li><strong>冲突失效：</strong>在直接相联或组相联的cache中，不同的cache块由于index相同相互替换，引起的失效叫做冲突失效。</li>\n</ul>\n<p>#理解</p>\n<p>如果两个cache块指向同一个cache位置，替换后，访问被替换cache块到底是属于容量失效还是冲突失效呢？<br>主要看当前cache的存储情况。<br>假设这里有32KB大小的直接相联cache。<br>情况一（容量失效）：如果有一个64KB大小的数组需要重复访问，数组的大小远远大于cache大小，没办法全部放入cache。第一次访问数组发生的失效全都是强制性失效。之后再访问数组，再发生的失效则全都是容量失效，这时cache已经存满，容量不足以存储全部数据。<br>情况二（冲突失效）：如果有两个8KB大小的数据需要来回访问，但是这两个数组都映射到相同的地址，cache大小足够存储全部的数据，但是因为相同地址发生了冲突需要来回替换，发生的失效则全都是冲突失效（第一次访问失效依旧是强制性失效），这时cache并没有存满。<br>避免容量失效只能通过增加cache大小实现，而避免冲突失效则可以通过提高相联度，优化替换策略，优化代码，增大cache容量等很多措施实现。</p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>"},{"title":"DPDK编译运行","toc":true,"date":"2015-04-28T06:46:52.000Z","_content":"\nDPDK（Data Plane Development kit）是Intel发布的数据包处理转发套件。\n\n<!--more-->\n**Title: [dpdk编译运行](https://aidaizyy.github.io/dpdk)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2016-08-23](http://aidaizyy.github.io)**\n\n## 下载源码\n\n下载DPDK-2.0.0\n``` bash\nwget http://www.dpdk.org/browse/dpdk/snapshot/dpdk-2.0.0.tar.gz\n```\n或者直接访问http://www.dpdk.org/download/ 下载最新的版本。\n\n解开压缩包\n``` bash\ntar -xvzf dpdk-2.0.0.tar.gz\n```\n\n## 准备环境\n\n### linux kernel header\n\n确保系统是否已安装linux kernel header，未安装则：\n``` bash\nsudo apt-get install linux-header-3.13.0-49-generic\n```\n\nlinux kernel版本号由系统本身决定，以下命令查看：\n``` bash\nuname -r\n```\n\nkernel版本号必须大于2.6.33。\n同时glibc版本号大于2.7。\n\n### libpcap函数库\n\n``` bash\nsudo apt-get install libpcap-dev\n```\n\n### hugepages\n\n查看kernel是否支持hugepapse\n``` bash\ngrep -i huge /boot/config-3.13.0-49-generic\n```\n同样，kernel版本号由系统本身决定。\n如果出现\n``` bash\nCONFIG_HUGETLBFS=y\nCONFIG_HUGETLB_PAGE=y\n```\n则表示支持hugepages。\n\n查看当前系统hugepages信息\n``` bash\ngrep -i huge /proc/meminfo\n```\n\n配置hugepages\n``` bash\nvi /etc/sysctl.conf\n#在文件底部添加\nvm.nr_hugepages=512\n#表示hugepages的页面数量\n\nvi /etc/fstab\n#在文件底部添加\nhuge /mnt/huge hugetlbfs defaults 0 0\n\nmkdir /mnt/huge\nchmod 777 /mnt/huge\n```\n\n重新启动后查看/proc/meminfo 就会发现hugepages已经加载。\n``` bash\nAnonHugePages:     53248 kB\nHugePages_Total:     512\nHugePages_Free:      512\nHugePages_Rsvd:        0\nHugePages_Surp:        0\nHugepagesize:       2048 kB\n```\n\n## 编译安装\n``` bash\ncd dpdk-2.0.0\nmake install T=x86_64-native-linuxapp-gcc\n```\nx86_64指x86构架64位系统。如果是32位系统，将x86_64替换为i686。\n\n官网给出的编译平台规范是ARCH-MACHINE-EXECENV-TOOLCHAIN\nARCH can be: i686, x86_64, ppc_64\nMACHINE can be: native, ivshmem, power8\nEXECENV can be: linuxapp, bsdapp\nTOOLCHAIN can be: gcc, icc\n\n这里在Ubuntu Linux 64位系统本地环境下gcc工具编译\n\n也可以先设置，再编译。\n``` bash\nmake config T=x86_64-native-linuxapp-gcc\nmake\n```\n\nmake install会将编译后的文件放入新建的x86_64-native-linuxapp-gcc目录。\nmake config + make会将编译后的文件放入新建的build目录。\n\n## 加载模块\n\n``` bash\nsudo modprobe uio\nsudo insmod kmod/igb_uio.ko\n```\nuio是kernel自带的用户空间IO模块\nigb_uio是dpdk编译的模块，出现在dpdk-2.0.0/build/kmod 或者dpdk-2.0.0/x86_64-native-linuxapp-gcc/kmod 目录中。\n（在新版本中可直接用`sudo modprobe uio_pci_generic`替代`uio`和`igb_uio`）\n\n## 绑定网卡\n\n查看当前网卡信息\n（在新版本中用`dpdk-devbind.py`替代`dpdk_nic_bind.py`）\n``` bash\ncd dpdk-2.0.0\n./tools/dpdk_nic_bind.py --status\n\nNetwork devices using kernel driver\n===================================\n0000:00:05.0 '82545EM Gigabit Ethernet Controller (Copper)' if=eth0 drv=e1000 unused= *Active*\n0000:00:06.0 '82545EM Gigabit Ethernet Controller (Copper)' if=eth1 drv=e1000 unused= *Active*\n0000:00:07.0 '82545EM Gigabit Ethernet Controller (Copper)' if=eth3 drv=e1000 unused= *Active*\n\nOther network devices\n=====================\n<none>\n\n```\n\n绑定网卡\n（在新版本中如果使用了`uio_pci_generic`，则把`--bind=`后的`igb_uio`换成`uio_pci_generic`）\n``` bash\n./tools/dpdk_nic_bind.py --bind=igb_uio 00:05.0\n```\n\n绑定之前，保证网卡处于非活跃状态\n``` bash\nifconfig eth0 down\n```\n\n## 运行示例\n\n运行helloworld示例\n``` bash\n#添加环境变量\nexport RTE_SDK=$SDK/dpdp-2.0.0\nexport RTE_TARGET=x86_64-native-linuxapp-gcc\n\n#编译\ncd /dpdk-2.0.0/example/helloworld\nmake\n\n#运行\n./build/helloworld -c 3 -n 2\n\nhello from core 1\nhello from core 0\n```\n\n这里的RTE_SDK指dpdk主目录的路径。\n\n-c COREMASK -n NUM为必须参数\nCOREMASK: 一个十六进制位掩码表示分配的逻辑内核数量。\nNUM: 一个十进制整数表示内存通道数量。\n\n运行完成后，显示\nhello from core 1\nhello from core 0。\n\n其他示例程序参数有不同要求，参见官方网站的说明文档。\n\n## 脚本安装\n\nDPDK提供了更简单的脚本安装。\n在解开压缩包和设置好环境变量RTE_SDK和RTE_TARGET后，运行setup.sh脚本。\n``` bash\ncd /dpdk-2.0.0\n./tools/setup.sh\n\n----------------------------------------------------------\n Step 1: Select the DPDK environment to build\n----------------------------------------------------------\n[1] i686-native-linuxapp-gcc\n[2] i686-native-linuxapp-icc\n[3] ppc_64-power8-linuxapp-gcc\n[4] x86_64-ivshmem-linuxapp-gcc\n[5] x86_64-ivshmem-linuxapp-icc\n[6] x86_64-native-bsdapp-clang\n[7] x86_64-native-bsdapp-gcc\n[8] x86_64-native-linuxapp-clang\n[9] x86_64-native-linuxapp-gcc\n[10] x86_64-native-linuxapp-icc\n[11] x86_x32-native-linuxapp-gcc\n\n----------------------------------------------------------\n Step 2: Setup linuxapp environment\n----------------------------------------------------------\n[12] Insert IGB UIO module\n[13] Insert VFIO module\n[14] Insert KNI module\n[15] Setup hugepage mappings for non-NUMA systems\n[16] Setup hugepage mappings for NUMA systems\n[17] Display current Ethernet device settings\n[18] Bind Ethernet device to IGB UIO module\n[19] Bind Ethernet device to VFIO module\n[20] Setup VFIO permissions\n\n----------------------------------------------------------\n Step 3: Run test application for linuxapp environment\n----------------------------------------------------------\n[21] Run test application ($RTE_TARGET/app/test)\n[22] Run testpmd application in interactive mode ($RTE_TARGET/app/testpmd)\n\n----------------------------------------------------------\n Step 4: Other tools\n----------------------------------------------------------\n[23] List hugepage info from /proc/meminfo\n\n----------------------------------------------------------\n Step 5: Uninstall and system cleanup\n----------------------------------------------------------\n[24] Uninstall all targets\n[25] Unbind NICs from IGB UIO or VFIO driver\n[26] Remove IGB UIO module\n[27] Remove VFIO module\n[28] Remove KNI module\n[29] Remove hugepage mappings\n\n[30] Exit Script\n\nOption: \n```\n按照脚本指示一步一步运行即可。\n依次执行9-12-15-18就可以达到和上面一样的结果。\n当然不同情况，脚本执行步骤不同。\n\n## 示例程序\n\n几个值得关注的示例程序。\n\n- testpmd: 测试程序，可以在setup.sh脚本中运行或者在app/ 目录下。\n\t文档: http://www.dpdk.org/doc/guides/testpmd_app_ug/index.html\n\n- l2fwd: 链路层转发程序，在example/ 目录下。\n\texample /目录下有很多其他值得关注的示例程序。\n\t文档: http://www.dpdk.org/doc/guides/sample_app_ug/index.html\n\n- pktgen-dpdk: 基于DPDK的高速发包程序\n\tDPDK官方网站：http://www.dpdk.org/browse/apps/pktgen-dpdk \n\tGitHub：http://github.com/pktgen/Pktgen-DPDK\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","source":"_posts/dpdk.md","raw":"title: DPDK编译运行\ntoc: true\ndate: 2015-04-28 14:46:52\ntags: \n- dpdk\ncategories: dpdk\n---\n\nDPDK（Data Plane Development kit）是Intel发布的数据包处理转发套件。\n\n<!--more-->\n**Title: [dpdk编译运行](https://aidaizyy.github.io/dpdk)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2016-08-23](http://aidaizyy.github.io)**\n\n## 下载源码\n\n下载DPDK-2.0.0\n``` bash\nwget http://www.dpdk.org/browse/dpdk/snapshot/dpdk-2.0.0.tar.gz\n```\n或者直接访问http://www.dpdk.org/download/ 下载最新的版本。\n\n解开压缩包\n``` bash\ntar -xvzf dpdk-2.0.0.tar.gz\n```\n\n## 准备环境\n\n### linux kernel header\n\n确保系统是否已安装linux kernel header，未安装则：\n``` bash\nsudo apt-get install linux-header-3.13.0-49-generic\n```\n\nlinux kernel版本号由系统本身决定，以下命令查看：\n``` bash\nuname -r\n```\n\nkernel版本号必须大于2.6.33。\n同时glibc版本号大于2.7。\n\n### libpcap函数库\n\n``` bash\nsudo apt-get install libpcap-dev\n```\n\n### hugepages\n\n查看kernel是否支持hugepapse\n``` bash\ngrep -i huge /boot/config-3.13.0-49-generic\n```\n同样，kernel版本号由系统本身决定。\n如果出现\n``` bash\nCONFIG_HUGETLBFS=y\nCONFIG_HUGETLB_PAGE=y\n```\n则表示支持hugepages。\n\n查看当前系统hugepages信息\n``` bash\ngrep -i huge /proc/meminfo\n```\n\n配置hugepages\n``` bash\nvi /etc/sysctl.conf\n#在文件底部添加\nvm.nr_hugepages=512\n#表示hugepages的页面数量\n\nvi /etc/fstab\n#在文件底部添加\nhuge /mnt/huge hugetlbfs defaults 0 0\n\nmkdir /mnt/huge\nchmod 777 /mnt/huge\n```\n\n重新启动后查看/proc/meminfo 就会发现hugepages已经加载。\n``` bash\nAnonHugePages:     53248 kB\nHugePages_Total:     512\nHugePages_Free:      512\nHugePages_Rsvd:        0\nHugePages_Surp:        0\nHugepagesize:       2048 kB\n```\n\n## 编译安装\n``` bash\ncd dpdk-2.0.0\nmake install T=x86_64-native-linuxapp-gcc\n```\nx86_64指x86构架64位系统。如果是32位系统，将x86_64替换为i686。\n\n官网给出的编译平台规范是ARCH-MACHINE-EXECENV-TOOLCHAIN\nARCH can be: i686, x86_64, ppc_64\nMACHINE can be: native, ivshmem, power8\nEXECENV can be: linuxapp, bsdapp\nTOOLCHAIN can be: gcc, icc\n\n这里在Ubuntu Linux 64位系统本地环境下gcc工具编译\n\n也可以先设置，再编译。\n``` bash\nmake config T=x86_64-native-linuxapp-gcc\nmake\n```\n\nmake install会将编译后的文件放入新建的x86_64-native-linuxapp-gcc目录。\nmake config + make会将编译后的文件放入新建的build目录。\n\n## 加载模块\n\n``` bash\nsudo modprobe uio\nsudo insmod kmod/igb_uio.ko\n```\nuio是kernel自带的用户空间IO模块\nigb_uio是dpdk编译的模块，出现在dpdk-2.0.0/build/kmod 或者dpdk-2.0.0/x86_64-native-linuxapp-gcc/kmod 目录中。\n（在新版本中可直接用`sudo modprobe uio_pci_generic`替代`uio`和`igb_uio`）\n\n## 绑定网卡\n\n查看当前网卡信息\n（在新版本中用`dpdk-devbind.py`替代`dpdk_nic_bind.py`）\n``` bash\ncd dpdk-2.0.0\n./tools/dpdk_nic_bind.py --status\n\nNetwork devices using kernel driver\n===================================\n0000:00:05.0 '82545EM Gigabit Ethernet Controller (Copper)' if=eth0 drv=e1000 unused= *Active*\n0000:00:06.0 '82545EM Gigabit Ethernet Controller (Copper)' if=eth1 drv=e1000 unused= *Active*\n0000:00:07.0 '82545EM Gigabit Ethernet Controller (Copper)' if=eth3 drv=e1000 unused= *Active*\n\nOther network devices\n=====================\n<none>\n\n```\n\n绑定网卡\n（在新版本中如果使用了`uio_pci_generic`，则把`--bind=`后的`igb_uio`换成`uio_pci_generic`）\n``` bash\n./tools/dpdk_nic_bind.py --bind=igb_uio 00:05.0\n```\n\n绑定之前，保证网卡处于非活跃状态\n``` bash\nifconfig eth0 down\n```\n\n## 运行示例\n\n运行helloworld示例\n``` bash\n#添加环境变量\nexport RTE_SDK=$SDK/dpdp-2.0.0\nexport RTE_TARGET=x86_64-native-linuxapp-gcc\n\n#编译\ncd /dpdk-2.0.0/example/helloworld\nmake\n\n#运行\n./build/helloworld -c 3 -n 2\n\nhello from core 1\nhello from core 0\n```\n\n这里的RTE_SDK指dpdk主目录的路径。\n\n-c COREMASK -n NUM为必须参数\nCOREMASK: 一个十六进制位掩码表示分配的逻辑内核数量。\nNUM: 一个十进制整数表示内存通道数量。\n\n运行完成后，显示\nhello from core 1\nhello from core 0。\n\n其他示例程序参数有不同要求，参见官方网站的说明文档。\n\n## 脚本安装\n\nDPDK提供了更简单的脚本安装。\n在解开压缩包和设置好环境变量RTE_SDK和RTE_TARGET后，运行setup.sh脚本。\n``` bash\ncd /dpdk-2.0.0\n./tools/setup.sh\n\n----------------------------------------------------------\n Step 1: Select the DPDK environment to build\n----------------------------------------------------------\n[1] i686-native-linuxapp-gcc\n[2] i686-native-linuxapp-icc\n[3] ppc_64-power8-linuxapp-gcc\n[4] x86_64-ivshmem-linuxapp-gcc\n[5] x86_64-ivshmem-linuxapp-icc\n[6] x86_64-native-bsdapp-clang\n[7] x86_64-native-bsdapp-gcc\n[8] x86_64-native-linuxapp-clang\n[9] x86_64-native-linuxapp-gcc\n[10] x86_64-native-linuxapp-icc\n[11] x86_x32-native-linuxapp-gcc\n\n----------------------------------------------------------\n Step 2: Setup linuxapp environment\n----------------------------------------------------------\n[12] Insert IGB UIO module\n[13] Insert VFIO module\n[14] Insert KNI module\n[15] Setup hugepage mappings for non-NUMA systems\n[16] Setup hugepage mappings for NUMA systems\n[17] Display current Ethernet device settings\n[18] Bind Ethernet device to IGB UIO module\n[19] Bind Ethernet device to VFIO module\n[20] Setup VFIO permissions\n\n----------------------------------------------------------\n Step 3: Run test application for linuxapp environment\n----------------------------------------------------------\n[21] Run test application ($RTE_TARGET/app/test)\n[22] Run testpmd application in interactive mode ($RTE_TARGET/app/testpmd)\n\n----------------------------------------------------------\n Step 4: Other tools\n----------------------------------------------------------\n[23] List hugepage info from /proc/meminfo\n\n----------------------------------------------------------\n Step 5: Uninstall and system cleanup\n----------------------------------------------------------\n[24] Uninstall all targets\n[25] Unbind NICs from IGB UIO or VFIO driver\n[26] Remove IGB UIO module\n[27] Remove VFIO module\n[28] Remove KNI module\n[29] Remove hugepage mappings\n\n[30] Exit Script\n\nOption: \n```\n按照脚本指示一步一步运行即可。\n依次执行9-12-15-18就可以达到和上面一样的结果。\n当然不同情况，脚本执行步骤不同。\n\n## 示例程序\n\n几个值得关注的示例程序。\n\n- testpmd: 测试程序，可以在setup.sh脚本中运行或者在app/ 目录下。\n\t文档: http://www.dpdk.org/doc/guides/testpmd_app_ug/index.html\n\n- l2fwd: 链路层转发程序，在example/ 目录下。\n\texample /目录下有很多其他值得关注的示例程序。\n\t文档: http://www.dpdk.org/doc/guides/sample_app_ug/index.html\n\n- pktgen-dpdk: 基于DPDK的高速发包程序\n\tDPDK官方网站：http://www.dpdk.org/browse/apps/pktgen-dpdk \n\tGitHub：http://github.com/pktgen/Pktgen-DPDK\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","slug":"dpdk","published":1,"updated":"2017-05-08T16:40:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2gdu6jb0007v1o381rycwb2","content":"<p>DPDK（Data Plane Development kit）是Intel发布的数据包处理转发套件。</p>\n<a id=\"more\"></a>\n<p><strong>Title: <a href=\"https://aidaizyy.github.io/dpdk\" target=\"_blank\" rel=\"external\">dpdk编译运行</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#109;&#x61;&#105;&#108;&#116;&#111;&#58;&#97;&#105;&#x64;&#97;&#105;&#x7a;&#x79;&#x79;&#64;&#103;&#109;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;\">&#97;&#105;&#x64;&#97;&#105;&#x7a;&#x79;&#x79;&#64;&#103;&#109;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2016-08-23</a></strong></p>\n<h2 id=\"下载源码\"><a href=\"#下载源码\" class=\"headerlink\" title=\"下载源码\"></a>下载源码</h2><p>下载DPDK-2.0.0<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://www.dpdk.org/browse/dpdk/snapshot/dpdk-2.0.0.tar.gz</div></pre></td></tr></table></figure></p>\n<p>或者直接访问<a href=\"http://www.dpdk.org/download/\" target=\"_blank\" rel=\"external\">http://www.dpdk.org/download/</a> 下载最新的版本。</p>\n<p>解开压缩包<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -xvzf dpdk-2.0.0.tar.gz</div></pre></td></tr></table></figure></p>\n<h2 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h2><h3 id=\"linux-kernel-header\"><a href=\"#linux-kernel-header\" class=\"headerlink\" title=\"linux kernel header\"></a>linux kernel header</h3><p>确保系统是否已安装linux kernel header，未安装则：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install linux-header-3.13.0-49-generic</div></pre></td></tr></table></figure></p>\n<p>linux kernel版本号由系统本身决定，以下命令查看：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">uname -r</div></pre></td></tr></table></figure></p>\n<p>kernel版本号必须大于2.6.33。<br>同时glibc版本号大于2.7。</p>\n<h3 id=\"libpcap函数库\"><a href=\"#libpcap函数库\" class=\"headerlink\" title=\"libpcap函数库\"></a>libpcap函数库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install libpcap-dev</div></pre></td></tr></table></figure>\n<h3 id=\"hugepages\"><a href=\"#hugepages\" class=\"headerlink\" title=\"hugepages\"></a>hugepages</h3><p>查看kernel是否支持hugepapse<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">grep -i huge /boot/config-3.13.0-49-generic</div></pre></td></tr></table></figure></p>\n<p>同样，kernel版本号由系统本身决定。<br>如果出现<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">CONFIG_HUGETLBFS=y</div><div class=\"line\">CONFIG_HUGETLB_PAGE=y</div></pre></td></tr></table></figure></p>\n<p>则表示支持hugepages。</p>\n<p>查看当前系统hugepages信息<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">grep -i huge /proc/meminfo</div></pre></td></tr></table></figure></p>\n<p>配置hugepages<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /etc/sysctl.conf</div><div class=\"line\"><span class=\"comment\">#在文件底部添加</span></div><div class=\"line\">vm.nr_hugepages=512</div><div class=\"line\"><span class=\"comment\">#表示hugepages的页面数量</span></div><div class=\"line\"></div><div class=\"line\">vi /etc/fstab</div><div class=\"line\"><span class=\"comment\">#在文件底部添加</span></div><div class=\"line\">huge /mnt/huge hugetlbfs defaults 0 0</div><div class=\"line\"></div><div class=\"line\">mkdir /mnt/huge</div><div class=\"line\">chmod 777 /mnt/huge</div></pre></td></tr></table></figure></p>\n<p>重新启动后查看/proc/meminfo 就会发现hugepages已经加载。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">AnonHugePages:     53248 kB</div><div class=\"line\">HugePages_Total:     512</div><div class=\"line\">HugePages_Free:      512</div><div class=\"line\">HugePages_Rsvd:        0</div><div class=\"line\">HugePages_Surp:        0</div><div class=\"line\">Hugepagesize:       2048 kB</div></pre></td></tr></table></figure></p>\n<h2 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> dpdk-2.0.0</div><div class=\"line\">make install T=x86_64-native-linuxapp-gcc</div></pre></td></tr></table></figure>\n<p>x86_64指x86构架64位系统。如果是32位系统，将x86_64替换为i686。</p>\n<p>官网给出的编译平台规范是ARCH-MACHINE-EXECENV-TOOLCHAIN<br>ARCH can be: i686, x86_64, ppc_64<br>MACHINE can be: native, ivshmem, power8<br>EXECENV can be: linuxapp, bsdapp<br>TOOLCHAIN can be: gcc, icc</p>\n<p>这里在Ubuntu Linux 64位系统本地环境下gcc工具编译</p>\n<p>也可以先设置，再编译。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">make config T=x86_64-native-linuxapp-gcc</div><div class=\"line\">make</div></pre></td></tr></table></figure></p>\n<p>make install会将编译后的文件放入新建的x86_64-native-linuxapp-gcc目录。<br>make config + make会将编译后的文件放入新建的build目录。</p>\n<h2 id=\"加载模块\"><a href=\"#加载模块\" class=\"headerlink\" title=\"加载模块\"></a>加载模块</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo modprobe uio</div><div class=\"line\">sudo insmod kmod/igb_uio.ko</div></pre></td></tr></table></figure>\n<p>uio是kernel自带的用户空间IO模块<br>igb_uio是dpdk编译的模块，出现在dpdk-2.0.0/build/kmod 或者dpdk-2.0.0/x86_64-native-linuxapp-gcc/kmod 目录中。<br>（在新版本中可直接用<code>sudo modprobe uio_pci_generic</code>替代<code>uio</code>和<code>igb_uio</code>）</p>\n<h2 id=\"绑定网卡\"><a href=\"#绑定网卡\" class=\"headerlink\" title=\"绑定网卡\"></a>绑定网卡</h2><p>查看当前网卡信息<br>（在新版本中用<code>dpdk-devbind.py</code>替代<code>dpdk_nic_bind.py</code>）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> dpdk-2.0.0</div><div class=\"line\">./tools/dpdk_nic_bind.py --status</div><div class=\"line\"></div><div class=\"line\">Network devices using kernel driver</div><div class=\"line\">===================================</div><div class=\"line\">0000:00:05.0 <span class=\"string\">'82545EM Gigabit Ethernet Controller (Copper)'</span> <span class=\"keyword\">if</span>=eth0 drv=e1000 unused= *Active*</div><div class=\"line\">0000:00:06.0 <span class=\"string\">'82545EM Gigabit Ethernet Controller (Copper)'</span> <span class=\"keyword\">if</span>=eth1 drv=e1000 unused= *Active*</div><div class=\"line\">0000:00:07.0 <span class=\"string\">'82545EM Gigabit Ethernet Controller (Copper)'</span> <span class=\"keyword\">if</span>=eth3 drv=e1000 unused= *Active*</div><div class=\"line\"></div><div class=\"line\">Other network devices</div><div class=\"line\">=====================</div><div class=\"line\">&lt;none&gt;</div></pre></td></tr></table></figure></p>\n<p>绑定网卡<br>（在新版本中如果使用了<code>uio_pci_generic</code>，则把<code>--bind=</code>后的<code>igb_uio</code>换成<code>uio_pci_generic</code>）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./tools/dpdk_nic_bind.py --bind=igb_uio 00:05.0</div></pre></td></tr></table></figure></p>\n<p>绑定之前，保证网卡处于非活跃状态<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ifconfig eth0 down</div></pre></td></tr></table></figure></p>\n<h2 id=\"运行示例\"><a href=\"#运行示例\" class=\"headerlink\" title=\"运行示例\"></a>运行示例</h2><p>运行helloworld示例<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#添加环境变量</span></div><div class=\"line\"><span class=\"built_in\">export</span> RTE_SDK=<span class=\"variable\">$SDK</span>/dpdp-2.0.0</div><div class=\"line\"><span class=\"built_in\">export</span> RTE_TARGET=x86_64-native-linuxapp-gcc</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#编译</span></div><div class=\"line\"><span class=\"built_in\">cd</span> /dpdk-2.0.0/example/helloworld</div><div class=\"line\">make</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#运行</span></div><div class=\"line\">./build/helloworld -c 3 -n 2</div><div class=\"line\"></div><div class=\"line\">hello from core 1</div><div class=\"line\">hello from core 0</div></pre></td></tr></table></figure></p>\n<p>这里的RTE_SDK指dpdk主目录的路径。</p>\n<p>-c COREMASK -n NUM为必须参数<br>COREMASK: 一个十六进制位掩码表示分配的逻辑内核数量。<br>NUM: 一个十进制整数表示内存通道数量。</p>\n<p>运行完成后，显示<br>hello from core 1<br>hello from core 0。</p>\n<p>其他示例程序参数有不同要求，参见官方网站的说明文档。</p>\n<h2 id=\"脚本安装\"><a href=\"#脚本安装\" class=\"headerlink\" title=\"脚本安装\"></a>脚本安装</h2><p>DPDK提供了更简单的脚本安装。<br>在解开压缩包和设置好环境变量RTE_SDK和RTE_TARGET后，运行setup.sh脚本。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /dpdk-2.0.0</div><div class=\"line\">./tools/setup.sh</div><div class=\"line\"></div><div class=\"line\">----------------------------------------------------------</div><div class=\"line\"> Step 1: Select the DPDK environment to build</div><div class=\"line\">----------------------------------------------------------</div><div class=\"line\">[1] i686-native-linuxapp-gcc</div><div class=\"line\">[2] i686-native-linuxapp-icc</div><div class=\"line\">[3] ppc_64-power8-linuxapp-gcc</div><div class=\"line\">[4] x86_64-ivshmem-linuxapp-gcc</div><div class=\"line\">[5] x86_64-ivshmem-linuxapp-icc</div><div class=\"line\">[6] x86_64-native-bsdapp-clang</div><div class=\"line\">[7] x86_64-native-bsdapp-gcc</div><div class=\"line\">[8] x86_64-native-linuxapp-clang</div><div class=\"line\">[9] x86_64-native-linuxapp-gcc</div><div class=\"line\">[10] x86_64-native-linuxapp-icc</div><div class=\"line\">[11] x86_x32-native-linuxapp-gcc</div><div class=\"line\"></div><div class=\"line\">----------------------------------------------------------</div><div class=\"line\"> Step 2: Setup linuxapp environment</div><div class=\"line\">----------------------------------------------------------</div><div class=\"line\">[12] Insert IGB UIO module</div><div class=\"line\">[13] Insert VFIO module</div><div class=\"line\">[14] Insert KNI module</div><div class=\"line\">[15] Setup hugepage mappings <span class=\"keyword\">for</span> non-NUMA systems</div><div class=\"line\">[16] Setup hugepage mappings <span class=\"keyword\">for</span> NUMA systems</div><div class=\"line\">[17] Display current Ethernet device settings</div><div class=\"line\">[18] Bind Ethernet device to IGB UIO module</div><div class=\"line\">[19] Bind Ethernet device to VFIO module</div><div class=\"line\">[20] Setup VFIO permissions</div><div class=\"line\"></div><div class=\"line\">----------------------------------------------------------</div><div class=\"line\"> Step 3: Run <span class=\"built_in\">test</span> application <span class=\"keyword\">for</span> linuxapp environment</div><div class=\"line\">----------------------------------------------------------</div><div class=\"line\">[21] Run <span class=\"built_in\">test</span> application (<span class=\"variable\">$RTE_TARGET</span>/app/<span class=\"built_in\">test</span>)</div><div class=\"line\">[22] Run testpmd application <span class=\"keyword\">in</span> interactive mode (<span class=\"variable\">$RTE_TARGET</span>/app/testpmd)</div><div class=\"line\"></div><div class=\"line\">----------------------------------------------------------</div><div class=\"line\"> Step 4: Other tools</div><div class=\"line\">----------------------------------------------------------</div><div class=\"line\">[23] List hugepage info from /proc/meminfo</div><div class=\"line\"></div><div class=\"line\">----------------------------------------------------------</div><div class=\"line\"> Step 5: Uninstall and system cleanup</div><div class=\"line\">----------------------------------------------------------</div><div class=\"line\">[24] Uninstall all targets</div><div class=\"line\">[25] Unbind NICs from IGB UIO or VFIO driver</div><div class=\"line\">[26] Remove IGB UIO module</div><div class=\"line\">[27] Remove VFIO module</div><div class=\"line\">[28] Remove KNI module</div><div class=\"line\">[29] Remove hugepage mappings</div><div class=\"line\"></div><div class=\"line\">[30] Exit Script</div><div class=\"line\"></div><div class=\"line\">Option:</div></pre></td></tr></table></figure></p>\n<p>按照脚本指示一步一步运行即可。<br>依次执行9-12-15-18就可以达到和上面一样的结果。<br>当然不同情况，脚本执行步骤不同。</p>\n<h2 id=\"示例程序\"><a href=\"#示例程序\" class=\"headerlink\" title=\"示例程序\"></a>示例程序</h2><p>几个值得关注的示例程序。</p>\n<ul>\n<li><p>testpmd: 测试程序，可以在setup.sh脚本中运行或者在app/ 目录下。<br>  文档: <a href=\"http://www.dpdk.org/doc/guides/testpmd_app_ug/index.html\" target=\"_blank\" rel=\"external\">http://www.dpdk.org/doc/guides/testpmd_app_ug/index.html</a></p>\n</li>\n<li><p>l2fwd: 链路层转发程序，在example/ 目录下。<br>  example /目录下有很多其他值得关注的示例程序。<br>  文档: <a href=\"http://www.dpdk.org/doc/guides/sample_app_ug/index.html\" target=\"_blank\" rel=\"external\">http://www.dpdk.org/doc/guides/sample_app_ug/index.html</a></p>\n</li>\n<li><p>pktgen-dpdk: 基于DPDK的高速发包程序<br>  DPDK官方网站：<a href=\"http://www.dpdk.org/browse/apps/pktgen-dpdk\" target=\"_blank\" rel=\"external\">http://www.dpdk.org/browse/apps/pktgen-dpdk</a><br>  GitHub：<a href=\"http://github.com/pktgen/Pktgen-DPDK\" target=\"_blank\" rel=\"external\">http://github.com/pktgen/Pktgen-DPDK</a></p>\n</li>\n</ul>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>DPDK（Data Plane Development kit）是Intel发布的数据包处理转发套件。</p>","more":"<p><strong>Title: <a href=\"https://aidaizyy.github.io/dpdk\" target=\"_blank\" rel=\"external\">dpdk编译运行</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#109;&#x61;&#105;&#108;&#116;&#111;&#58;&#97;&#105;&#x64;&#97;&#105;&#x7a;&#x79;&#x79;&#64;&#103;&#109;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;\">&#97;&#105;&#x64;&#97;&#105;&#x7a;&#x79;&#x79;&#64;&#103;&#109;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2016-08-23</a></strong></p>\n<h2 id=\"下载源码\"><a href=\"#下载源码\" class=\"headerlink\" title=\"下载源码\"></a>下载源码</h2><p>下载DPDK-2.0.0<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://www.dpdk.org/browse/dpdk/snapshot/dpdk-2.0.0.tar.gz</div></pre></td></tr></table></figure></p>\n<p>或者直接访问<a href=\"http://www.dpdk.org/download/\" target=\"_blank\" rel=\"external\">http://www.dpdk.org/download/</a> 下载最新的版本。</p>\n<p>解开压缩包<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -xvzf dpdk-2.0.0.tar.gz</div></pre></td></tr></table></figure></p>\n<h2 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h2><h3 id=\"linux-kernel-header\"><a href=\"#linux-kernel-header\" class=\"headerlink\" title=\"linux kernel header\"></a>linux kernel header</h3><p>确保系统是否已安装linux kernel header，未安装则：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install linux-header-3.13.0-49-generic</div></pre></td></tr></table></figure></p>\n<p>linux kernel版本号由系统本身决定，以下命令查看：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">uname -r</div></pre></td></tr></table></figure></p>\n<p>kernel版本号必须大于2.6.33。<br>同时glibc版本号大于2.7。</p>\n<h3 id=\"libpcap函数库\"><a href=\"#libpcap函数库\" class=\"headerlink\" title=\"libpcap函数库\"></a>libpcap函数库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apt-get install libpcap-dev</div></pre></td></tr></table></figure>\n<h3 id=\"hugepages\"><a href=\"#hugepages\" class=\"headerlink\" title=\"hugepages\"></a>hugepages</h3><p>查看kernel是否支持hugepapse<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">grep -i huge /boot/config-3.13.0-49-generic</div></pre></td></tr></table></figure></p>\n<p>同样，kernel版本号由系统本身决定。<br>如果出现<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">CONFIG_HUGETLBFS=y</div><div class=\"line\">CONFIG_HUGETLB_PAGE=y</div></pre></td></tr></table></figure></p>\n<p>则表示支持hugepages。</p>\n<p>查看当前系统hugepages信息<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">grep -i huge /proc/meminfo</div></pre></td></tr></table></figure></p>\n<p>配置hugepages<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /etc/sysctl.conf</div><div class=\"line\"><span class=\"comment\">#在文件底部添加</span></div><div class=\"line\">vm.nr_hugepages=512</div><div class=\"line\"><span class=\"comment\">#表示hugepages的页面数量</span></div><div class=\"line\"></div><div class=\"line\">vi /etc/fstab</div><div class=\"line\"><span class=\"comment\">#在文件底部添加</span></div><div class=\"line\">huge /mnt/huge hugetlbfs defaults 0 0</div><div class=\"line\"></div><div class=\"line\">mkdir /mnt/huge</div><div class=\"line\">chmod 777 /mnt/huge</div></pre></td></tr></table></figure></p>\n<p>重新启动后查看/proc/meminfo 就会发现hugepages已经加载。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">AnonHugePages:     53248 kB</div><div class=\"line\">HugePages_Total:     512</div><div class=\"line\">HugePages_Free:      512</div><div class=\"line\">HugePages_Rsvd:        0</div><div class=\"line\">HugePages_Surp:        0</div><div class=\"line\">Hugepagesize:       2048 kB</div></pre></td></tr></table></figure></p>\n<h2 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> dpdk-2.0.0</div><div class=\"line\">make install T=x86_64-native-linuxapp-gcc</div></pre></td></tr></table></figure>\n<p>x86_64指x86构架64位系统。如果是32位系统，将x86_64替换为i686。</p>\n<p>官网给出的编译平台规范是ARCH-MACHINE-EXECENV-TOOLCHAIN<br>ARCH can be: i686, x86_64, ppc_64<br>MACHINE can be: native, ivshmem, power8<br>EXECENV can be: linuxapp, bsdapp<br>TOOLCHAIN can be: gcc, icc</p>\n<p>这里在Ubuntu Linux 64位系统本地环境下gcc工具编译</p>\n<p>也可以先设置，再编译。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">make config T=x86_64-native-linuxapp-gcc</div><div class=\"line\">make</div></pre></td></tr></table></figure></p>\n<p>make install会将编译后的文件放入新建的x86_64-native-linuxapp-gcc目录。<br>make config + make会将编译后的文件放入新建的build目录。</p>\n<h2 id=\"加载模块\"><a href=\"#加载模块\" class=\"headerlink\" title=\"加载模块\"></a>加载模块</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo modprobe uio</div><div class=\"line\">sudo insmod kmod/igb_uio.ko</div></pre></td></tr></table></figure>\n<p>uio是kernel自带的用户空间IO模块<br>igb_uio是dpdk编译的模块，出现在dpdk-2.0.0/build/kmod 或者dpdk-2.0.0/x86_64-native-linuxapp-gcc/kmod 目录中。<br>（在新版本中可直接用<code>sudo modprobe uio_pci_generic</code>替代<code>uio</code>和<code>igb_uio</code>）</p>\n<h2 id=\"绑定网卡\"><a href=\"#绑定网卡\" class=\"headerlink\" title=\"绑定网卡\"></a>绑定网卡</h2><p>查看当前网卡信息<br>（在新版本中用<code>dpdk-devbind.py</code>替代<code>dpdk_nic_bind.py</code>）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> dpdk-2.0.0</div><div class=\"line\">./tools/dpdk_nic_bind.py --status</div><div class=\"line\"></div><div class=\"line\">Network devices using kernel driver</div><div class=\"line\">===================================</div><div class=\"line\">0000:00:05.0 <span class=\"string\">'82545EM Gigabit Ethernet Controller (Copper)'</span> <span class=\"keyword\">if</span>=eth0 drv=e1000 unused= *Active*</div><div class=\"line\">0000:00:06.0 <span class=\"string\">'82545EM Gigabit Ethernet Controller (Copper)'</span> <span class=\"keyword\">if</span>=eth1 drv=e1000 unused= *Active*</div><div class=\"line\">0000:00:07.0 <span class=\"string\">'82545EM Gigabit Ethernet Controller (Copper)'</span> <span class=\"keyword\">if</span>=eth3 drv=e1000 unused= *Active*</div><div class=\"line\"></div><div class=\"line\">Other network devices</div><div class=\"line\">=====================</div><div class=\"line\">&lt;none&gt;</div></pre></td></tr></table></figure></p>\n<p>绑定网卡<br>（在新版本中如果使用了<code>uio_pci_generic</code>，则把<code>--bind=</code>后的<code>igb_uio</code>换成<code>uio_pci_generic</code>）<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./tools/dpdk_nic_bind.py --bind=igb_uio 00:05.0</div></pre></td></tr></table></figure></p>\n<p>绑定之前，保证网卡处于非活跃状态<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ifconfig eth0 down</div></pre></td></tr></table></figure></p>\n<h2 id=\"运行示例\"><a href=\"#运行示例\" class=\"headerlink\" title=\"运行示例\"></a>运行示例</h2><p>运行helloworld示例<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#添加环境变量</span></div><div class=\"line\"><span class=\"built_in\">export</span> RTE_SDK=<span class=\"variable\">$SDK</span>/dpdp-2.0.0</div><div class=\"line\"><span class=\"built_in\">export</span> RTE_TARGET=x86_64-native-linuxapp-gcc</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#编译</span></div><div class=\"line\"><span class=\"built_in\">cd</span> /dpdk-2.0.0/example/helloworld</div><div class=\"line\">make</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#运行</span></div><div class=\"line\">./build/helloworld -c 3 -n 2</div><div class=\"line\"></div><div class=\"line\">hello from core 1</div><div class=\"line\">hello from core 0</div></pre></td></tr></table></figure></p>\n<p>这里的RTE_SDK指dpdk主目录的路径。</p>\n<p>-c COREMASK -n NUM为必须参数<br>COREMASK: 一个十六进制位掩码表示分配的逻辑内核数量。<br>NUM: 一个十进制整数表示内存通道数量。</p>\n<p>运行完成后，显示<br>hello from core 1<br>hello from core 0。</p>\n<p>其他示例程序参数有不同要求，参见官方网站的说明文档。</p>\n<h2 id=\"脚本安装\"><a href=\"#脚本安装\" class=\"headerlink\" title=\"脚本安装\"></a>脚本安装</h2><p>DPDK提供了更简单的脚本安装。<br>在解开压缩包和设置好环境变量RTE_SDK和RTE_TARGET后，运行setup.sh脚本。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /dpdk-2.0.0</div><div class=\"line\">./tools/setup.sh</div><div class=\"line\"></div><div class=\"line\">----------------------------------------------------------</div><div class=\"line\"> Step 1: Select the DPDK environment to build</div><div class=\"line\">----------------------------------------------------------</div><div class=\"line\">[1] i686-native-linuxapp-gcc</div><div class=\"line\">[2] i686-native-linuxapp-icc</div><div class=\"line\">[3] ppc_64-power8-linuxapp-gcc</div><div class=\"line\">[4] x86_64-ivshmem-linuxapp-gcc</div><div class=\"line\">[5] x86_64-ivshmem-linuxapp-icc</div><div class=\"line\">[6] x86_64-native-bsdapp-clang</div><div class=\"line\">[7] x86_64-native-bsdapp-gcc</div><div class=\"line\">[8] x86_64-native-linuxapp-clang</div><div class=\"line\">[9] x86_64-native-linuxapp-gcc</div><div class=\"line\">[10] x86_64-native-linuxapp-icc</div><div class=\"line\">[11] x86_x32-native-linuxapp-gcc</div><div class=\"line\"></div><div class=\"line\">----------------------------------------------------------</div><div class=\"line\"> Step 2: Setup linuxapp environment</div><div class=\"line\">----------------------------------------------------------</div><div class=\"line\">[12] Insert IGB UIO module</div><div class=\"line\">[13] Insert VFIO module</div><div class=\"line\">[14] Insert KNI module</div><div class=\"line\">[15] Setup hugepage mappings <span class=\"keyword\">for</span> non-NUMA systems</div><div class=\"line\">[16] Setup hugepage mappings <span class=\"keyword\">for</span> NUMA systems</div><div class=\"line\">[17] Display current Ethernet device settings</div><div class=\"line\">[18] Bind Ethernet device to IGB UIO module</div><div class=\"line\">[19] Bind Ethernet device to VFIO module</div><div class=\"line\">[20] Setup VFIO permissions</div><div class=\"line\"></div><div class=\"line\">----------------------------------------------------------</div><div class=\"line\"> Step 3: Run <span class=\"built_in\">test</span> application <span class=\"keyword\">for</span> linuxapp environment</div><div class=\"line\">----------------------------------------------------------</div><div class=\"line\">[21] Run <span class=\"built_in\">test</span> application (<span class=\"variable\">$RTE_TARGET</span>/app/<span class=\"built_in\">test</span>)</div><div class=\"line\">[22] Run testpmd application <span class=\"keyword\">in</span> interactive mode (<span class=\"variable\">$RTE_TARGET</span>/app/testpmd)</div><div class=\"line\"></div><div class=\"line\">----------------------------------------------------------</div><div class=\"line\"> Step 4: Other tools</div><div class=\"line\">----------------------------------------------------------</div><div class=\"line\">[23] List hugepage info from /proc/meminfo</div><div class=\"line\"></div><div class=\"line\">----------------------------------------------------------</div><div class=\"line\"> Step 5: Uninstall and system cleanup</div><div class=\"line\">----------------------------------------------------------</div><div class=\"line\">[24] Uninstall all targets</div><div class=\"line\">[25] Unbind NICs from IGB UIO or VFIO driver</div><div class=\"line\">[26] Remove IGB UIO module</div><div class=\"line\">[27] Remove VFIO module</div><div class=\"line\">[28] Remove KNI module</div><div class=\"line\">[29] Remove hugepage mappings</div><div class=\"line\"></div><div class=\"line\">[30] Exit Script</div><div class=\"line\"></div><div class=\"line\">Option:</div></pre></td></tr></table></figure></p>\n<p>按照脚本指示一步一步运行即可。<br>依次执行9-12-15-18就可以达到和上面一样的结果。<br>当然不同情况，脚本执行步骤不同。</p>\n<h2 id=\"示例程序\"><a href=\"#示例程序\" class=\"headerlink\" title=\"示例程序\"></a>示例程序</h2><p>几个值得关注的示例程序。</p>\n<ul>\n<li><p>testpmd: 测试程序，可以在setup.sh脚本中运行或者在app/ 目录下。<br>  文档: <a href=\"http://www.dpdk.org/doc/guides/testpmd_app_ug/index.html\" target=\"_blank\" rel=\"external\">http://www.dpdk.org/doc/guides/testpmd_app_ug/index.html</a></p>\n</li>\n<li><p>l2fwd: 链路层转发程序，在example/ 目录下。<br>  example /目录下有很多其他值得关注的示例程序。<br>  文档: <a href=\"http://www.dpdk.org/doc/guides/sample_app_ug/index.html\" target=\"_blank\" rel=\"external\">http://www.dpdk.org/doc/guides/sample_app_ug/index.html</a></p>\n</li>\n<li><p>pktgen-dpdk: 基于DPDK的高速发包程序<br>  DPDK官方网站：<a href=\"http://www.dpdk.org/browse/apps/pktgen-dpdk\" target=\"_blank\" rel=\"external\">http://www.dpdk.org/browse/apps/pktgen-dpdk</a><br>  GitHub：<a href=\"http://github.com/pktgen/Pktgen-DPDK\" target=\"_blank\" rel=\"external\">http://github.com/pktgen/Pktgen-DPDK</a></p>\n</li>\n</ul>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>"},{"title":"DPDK-l2fwd详解","date":"2015-03-31T05:59:13.000Z","toc":true,"_content":"\nL2 forwarding sample application在DPDK（Data Plane Development Kit）的基础上实现了第二层（链路层）的数据包转发。\n\n<!--more-->\n**Title: [dpdk-l2fwd详解](http://aidaizyy.github.io/dpdk_l2fwd)**\n**Author: [Yunyao Zhang（张云尧）](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-04-15](http://aidaizyy.github.io)**\n\n## 概要\n\n版本：DPDK-1.8.0\n\n本例中实现了相邻端口之间的相互转发。\n比如一共4个端口可用，那么端口1收到数据后会转发给端口2，端口2收到数据后会转发给端口1，端口3和端口4也会相互转发。\n\n## 编译\n\n设置环境变量\n``` bash\nexport RTE_SDK=/(RTE_SDK) #DPDK的路径\nexport RTE_TARGET=x86_64-native-linuxapp-gcc #DPDK的编译目标\n```\n\n进入示例目录\n``` bash\ncd /(RTE_SDK)/example/l2wfd\n```\n\n编译\n``` bash\nmake\n```\n\n## 运行\n\n``` bash\n./build/l2wfd [EAL options] -- -p PORTMASK [-q NQ -T t]\n```\n\n- EAL options\n\t- DPDK EAL的默认参数，必须参数为-c COREMASK -n NUM。\n\t- COREMASK：一个十六进制位掩码表示分配的逻辑内核数量。\n\t- NUM：一个十进制整数表示内存通道数量。\n\n- -p PORTMASK\n\tPORTMASK：一个十六进制位掩码表示分配的端口数量。\n\n- -q NQ\n\tNQ：表示分配给每个逻辑内核的收发队列数量。\n\n- -T t\n\tt: 表示打印统计数据到屏幕上的时间间隔，默认为10秒。\n\n``` bash\n./build/l2fwd -c f -n 4 -- -q 4 -p ffff\n```\n表示，分配给4个逻辑内核，每个内核分别有4个收发队列，而一共分配了16个端口。\n\n## 详解\n\n### 初始化EAL(Environment Abstraciton Layer)\n``` C\n\tret = rte_eal_init(argc, argv);\n\tif (ret < 0)\n\t\trte_exit(EXIT_FAILURE, \"Invalid EAL arguments\\n\");\n```\n\n### 参数传递\n``` C\n\tret = l2fwd_parse_args(argc, argv);\n\tif (ret < 0)\n\t\trte_exit(EXIT_FAILURE, \"Invalid L2FWD arguments\\n\");\n```\nEAL参数传递已经在rte_eal_init()函数中完成了，这里主要传递“--”后面的参数。\n传递参数之后，得到三个变量。\n- l2fwd_enabled_port_mask：可用端口位掩码\n- l2fwd_rx_queue_per_lcore：每个逻辑内核的收取队列数量\n- timer_period：打印统计数据的时间间隔\n\n### 创建内存池\n``` C\n\tl2fwd_pktmbuf_pool =\n\t\trte_mempool_create(\"mbuf_pool\", NB_MBUF,\n\t\t\t\t   MBUF_SIZE, 32,\n\t\t\t\t   sizeof(struct rte_pktmbuf_pool_private),\n\t\t\t\t   rte_pktmbuf_pool_init, NULL,\n\t\t\t\t   rte_pktmbuf_init, NULL,\n\t\t\t\t   rte_socket_id(), 0);\n\tif (l2fwd_pktmbuf_pool == NULL)\n\t\trte_exit(EXIT_FAILURE, \"Cannot init mbuf pool\\n\");\n```\n- \"mbuf_pool\"：内存池的名称\n- NB_MBUF：内存池中存储mbuf的数量\n- MBUF_SIZE: mbuf的大小\n- 32：内存池缓存的大小\n\n### 端口处理\n``` C\n\t//rte_eth_dev_count()函数返回端口总数\n\tnb_ports = rte_eth_dev_count();\n\tif (nb_ports == 0)\n\t\trte_exit(EXIT_FAILURE, \"No Ethernet ports - bye\\n\");\n\n\tif (nb_ports > RTE_MAX_ETHPORTS)\n\t\tnb_ports = RTE_MAX_ETHPORTS;\n```\n``` C\n\tfor (portid = 0; portid < nb_ports; portid++) {\n\t\t//跳过未分配或者不可用端口\n\t\tif ((l2fwd_enabled_port_mask & (1 << portid)) == 0)\n\t\t\tcontinue;\n\t}\n```\n可用端口位掩码表示，左数第n位如果为1，表示端口n可用，如果左数第n位如果为0，表示端口n不可用。\n要得到第x位为1还是0，我们的方法是将1左移x位，得到一个只在x位为1，其他位都为0的数，再与位掩码相与。结果为1，那么第x位为1，结果位0，那么第x位为0.\n\n### 设置每个端口的目的端口\n这里设置数据包进入端口后，转发给相邻的端口。\n每两个端口为一对，相互转发。\n``` C\n\tfor (portid = 0; portid < nb_ports; portid++) {\n\t\tif ((l2fwd_enabled_port_mask & (1 << portid)) == 0)\n\t\t\tcontinue;\n\n\t\tif (nb_ports_in_mask % 2) {\n\t\t\tl2fwd_dst_ports[portid] = last_port;\n\t\t\tl2fwd_dst_ports[last_port] = portid;\n\t\t}\n\t\telse\n\t\t\tlast_port = portid;\n\n\t\tnb_ports_in_mask++;\n\n\t\trte_eth_dev_info_get(portid, &dev_info);\n\t}\n\tif (nb_ports_in_mask % 2) {\n\t\tprintf(\"Notice: odd number of ports in portmask.\\n\");\n\t\tl2fwd_dst_ports[last_port] = last_port;\n\t}\n```\n\n### 初始化端口的配置信息\n为每个端口分配到相应的逻辑内核\n每个端口只对应一个逻辑内核\n每个逻辑内核对应l2fwd_rx_queue_per_lcore个端口\n``` C\n\tfor (portid = 0; portid < nb_ports; portid++) {\n\t\tif ((l2fwd_enabled_port_mask & (1 << portid)) == 0)\n\t\t\tcontinue;\n\n\t\t//得到一个收取队列未分配满且可用的逻辑内核\n\t\twhile (rte_lcore_is_enabled(rx_lcore_id) == 0 ||\n\t\t       lcore_queue_conf[rx_lcore_id].n_rx_port ==\n\t\t       l2fwd_rx_queue_per_lcore) {\n\t\t\trx_lcore_id++;\n\t\t\tif (rx_lcore_id >= RTE_MAX_LCORE)\n\t\t\t\trte_exit(EXIT_FAILURE, \"Not enough cores\\n\");\n\t\t}\n\n\t\tif (qconf != &lcore_queue_conf[rx_lcore_id])\n\t\t\t/* Assigned a new logical core in the loop above. */\n\t\t\tqconf = &lcore_queue_conf[rx_lcore_id];\n\n\t\tqconf->rx_port_list[qconf->n_rx_port] = portid;\n\t\tqconf->n_rx_port++;\n\t\tprintf(\"Lcore %u: RX port %u\\n\", rx_lcore_id, (unsigned) portid);\n\t}\n```\n\n### 初始化每个端口\n``` C\n\tfor (portid = 0; portid < nb_ports; portid++) {\n\t\tif ((l2fwd_enabled_port_mask & (1 << portid)) == 0) {\n\t\t\tprintf(\"Skipping disabled port %u\\n\", (unsigned) portid);\n\t\t\tnb_ports_available--;\n\t\t\tcontinue;\n\t\t}\n\n\t\tprintf(\"Initializing port %u... \", (unsigned) portid);\n\t\tfflush(stdout);\n\t\t//初始化端口，第二个参数和第三个参数表示分配收取队列和发送队列的数量\n\t\tret = rte_eth_dev_configure(portid, 1, 1, &port_conf);\n\t\tif (ret < 0)\n\t\t\trte_exit(EXIT_FAILURE, \"Cannot configure device: err=%d, port=%u\\n\",\n\t\t\t\t  ret, (unsigned) portid);\n\n\t\t//得到端口对应的mac地址，存入l2fwd_ports_eth_addr[]数组\n\t\trte_eth_macaddr_get(portid,&l2fwd_ports_eth_addr[portid]);\n\n\t\tfflush(stdout);\n\t\t//初始化一个收取队列，nb_rxd指收取队列的大小，最大能够存储mbuf的数量\n\t\tret = rte_eth_rx_queue_setup(portid, 0, nb_rxd,\n\t\t\t\t\t     rte_eth_dev_socket_id(portid),\n\t\t\t\t\t     NULL,\n\t\t\t\t\t     l2fwd_pktmbuf_pool);\n\t\tif (ret < 0)\n\t\t\trte_exit(EXIT_FAILURE, \"rte_eth_rx_queue_setup:err=%d, port=%u\\n\",\n\t\t\t\t  ret, (unsigned) portid);\n\n\t\tfflush(stdout);\n\t\t//初始化一个发送队列，nb_txd指发送队列的大小，最大能够存储mbuf的数量\n\t\tret = rte_eth_tx_queue_setup(portid, 0, nb_txd,\n\t\t\t\trte_eth_dev_socket_id(portid),\n\t\t\t\tNULL);\n\t\tif (ret < 0)\n\t\t\trte_exit(EXIT_FAILURE, \"rte_eth_tx_queue_setup:err=%d, port=%u\\n\",\n\t\t\t\tret, (unsigned) portid);\n\n\t\t//开始运行该端口\n\t\tret = rte_eth_dev_start(portid);\n\t\tif (ret < 0)\n\t\t\trte_exit(EXIT_FAILURE, \"rte_eth_dev_start:err=%d, port=%u\\n\",\n\t\t\t\t  ret, (unsigned) portid);\n\n\t\tprintf(\"done: \\n\");\n\n\t\trte_eth_promiscuous_enable(portid);\n\n\t\tprintf(\"Port %u, MAC address: %02X:%02X:%02X:%02X:%02X:%02X\\n\\n\",\n\t\t\t\t(unsigned) portid,\n\t\t\t\tl2fwd_ports_eth_addr[portid].addr_bytes[0],\n\t\t\t\tl2fwd_ports_eth_addr[portid].addr_bytes[1],\n\t\t\t\tl2fwd_ports_eth_addr[portid].addr_bytes[2],\n\t\t\t\tl2fwd_ports_eth_addr[portid].addr_bytes[3],\n\t\t\t\tl2fwd_ports_eth_addr[portid].addr_bytes[4],\n\t\t\t\tl2fwd_ports_eth_addr[portid].addr_bytes[5]);\n\n\t\t//初始化端口的统计数据\n\t\tmemset(&port_statistics, 0, sizeof(port_statistics));\n\t}\n```\n\n### 检查每个端口的连接状态\n``` C\n\tcheck_all_ports_link_status(nb_ports, l2fwd_enabled_port_mask);\n```\n\n### 在每个逻辑内核上启动线程，开始转发\n``` C\n\trte_eal_mp_remote_launch(l2fwd_launch_one_lcore, NULL, CALL_MASTER);\n\tRTE_LCORE_FOREACH_SLAVE(lcore_id) {\n\t\tif (rte_eal_wait_lcore(lcore_id) < 0)\n\t\t\treturn -1;\n\t}\n```\n\n收包\n``` C\n\tfor (i = 0; i < qconf->n_rx_port; i++) {\n\n\t\tportid = qconf->rx_port_list[i];\n\t\t//收包，一次最多收取MAX_PKT_BURST个数据包\n\t\tnb_rx = rte_eth_rx_burst((uint8_t) portid, 0,\n\t\t\t\t\t pkts_burst, MAX_PKT_BURST);\n\t\t\n\t\t//更新统计数据\n\t\tport_statistics[portid].rx += nb_rx;\n\n\t\tfor (j = 0; j < nb_rx; j++) {\n\t\t\tm = pkts_burst[j];\n\t\t\trte_prefetch0(rte_pktmbuf_mtod(m, void *));\n\t\t\t//转发\n\t\t\tl2fwd_simple_forward(m, portid);\n\t\t}\n\t}\n```\n\n转发\n替换源MAC地址和目的MAC地址\n``` C\n\tstatic void\n\tl2fwd_simple_forward(struct rte_mbuf *m, unsigned portid)\n\t{\n\t\tstruct ether_hdr *eth;\n\t\tvoid *tmp;\n\t\tunsigned dst_port;\n\n\t\tdst_port = l2fwd_dst_ports[portid];\n\t\teth = rte_pktmbuf_mtod(m, struct ether_hdr *);\n\n\t\t//目的地址\n\t\t/* 02:00:00:00:00:xx */\n\t\ttmp = &eth->d_addr.addr_bytes[0];\n\t\t*((uint64_t *)tmp) = 0x000000000002 + ((uint64_t)dst_port << 40);\n\n\t\t//源地址\n\t\tether_addr_copy(&l2fwd_ports_eth_addr[dst_port], &eth->s_addr);\n\n\t\tl2fwd_send_packet(m, (uint8_t) dst_port);\n\t}\n```\n\n将数据包推送至发送队列，如果发送队列存够MAX_PKT_BURST，即每次最大收取包的数量，就会发包\n``` C\n\tstatic int\n\tl2fwd_send_packet(struct rte_mbuf *m, uint8_t port)\n\t{\n\t\tunsigned lcore_id, len;\n\t\tstruct lcore_queue_conf *qconf;\n\n\t\tlcore_id = rte_lcore_id();\n\n\t\tqconf = &lcore_queue_conf[lcore_id];\n\t\tlen = qconf->tx_mbufs[port].len;\n\t\tqconf->tx_mbufs[port].m_table[len] = m;\n\t\tlen++;\n\n\t\t//当发包队列存够MAX_PKT_BURST，发包\n\t\tif (unlikely(len == MAX_PKT_BURST)) {\n\t\t\tl2fwd_send_burst(qconf, MAX_PKT_BURST, port);\n\t\t\tlen = 0;\n\t\t}\n\n\t\tqconf->tx_mbufs[port].len = len;\n\t\treturn 0;\n\t}\n```\n\n每隔一定时间也会发包\n``` C\n\t//上次收包时间和这次收包时间差\n\tdiff_tsc = cur_tsc - prev_tsc;\n\t//如果时间差大于我们设定的阈值，这里是100us\n\tif (unlikely(diff_tsc > drain_tsc)) {\n\n\t\tfor (portid = 0; portid < RTE_MAX_ETHPORTS; portid++) {\t\t\t\n\t\t\tif (qconf->tx_mbufs[portid].len == 0)\n\t\t\t\tcontinue;\n\t\t\t//发包\n\t\t\tl2fwd_send_burst(&lcore_queue_conf[lcore_id],\n\t\t\t\t\t qconf->tx_mbufs[portid].len,\n\t\t\t\t\t (uint8_t) portid);\n\t\t\t\t\tqconf->tx_mbufs[portid].len = 0;\n\t\t}\n\t\t\n\t\tif (timer_period > 0) {\n\t\t\t\t\n\t\t\ttimer_tsc += diff_tsc;\n\n\t\t\t//如果累积时间超过我们设定的阈值，就打印出统计数据，默认是10s\n\t\t\tif (unlikely(timer_tsc >= (uint64_t) timer_period)) {\n\n\t\t\t\t//打印数据在发生在主逻辑内核上\n\t\t\t\tif (lcore_id == rte_get_master_lcore()) {\n\t\t\t\t\t//打印统计数据\n\t\t\t\t\tprint_stats();\n\t\t\t\t\t//累积时间置零\n\t\t\t\t\ttimer_tsc = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tprev_tsc = cur_tsc;\n\t}\n```\n这两种情况都会产生发包，无论是发送队列存够阈值MAX_PKT_BURST，或者，时间差超过阈值brain_tsc，都会把发送队列上MAX_PKT_BURST个数据包推送出去，如果不足MAX_PKT_BURST，则把发送队列上全部数据包推送出去。\n\n发包函数\n``` C\n\tstatic int\n\tl2fwd_send_burst(struct lcore_queue_conf *qconf, unsigned n, uint8_t port)\n\t{\n\t\tstruct rte_mbuf **m_table;\n\t\tunsigned ret;\n\t\tunsigned queueid =0;\n\n\t\tm_table = (struct rte_mbuf **)qconf->tx_mbufs[port].m_table;\n\t\t//发包\n\t\tret = rte_eth_tx_burst(port, (uint16_t) queueid, m_table, (uint16_t) n);\n\t\t//更新统计数据\n\t\tport_statistics[port].tx += ret;\n\t\t//丢包\n\t\tif (unlikely(ret < n)) {\n\t\t\t//更新统计数据\n\t\t\tport_statistics[port].dropped += (n - ret);\n\t\t\tdo {\n\t\t\t\t//把丢包部分free掉\n\t\t\t\trte_pktmbuf_free(m_table[ret]);\n\t\t\t} while (++ret < n);\n\t\t}\n\n\t\treturn 0;\n\t}\n```\n在函数rte_eth_tx_burst()中：\n- port：端口号。\n- queueid：端口中的发送队列号。本例中每个端口都只有一个发送队列，所以固定为0。\n- m_table：**rte_mbuf数据\n- n：发送包的数量\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","source":"_posts/dpdk_l2fwd.md","raw":"title: DPDK-l2fwd详解\ndate: 2015-03-31 13:59:13\ntags: \n- dpdk\ncategories: dpdk\ntoc: true\n---\n\nL2 forwarding sample application在DPDK（Data Plane Development Kit）的基础上实现了第二层（链路层）的数据包转发。\n\n<!--more-->\n**Title: [dpdk-l2fwd详解](http://aidaizyy.github.io/dpdk_l2fwd)**\n**Author: [Yunyao Zhang（张云尧）](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-04-15](http://aidaizyy.github.io)**\n\n## 概要\n\n版本：DPDK-1.8.0\n\n本例中实现了相邻端口之间的相互转发。\n比如一共4个端口可用，那么端口1收到数据后会转发给端口2，端口2收到数据后会转发给端口1，端口3和端口4也会相互转发。\n\n## 编译\n\n设置环境变量\n``` bash\nexport RTE_SDK=/(RTE_SDK) #DPDK的路径\nexport RTE_TARGET=x86_64-native-linuxapp-gcc #DPDK的编译目标\n```\n\n进入示例目录\n``` bash\ncd /(RTE_SDK)/example/l2wfd\n```\n\n编译\n``` bash\nmake\n```\n\n## 运行\n\n``` bash\n./build/l2wfd [EAL options] -- -p PORTMASK [-q NQ -T t]\n```\n\n- EAL options\n\t- DPDK EAL的默认参数，必须参数为-c COREMASK -n NUM。\n\t- COREMASK：一个十六进制位掩码表示分配的逻辑内核数量。\n\t- NUM：一个十进制整数表示内存通道数量。\n\n- -p PORTMASK\n\tPORTMASK：一个十六进制位掩码表示分配的端口数量。\n\n- -q NQ\n\tNQ：表示分配给每个逻辑内核的收发队列数量。\n\n- -T t\n\tt: 表示打印统计数据到屏幕上的时间间隔，默认为10秒。\n\n``` bash\n./build/l2fwd -c f -n 4 -- -q 4 -p ffff\n```\n表示，分配给4个逻辑内核，每个内核分别有4个收发队列，而一共分配了16个端口。\n\n## 详解\n\n### 初始化EAL(Environment Abstraciton Layer)\n``` C\n\tret = rte_eal_init(argc, argv);\n\tif (ret < 0)\n\t\trte_exit(EXIT_FAILURE, \"Invalid EAL arguments\\n\");\n```\n\n### 参数传递\n``` C\n\tret = l2fwd_parse_args(argc, argv);\n\tif (ret < 0)\n\t\trte_exit(EXIT_FAILURE, \"Invalid L2FWD arguments\\n\");\n```\nEAL参数传递已经在rte_eal_init()函数中完成了，这里主要传递“--”后面的参数。\n传递参数之后，得到三个变量。\n- l2fwd_enabled_port_mask：可用端口位掩码\n- l2fwd_rx_queue_per_lcore：每个逻辑内核的收取队列数量\n- timer_period：打印统计数据的时间间隔\n\n### 创建内存池\n``` C\n\tl2fwd_pktmbuf_pool =\n\t\trte_mempool_create(\"mbuf_pool\", NB_MBUF,\n\t\t\t\t   MBUF_SIZE, 32,\n\t\t\t\t   sizeof(struct rte_pktmbuf_pool_private),\n\t\t\t\t   rte_pktmbuf_pool_init, NULL,\n\t\t\t\t   rte_pktmbuf_init, NULL,\n\t\t\t\t   rte_socket_id(), 0);\n\tif (l2fwd_pktmbuf_pool == NULL)\n\t\trte_exit(EXIT_FAILURE, \"Cannot init mbuf pool\\n\");\n```\n- \"mbuf_pool\"：内存池的名称\n- NB_MBUF：内存池中存储mbuf的数量\n- MBUF_SIZE: mbuf的大小\n- 32：内存池缓存的大小\n\n### 端口处理\n``` C\n\t//rte_eth_dev_count()函数返回端口总数\n\tnb_ports = rte_eth_dev_count();\n\tif (nb_ports == 0)\n\t\trte_exit(EXIT_FAILURE, \"No Ethernet ports - bye\\n\");\n\n\tif (nb_ports > RTE_MAX_ETHPORTS)\n\t\tnb_ports = RTE_MAX_ETHPORTS;\n```\n``` C\n\tfor (portid = 0; portid < nb_ports; portid++) {\n\t\t//跳过未分配或者不可用端口\n\t\tif ((l2fwd_enabled_port_mask & (1 << portid)) == 0)\n\t\t\tcontinue;\n\t}\n```\n可用端口位掩码表示，左数第n位如果为1，表示端口n可用，如果左数第n位如果为0，表示端口n不可用。\n要得到第x位为1还是0，我们的方法是将1左移x位，得到一个只在x位为1，其他位都为0的数，再与位掩码相与。结果为1，那么第x位为1，结果位0，那么第x位为0.\n\n### 设置每个端口的目的端口\n这里设置数据包进入端口后，转发给相邻的端口。\n每两个端口为一对，相互转发。\n``` C\n\tfor (portid = 0; portid < nb_ports; portid++) {\n\t\tif ((l2fwd_enabled_port_mask & (1 << portid)) == 0)\n\t\t\tcontinue;\n\n\t\tif (nb_ports_in_mask % 2) {\n\t\t\tl2fwd_dst_ports[portid] = last_port;\n\t\t\tl2fwd_dst_ports[last_port] = portid;\n\t\t}\n\t\telse\n\t\t\tlast_port = portid;\n\n\t\tnb_ports_in_mask++;\n\n\t\trte_eth_dev_info_get(portid, &dev_info);\n\t}\n\tif (nb_ports_in_mask % 2) {\n\t\tprintf(\"Notice: odd number of ports in portmask.\\n\");\n\t\tl2fwd_dst_ports[last_port] = last_port;\n\t}\n```\n\n### 初始化端口的配置信息\n为每个端口分配到相应的逻辑内核\n每个端口只对应一个逻辑内核\n每个逻辑内核对应l2fwd_rx_queue_per_lcore个端口\n``` C\n\tfor (portid = 0; portid < nb_ports; portid++) {\n\t\tif ((l2fwd_enabled_port_mask & (1 << portid)) == 0)\n\t\t\tcontinue;\n\n\t\t//得到一个收取队列未分配满且可用的逻辑内核\n\t\twhile (rte_lcore_is_enabled(rx_lcore_id) == 0 ||\n\t\t       lcore_queue_conf[rx_lcore_id].n_rx_port ==\n\t\t       l2fwd_rx_queue_per_lcore) {\n\t\t\trx_lcore_id++;\n\t\t\tif (rx_lcore_id >= RTE_MAX_LCORE)\n\t\t\t\trte_exit(EXIT_FAILURE, \"Not enough cores\\n\");\n\t\t}\n\n\t\tif (qconf != &lcore_queue_conf[rx_lcore_id])\n\t\t\t/* Assigned a new logical core in the loop above. */\n\t\t\tqconf = &lcore_queue_conf[rx_lcore_id];\n\n\t\tqconf->rx_port_list[qconf->n_rx_port] = portid;\n\t\tqconf->n_rx_port++;\n\t\tprintf(\"Lcore %u: RX port %u\\n\", rx_lcore_id, (unsigned) portid);\n\t}\n```\n\n### 初始化每个端口\n``` C\n\tfor (portid = 0; portid < nb_ports; portid++) {\n\t\tif ((l2fwd_enabled_port_mask & (1 << portid)) == 0) {\n\t\t\tprintf(\"Skipping disabled port %u\\n\", (unsigned) portid);\n\t\t\tnb_ports_available--;\n\t\t\tcontinue;\n\t\t}\n\n\t\tprintf(\"Initializing port %u... \", (unsigned) portid);\n\t\tfflush(stdout);\n\t\t//初始化端口，第二个参数和第三个参数表示分配收取队列和发送队列的数量\n\t\tret = rte_eth_dev_configure(portid, 1, 1, &port_conf);\n\t\tif (ret < 0)\n\t\t\trte_exit(EXIT_FAILURE, \"Cannot configure device: err=%d, port=%u\\n\",\n\t\t\t\t  ret, (unsigned) portid);\n\n\t\t//得到端口对应的mac地址，存入l2fwd_ports_eth_addr[]数组\n\t\trte_eth_macaddr_get(portid,&l2fwd_ports_eth_addr[portid]);\n\n\t\tfflush(stdout);\n\t\t//初始化一个收取队列，nb_rxd指收取队列的大小，最大能够存储mbuf的数量\n\t\tret = rte_eth_rx_queue_setup(portid, 0, nb_rxd,\n\t\t\t\t\t     rte_eth_dev_socket_id(portid),\n\t\t\t\t\t     NULL,\n\t\t\t\t\t     l2fwd_pktmbuf_pool);\n\t\tif (ret < 0)\n\t\t\trte_exit(EXIT_FAILURE, \"rte_eth_rx_queue_setup:err=%d, port=%u\\n\",\n\t\t\t\t  ret, (unsigned) portid);\n\n\t\tfflush(stdout);\n\t\t//初始化一个发送队列，nb_txd指发送队列的大小，最大能够存储mbuf的数量\n\t\tret = rte_eth_tx_queue_setup(portid, 0, nb_txd,\n\t\t\t\trte_eth_dev_socket_id(portid),\n\t\t\t\tNULL);\n\t\tif (ret < 0)\n\t\t\trte_exit(EXIT_FAILURE, \"rte_eth_tx_queue_setup:err=%d, port=%u\\n\",\n\t\t\t\tret, (unsigned) portid);\n\n\t\t//开始运行该端口\n\t\tret = rte_eth_dev_start(portid);\n\t\tif (ret < 0)\n\t\t\trte_exit(EXIT_FAILURE, \"rte_eth_dev_start:err=%d, port=%u\\n\",\n\t\t\t\t  ret, (unsigned) portid);\n\n\t\tprintf(\"done: \\n\");\n\n\t\trte_eth_promiscuous_enable(portid);\n\n\t\tprintf(\"Port %u, MAC address: %02X:%02X:%02X:%02X:%02X:%02X\\n\\n\",\n\t\t\t\t(unsigned) portid,\n\t\t\t\tl2fwd_ports_eth_addr[portid].addr_bytes[0],\n\t\t\t\tl2fwd_ports_eth_addr[portid].addr_bytes[1],\n\t\t\t\tl2fwd_ports_eth_addr[portid].addr_bytes[2],\n\t\t\t\tl2fwd_ports_eth_addr[portid].addr_bytes[3],\n\t\t\t\tl2fwd_ports_eth_addr[portid].addr_bytes[4],\n\t\t\t\tl2fwd_ports_eth_addr[portid].addr_bytes[5]);\n\n\t\t//初始化端口的统计数据\n\t\tmemset(&port_statistics, 0, sizeof(port_statistics));\n\t}\n```\n\n### 检查每个端口的连接状态\n``` C\n\tcheck_all_ports_link_status(nb_ports, l2fwd_enabled_port_mask);\n```\n\n### 在每个逻辑内核上启动线程，开始转发\n``` C\n\trte_eal_mp_remote_launch(l2fwd_launch_one_lcore, NULL, CALL_MASTER);\n\tRTE_LCORE_FOREACH_SLAVE(lcore_id) {\n\t\tif (rte_eal_wait_lcore(lcore_id) < 0)\n\t\t\treturn -1;\n\t}\n```\n\n收包\n``` C\n\tfor (i = 0; i < qconf->n_rx_port; i++) {\n\n\t\tportid = qconf->rx_port_list[i];\n\t\t//收包，一次最多收取MAX_PKT_BURST个数据包\n\t\tnb_rx = rte_eth_rx_burst((uint8_t) portid, 0,\n\t\t\t\t\t pkts_burst, MAX_PKT_BURST);\n\t\t\n\t\t//更新统计数据\n\t\tport_statistics[portid].rx += nb_rx;\n\n\t\tfor (j = 0; j < nb_rx; j++) {\n\t\t\tm = pkts_burst[j];\n\t\t\trte_prefetch0(rte_pktmbuf_mtod(m, void *));\n\t\t\t//转发\n\t\t\tl2fwd_simple_forward(m, portid);\n\t\t}\n\t}\n```\n\n转发\n替换源MAC地址和目的MAC地址\n``` C\n\tstatic void\n\tl2fwd_simple_forward(struct rte_mbuf *m, unsigned portid)\n\t{\n\t\tstruct ether_hdr *eth;\n\t\tvoid *tmp;\n\t\tunsigned dst_port;\n\n\t\tdst_port = l2fwd_dst_ports[portid];\n\t\teth = rte_pktmbuf_mtod(m, struct ether_hdr *);\n\n\t\t//目的地址\n\t\t/* 02:00:00:00:00:xx */\n\t\ttmp = &eth->d_addr.addr_bytes[0];\n\t\t*((uint64_t *)tmp) = 0x000000000002 + ((uint64_t)dst_port << 40);\n\n\t\t//源地址\n\t\tether_addr_copy(&l2fwd_ports_eth_addr[dst_port], &eth->s_addr);\n\n\t\tl2fwd_send_packet(m, (uint8_t) dst_port);\n\t}\n```\n\n将数据包推送至发送队列，如果发送队列存够MAX_PKT_BURST，即每次最大收取包的数量，就会发包\n``` C\n\tstatic int\n\tl2fwd_send_packet(struct rte_mbuf *m, uint8_t port)\n\t{\n\t\tunsigned lcore_id, len;\n\t\tstruct lcore_queue_conf *qconf;\n\n\t\tlcore_id = rte_lcore_id();\n\n\t\tqconf = &lcore_queue_conf[lcore_id];\n\t\tlen = qconf->tx_mbufs[port].len;\n\t\tqconf->tx_mbufs[port].m_table[len] = m;\n\t\tlen++;\n\n\t\t//当发包队列存够MAX_PKT_BURST，发包\n\t\tif (unlikely(len == MAX_PKT_BURST)) {\n\t\t\tl2fwd_send_burst(qconf, MAX_PKT_BURST, port);\n\t\t\tlen = 0;\n\t\t}\n\n\t\tqconf->tx_mbufs[port].len = len;\n\t\treturn 0;\n\t}\n```\n\n每隔一定时间也会发包\n``` C\n\t//上次收包时间和这次收包时间差\n\tdiff_tsc = cur_tsc - prev_tsc;\n\t//如果时间差大于我们设定的阈值，这里是100us\n\tif (unlikely(diff_tsc > drain_tsc)) {\n\n\t\tfor (portid = 0; portid < RTE_MAX_ETHPORTS; portid++) {\t\t\t\n\t\t\tif (qconf->tx_mbufs[portid].len == 0)\n\t\t\t\tcontinue;\n\t\t\t//发包\n\t\t\tl2fwd_send_burst(&lcore_queue_conf[lcore_id],\n\t\t\t\t\t qconf->tx_mbufs[portid].len,\n\t\t\t\t\t (uint8_t) portid);\n\t\t\t\t\tqconf->tx_mbufs[portid].len = 0;\n\t\t}\n\t\t\n\t\tif (timer_period > 0) {\n\t\t\t\t\n\t\t\ttimer_tsc += diff_tsc;\n\n\t\t\t//如果累积时间超过我们设定的阈值，就打印出统计数据，默认是10s\n\t\t\tif (unlikely(timer_tsc >= (uint64_t) timer_period)) {\n\n\t\t\t\t//打印数据在发生在主逻辑内核上\n\t\t\t\tif (lcore_id == rte_get_master_lcore()) {\n\t\t\t\t\t//打印统计数据\n\t\t\t\t\tprint_stats();\n\t\t\t\t\t//累积时间置零\n\t\t\t\t\ttimer_tsc = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tprev_tsc = cur_tsc;\n\t}\n```\n这两种情况都会产生发包，无论是发送队列存够阈值MAX_PKT_BURST，或者，时间差超过阈值brain_tsc，都会把发送队列上MAX_PKT_BURST个数据包推送出去，如果不足MAX_PKT_BURST，则把发送队列上全部数据包推送出去。\n\n发包函数\n``` C\n\tstatic int\n\tl2fwd_send_burst(struct lcore_queue_conf *qconf, unsigned n, uint8_t port)\n\t{\n\t\tstruct rte_mbuf **m_table;\n\t\tunsigned ret;\n\t\tunsigned queueid =0;\n\n\t\tm_table = (struct rte_mbuf **)qconf->tx_mbufs[port].m_table;\n\t\t//发包\n\t\tret = rte_eth_tx_burst(port, (uint16_t) queueid, m_table, (uint16_t) n);\n\t\t//更新统计数据\n\t\tport_statistics[port].tx += ret;\n\t\t//丢包\n\t\tif (unlikely(ret < n)) {\n\t\t\t//更新统计数据\n\t\t\tport_statistics[port].dropped += (n - ret);\n\t\t\tdo {\n\t\t\t\t//把丢包部分free掉\n\t\t\t\trte_pktmbuf_free(m_table[ret]);\n\t\t\t} while (++ret < n);\n\t\t}\n\n\t\treturn 0;\n\t}\n```\n在函数rte_eth_tx_burst()中：\n- port：端口号。\n- queueid：端口中的发送队列号。本例中每个端口都只有一个发送队列，所以固定为0。\n- m_table：**rte_mbuf数据\n- n：发送包的数量\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","slug":"dpdk_l2fwd","published":1,"updated":"2017-05-08T16:40:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2gdu6jd0008v1o3rk6iaj4p","content":"<p>L2 forwarding sample application在DPDK（Data Plane Development Kit）的基础上实现了第二层（链路层）的数据包转发。</p>\n<a id=\"more\"></a>\n<p><strong>Title: <a href=\"http://aidaizyy.github.io/dpdk_l2fwd\" target=\"_blank\" rel=\"external\">dpdk-l2fwd详解</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang（张云尧）</a></strong><br><strong>E-mail: <a href=\"&#109;&#97;&#105;&#108;&#116;&#111;&#x3a;&#x61;&#105;&#100;&#97;&#105;&#x7a;&#x79;&#x79;&#64;&#x67;&#x6d;&#x61;&#105;&#108;&#x2e;&#x63;&#x6f;&#109;\">&#x61;&#105;&#100;&#97;&#105;&#x7a;&#x79;&#x79;&#64;&#x67;&#x6d;&#x61;&#105;&#108;&#x2e;&#x63;&#x6f;&#109;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-04-15</a></strong></p>\n<h2 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h2><p>版本：DPDK-1.8.0</p>\n<p>本例中实现了相邻端口之间的相互转发。<br>比如一共4个端口可用，那么端口1收到数据后会转发给端口2，端口2收到数据后会转发给端口1，端口3和端口4也会相互转发。</p>\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><p>设置环境变量<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> RTE_SDK=/(RTE_SDK) <span class=\"comment\">#DPDK的路径</span></div><div class=\"line\"><span class=\"built_in\">export</span> RTE_TARGET=x86_64-native-linuxapp-gcc <span class=\"comment\">#DPDK的编译目标</span></div></pre></td></tr></table></figure></p>\n<p>进入示例目录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /(RTE_SDK)/example/l2wfd</div></pre></td></tr></table></figure></p>\n<p>编译<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">make</div></pre></td></tr></table></figure></p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./build/l2wfd [EAL options] -- -p PORTMASK [-q NQ -T t]</div></pre></td></tr></table></figure>\n<ul>\n<li><p>EAL options</p>\n<ul>\n<li>DPDK EAL的默认参数，必须参数为-c COREMASK -n NUM。</li>\n<li>COREMASK：一个十六进制位掩码表示分配的逻辑内核数量。</li>\n<li>NUM：一个十进制整数表示内存通道数量。</li>\n</ul>\n</li>\n<li><p>-p PORTMASK<br>  PORTMASK：一个十六进制位掩码表示分配的端口数量。</p>\n</li>\n<li><p>-q NQ<br>  NQ：表示分配给每个逻辑内核的收发队列数量。</p>\n</li>\n<li><p>-T t<br>  t: 表示打印统计数据到屏幕上的时间间隔，默认为10秒。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./build/l2fwd -c f -n 4 -- -q 4 -p ffff</div></pre></td></tr></table></figure>\n<p>表示，分配给4个逻辑内核，每个内核分别有4个收发队列，而一共分配了16个端口。</p>\n<h2 id=\"详解\"><a href=\"#详解\" class=\"headerlink\" title=\"详解\"></a>详解</h2><h3 id=\"初始化EAL-Environment-Abstraciton-Layer\"><a href=\"#初始化EAL-Environment-Abstraciton-Layer\" class=\"headerlink\" title=\"初始化EAL(Environment Abstraciton Layer)\"></a>初始化EAL(Environment Abstraciton Layer)</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ret = rte_eal_init(argc, argv);</div><div class=\"line\"><span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\trte_exit(EXIT_FAILURE, <span class=\"string\">\"Invalid EAL arguments\\n\"</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"参数传递\"><a href=\"#参数传递\" class=\"headerlink\" title=\"参数传递\"></a>参数传递</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ret = l2fwd_parse_args(argc, argv);</div><div class=\"line\"><span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\trte_exit(EXIT_FAILURE, <span class=\"string\">\"Invalid L2FWD arguments\\n\"</span>);</div></pre></td></tr></table></figure>\n<p>EAL参数传递已经在rte_eal_init()函数中完成了，这里主要传递“–”后面的参数。<br>传递参数之后，得到三个变量。</p>\n<ul>\n<li>l2fwd_enabled_port_mask：可用端口位掩码</li>\n<li>l2fwd_rx_queue_per_lcore：每个逻辑内核的收取队列数量</li>\n<li>timer_period：打印统计数据的时间间隔</li>\n</ul>\n<h3 id=\"创建内存池\"><a href=\"#创建内存池\" class=\"headerlink\" title=\"创建内存池\"></a>创建内存池</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">l2fwd_pktmbuf_pool =</div><div class=\"line\">\trte_mempool_create(<span class=\"string\">\"mbuf_pool\"</span>, NB_MBUF,</div><div class=\"line\">\t\t\t   MBUF_SIZE, <span class=\"number\">32</span>,</div><div class=\"line\">\t\t\t   <span class=\"keyword\">sizeof</span>(struct rte_pktmbuf_pool_private),</div><div class=\"line\">\t\t\t   rte_pktmbuf_pool_init, <span class=\"literal\">NULL</span>,</div><div class=\"line\">\t\t\t   rte_pktmbuf_init, <span class=\"literal\">NULL</span>,</div><div class=\"line\">\t\t\t   rte_socket_id(), <span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (l2fwd_pktmbuf_pool == <span class=\"literal\">NULL</span>)</div><div class=\"line\">\trte_exit(EXIT_FAILURE, <span class=\"string\">\"Cannot init mbuf pool\\n\"</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>“mbuf_pool”：内存池的名称</li>\n<li>NB_MBUF：内存池中存储mbuf的数量</li>\n<li>MBUF_SIZE: mbuf的大小</li>\n<li>32：内存池缓存的大小</li>\n</ul>\n<h3 id=\"端口处理\"><a href=\"#端口处理\" class=\"headerlink\" title=\"端口处理\"></a>端口处理</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//rte_eth_dev_count()函数返回端口总数</span></div><div class=\"line\">nb_ports = rte_eth_dev_count();</div><div class=\"line\"><span class=\"keyword\">if</span> (nb_ports == <span class=\"number\">0</span>)</div><div class=\"line\">\trte_exit(EXIT_FAILURE, <span class=\"string\">\"No Ethernet ports - bye\\n\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (nb_ports &gt; RTE_MAX_ETHPORTS)</div><div class=\"line\">\tnb_ports = RTE_MAX_ETHPORTS;</div></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (portid = <span class=\"number\">0</span>; portid &lt; nb_ports; portid++) &#123;</div><div class=\"line\">\t<span class=\"comment\">//跳过未分配或者不可用端口</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((l2fwd_enabled_port_mask &amp; (<span class=\"number\">1</span> &lt;&lt; portid)) == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可用端口位掩码表示，左数第n位如果为1，表示端口n可用，如果左数第n位如果为0，表示端口n不可用。<br>要得到第x位为1还是0，我们的方法是将1左移x位，得到一个只在x位为1，其他位都为0的数，再与位掩码相与。结果为1，那么第x位为1，结果位0，那么第x位为0.</p>\n<h3 id=\"设置每个端口的目的端口\"><a href=\"#设置每个端口的目的端口\" class=\"headerlink\" title=\"设置每个端口的目的端口\"></a>设置每个端口的目的端口</h3><p>这里设置数据包进入端口后，转发给相邻的端口。<br>每两个端口为一对，相互转发。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (portid = <span class=\"number\">0</span>; portid &lt; nb_ports; portid++) &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((l2fwd_enabled_port_mask &amp; (<span class=\"number\">1</span> &lt;&lt; portid)) == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (nb_ports_in_mask % <span class=\"number\">2</span>) &#123;</div><div class=\"line\">\t\tl2fwd_dst_ports[portid] = last_port;</div><div class=\"line\">\t\tl2fwd_dst_ports[last_port] = portid;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\tlast_port = portid;</div><div class=\"line\"></div><div class=\"line\">\tnb_ports_in_mask++;</div><div class=\"line\"></div><div class=\"line\">\trte_eth_dev_info_get(portid, &amp;dev_info);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (nb_ports_in_mask % <span class=\"number\">2</span>) &#123;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Notice: odd number of ports in portmask.\\n\"</span>);</div><div class=\"line\">\tl2fwd_dst_ports[last_port] = last_port;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"初始化端口的配置信息\"><a href=\"#初始化端口的配置信息\" class=\"headerlink\" title=\"初始化端口的配置信息\"></a>初始化端口的配置信息</h3><p>为每个端口分配到相应的逻辑内核<br>每个端口只对应一个逻辑内核<br>每个逻辑内核对应l2fwd_rx_queue_per_lcore个端口<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (portid = <span class=\"number\">0</span>; portid &lt; nb_ports; portid++) &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((l2fwd_enabled_port_mask &amp; (<span class=\"number\">1</span> &lt;&lt; portid)) == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//得到一个收取队列未分配满且可用的逻辑内核</span></div><div class=\"line\">\t<span class=\"keyword\">while</span> (rte_lcore_is_enabled(rx_lcore_id) == <span class=\"number\">0</span> ||</div><div class=\"line\">\t       lcore_queue_conf[rx_lcore_id].n_rx_port ==</div><div class=\"line\">\t       l2fwd_rx_queue_per_lcore) &#123;</div><div class=\"line\">\t\trx_lcore_id++;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (rx_lcore_id &gt;= RTE_MAX_LCORE)</div><div class=\"line\">\t\t\trte_exit(EXIT_FAILURE, <span class=\"string\">\"Not enough cores\\n\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (qconf != &amp;lcore_queue_conf[rx_lcore_id])</div><div class=\"line\">\t\t<span class=\"comment\">/* Assigned a new logical core in the loop above. */</span></div><div class=\"line\">\t\tqconf = &amp;lcore_queue_conf[rx_lcore_id];</div><div class=\"line\"></div><div class=\"line\">\tqconf-&gt;rx_port_list[qconf-&gt;n_rx_port] = portid;</div><div class=\"line\">\tqconf-&gt;n_rx_port++;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Lcore %u: RX port %u\\n\"</span>, rx_lcore_id, (<span class=\"keyword\">unsigned</span>) portid);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"初始化每个端口\"><a href=\"#初始化每个端口\" class=\"headerlink\" title=\"初始化每个端口\"></a>初始化每个端口</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (portid = <span class=\"number\">0</span>; portid &lt; nb_ports; portid++) &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((l2fwd_enabled_port_mask &amp; (<span class=\"number\">1</span> &lt;&lt; portid)) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Skipping disabled port %u\\n\"</span>, (<span class=\"keyword\">unsigned</span>) portid);</div><div class=\"line\">\t\tnb_ports_available--;</div><div class=\"line\">\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Initializing port %u... \"</span>, (<span class=\"keyword\">unsigned</span>) portid);</div><div class=\"line\">\tfflush(<span class=\"built_in\">stdout</span>);</div><div class=\"line\">\t<span class=\"comment\">//初始化端口，第二个参数和第三个参数表示分配收取队列和发送队列的数量</span></div><div class=\"line\">\tret = rte_eth_dev_configure(portid, <span class=\"number\">1</span>, <span class=\"number\">1</span>, &amp;port_conf);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\trte_exit(EXIT_FAILURE, <span class=\"string\">\"Cannot configure device: err=%d, port=%u\\n\"</span>,</div><div class=\"line\">\t\t\t  ret, (<span class=\"keyword\">unsigned</span>) portid);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//得到端口对应的mac地址，存入l2fwd_ports_eth_addr[]数组</span></div><div class=\"line\">\trte_eth_macaddr_get(portid,&amp;l2fwd_ports_eth_addr[portid]);</div><div class=\"line\"></div><div class=\"line\">\tfflush(<span class=\"built_in\">stdout</span>);</div><div class=\"line\">\t<span class=\"comment\">//初始化一个收取队列，nb_rxd指收取队列的大小，最大能够存储mbuf的数量</span></div><div class=\"line\">\tret = rte_eth_rx_queue_setup(portid, <span class=\"number\">0</span>, nb_rxd,</div><div class=\"line\">\t\t\t\t     rte_eth_dev_socket_id(portid),</div><div class=\"line\">\t\t\t\t     <span class=\"literal\">NULL</span>,</div><div class=\"line\">\t\t\t\t     l2fwd_pktmbuf_pool);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\trte_exit(EXIT_FAILURE, <span class=\"string\">\"rte_eth_rx_queue_setup:err=%d, port=%u\\n\"</span>,</div><div class=\"line\">\t\t\t  ret, (<span class=\"keyword\">unsigned</span>) portid);</div><div class=\"line\"></div><div class=\"line\">\tfflush(<span class=\"built_in\">stdout</span>);</div><div class=\"line\">\t<span class=\"comment\">//初始化一个发送队列，nb_txd指发送队列的大小，最大能够存储mbuf的数量</span></div><div class=\"line\">\tret = rte_eth_tx_queue_setup(portid, <span class=\"number\">0</span>, nb_txd,</div><div class=\"line\">\t\t\trte_eth_dev_socket_id(portid),</div><div class=\"line\">\t\t\t<span class=\"literal\">NULL</span>);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\trte_exit(EXIT_FAILURE, <span class=\"string\">\"rte_eth_tx_queue_setup:err=%d, port=%u\\n\"</span>,</div><div class=\"line\">\t\t\tret, (<span class=\"keyword\">unsigned</span>) portid);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//开始运行该端口</span></div><div class=\"line\">\tret = rte_eth_dev_start(portid);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\trte_exit(EXIT_FAILURE, <span class=\"string\">\"rte_eth_dev_start:err=%d, port=%u\\n\"</span>,</div><div class=\"line\">\t\t\t  ret, (<span class=\"keyword\">unsigned</span>) portid);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"done: \\n\"</span>);</div><div class=\"line\"></div><div class=\"line\">\trte_eth_promiscuous_enable(portid);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Port %u, MAC address: %02X:%02X:%02X:%02X:%02X:%02X\\n\\n\"</span>,</div><div class=\"line\">\t\t\t(<span class=\"keyword\">unsigned</span>) portid,</div><div class=\"line\">\t\t\tl2fwd_ports_eth_addr[portid].addr_bytes[<span class=\"number\">0</span>],</div><div class=\"line\">\t\t\tl2fwd_ports_eth_addr[portid].addr_bytes[<span class=\"number\">1</span>],</div><div class=\"line\">\t\t\tl2fwd_ports_eth_addr[portid].addr_bytes[<span class=\"number\">2</span>],</div><div class=\"line\">\t\t\tl2fwd_ports_eth_addr[portid].addr_bytes[<span class=\"number\">3</span>],</div><div class=\"line\">\t\t\tl2fwd_ports_eth_addr[portid].addr_bytes[<span class=\"number\">4</span>],</div><div class=\"line\">\t\t\tl2fwd_ports_eth_addr[portid].addr_bytes[<span class=\"number\">5</span>]);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//初始化端口的统计数据</span></div><div class=\"line\">\t<span class=\"built_in\">memset</span>(&amp;port_statistics, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(port_statistics));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"检查每个端口的连接状态\"><a href=\"#检查每个端口的连接状态\" class=\"headerlink\" title=\"检查每个端口的连接状态\"></a>检查每个端口的连接状态</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">check_all_ports_link_status(nb_ports, l2fwd_enabled_port_mask);</div></pre></td></tr></table></figure>\n<h3 id=\"在每个逻辑内核上启动线程，开始转发\"><a href=\"#在每个逻辑内核上启动线程，开始转发\" class=\"headerlink\" title=\"在每个逻辑内核上启动线程，开始转发\"></a>在每个逻辑内核上启动线程，开始转发</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">rte_eal_mp_remote_launch(l2fwd_launch_one_lcore, <span class=\"literal\">NULL</span>, CALL_MASTER);</div><div class=\"line\">RTE_LCORE_FOREACH_SLAVE(lcore_id) &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (rte_eal_wait_lcore(lcore_id) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>收包<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; qconf-&gt;n_rx_port; i++) &#123;</div><div class=\"line\"></div><div class=\"line\">\tportid = qconf-&gt;rx_port_list[i];</div><div class=\"line\">\t<span class=\"comment\">//收包，一次最多收取MAX_PKT_BURST个数据包</span></div><div class=\"line\">\tnb_rx = rte_eth_rx_burst((<span class=\"keyword\">uint8_t</span>) portid, <span class=\"number\">0</span>,</div><div class=\"line\">\t\t\t\t pkts_burst, MAX_PKT_BURST);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//更新统计数据</span></div><div class=\"line\">\tport_statistics[portid].rx += nb_rx;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; nb_rx; j++) &#123;</div><div class=\"line\">\t\tm = pkts_burst[j];</div><div class=\"line\">\t\trte_prefetch0(rte_pktmbuf_mtod(m, <span class=\"keyword\">void</span> *));</div><div class=\"line\">\t\t<span class=\"comment\">//转发</span></div><div class=\"line\">\t\tl2fwd_simple_forward(m, portid);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>转发<br>替换源MAC地址和目的MAC地址<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span></span></div><div class=\"line\"><span class=\"title\">l2fwd_simple_forward</span><span class=\"params\">(struct rte_mbuf *m, <span class=\"keyword\">unsigned</span> portid)</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ether_hdr</span> *<span class=\"title\">eth</span>;</span></div><div class=\"line\">\t<span class=\"keyword\">void</span> *tmp;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> dst_port;</div><div class=\"line\"></div><div class=\"line\">\tdst_port = l2fwd_dst_ports[portid];</div><div class=\"line\">\teth = rte_pktmbuf_mtod(m, struct ether_hdr *);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//目的地址</span></div><div class=\"line\">\t<span class=\"comment\">/* 02:00:00:00:00:xx */</span></div><div class=\"line\">\ttmp = &amp;eth-&gt;d_addr.addr_bytes[<span class=\"number\">0</span>];</div><div class=\"line\">\t*((<span class=\"keyword\">uint64_t</span> *)tmp) = <span class=\"number\">0x000000000002</span> + ((<span class=\"keyword\">uint64_t</span>)dst_port &lt;&lt; <span class=\"number\">40</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//源地址</span></div><div class=\"line\">\tether_addr_copy(&amp;l2fwd_ports_eth_addr[dst_port], &amp;eth-&gt;s_addr);</div><div class=\"line\"></div><div class=\"line\">\tl2fwd_send_packet(m, (<span class=\"keyword\">uint8_t</span>) dst_port);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>将数据包推送至发送队列，如果发送队列存够MAX_PKT_BURST，即每次最大收取包的数量，就会发包<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span></span></div><div class=\"line\"><span class=\"title\">l2fwd_send_packet</span><span class=\"params\">(struct rte_mbuf *m, <span class=\"keyword\">uint8_t</span> port)</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> lcore_id, len;</div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">lcore_queue_conf</span> *<span class=\"title\">qconf</span>;</span></div><div class=\"line\"></div><div class=\"line\">\tlcore_id = rte_lcore_id();</div><div class=\"line\"></div><div class=\"line\">\tqconf = &amp;lcore_queue_conf[lcore_id];</div><div class=\"line\">\tlen = qconf-&gt;tx_mbufs[port].len;</div><div class=\"line\">\tqconf-&gt;tx_mbufs[port].m_table[len] = m;</div><div class=\"line\">\tlen++;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//当发包队列存够MAX_PKT_BURST，发包</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (unlikely(len == MAX_PKT_BURST)) &#123;</div><div class=\"line\">\t\tl2fwd_send_burst(qconf, MAX_PKT_BURST, port);</div><div class=\"line\">\t\tlen = <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tqconf-&gt;tx_mbufs[port].len = len;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>每隔一定时间也会发包<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//上次收包时间和这次收包时间差</span></div><div class=\"line\">diff_tsc = cur_tsc - prev_tsc;</div><div class=\"line\"><span class=\"comment\">//如果时间差大于我们设定的阈值，这里是100us</span></div><div class=\"line\"><span class=\"keyword\">if</span> (unlikely(diff_tsc &gt; drain_tsc)) &#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> (portid = <span class=\"number\">0</span>; portid &lt; RTE_MAX_ETHPORTS; portid++) &#123;\t\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (qconf-&gt;tx_mbufs[portid].len == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t<span class=\"comment\">//发包</span></div><div class=\"line\">\t\tl2fwd_send_burst(&amp;lcore_queue_conf[lcore_id],</div><div class=\"line\">\t\t\t\t qconf-&gt;tx_mbufs[portid].len,</div><div class=\"line\">\t\t\t\t (<span class=\"keyword\">uint8_t</span>) portid);</div><div class=\"line\">\t\t\t\tqconf-&gt;tx_mbufs[portid].len = <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (timer_period &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\ttimer_tsc += diff_tsc;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">//如果累积时间超过我们设定的阈值，就打印出统计数据，默认是10s</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (unlikely(timer_tsc &gt;= (<span class=\"keyword\">uint64_t</span>) timer_period)) &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">//打印数据在发生在主逻辑内核上</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (lcore_id == rte_get_master_lcore()) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//打印统计数据</span></div><div class=\"line\">\t\t\t\tprint_stats();</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//累积时间置零</span></div><div class=\"line\">\t\t\t\ttimer_tsc = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tprev_tsc = cur_tsc;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这两种情况都会产生发包，无论是发送队列存够阈值MAX_PKT_BURST，或者，时间差超过阈值brain_tsc，都会把发送队列上MAX_PKT_BURST个数据包推送出去，如果不足MAX_PKT_BURST，则把发送队列上全部数据包推送出去。</p>\n<p>发包函数<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span></span></div><div class=\"line\"><span class=\"title\">l2fwd_send_burst</span><span class=\"params\">(struct lcore_queue_conf *qconf, <span class=\"keyword\">unsigned</span> n, <span class=\"keyword\">uint8_t</span> port)</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">rte_mbuf</span> **<span class=\"title\">m_table</span>;</span></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> ret;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> queueid =<span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">\tm_table = (struct rte_mbuf **)qconf-&gt;tx_mbufs[port].m_table;</div><div class=\"line\">\t<span class=\"comment\">//发包</span></div><div class=\"line\">\tret = rte_eth_tx_burst(port, (<span class=\"keyword\">uint16_t</span>) queueid, m_table, (<span class=\"keyword\">uint16_t</span>) n);</div><div class=\"line\">\t<span class=\"comment\">//更新统计数据</span></div><div class=\"line\">\tport_statistics[port].tx += ret;</div><div class=\"line\">\t<span class=\"comment\">//丢包</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (unlikely(ret &lt; n)) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">//更新统计数据</span></div><div class=\"line\">\t\tport_statistics[port].dropped += (n - ret);</div><div class=\"line\">\t\t<span class=\"keyword\">do</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//把丢包部分free掉</span></div><div class=\"line\">\t\t\trte_pktmbuf_free(m_table[ret]);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">while</span> (++ret &lt; n);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在函数rte_eth_tx_burst()中：</p>\n<ul>\n<li>port：端口号。</li>\n<li>queueid：端口中的发送队列号。本例中每个端口都只有一个发送队列，所以固定为0。</li>\n<li>m_table：**rte_mbuf数据</li>\n<li>n：发送包的数量</li>\n</ul>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>L2 forwarding sample application在DPDK（Data Plane Development Kit）的基础上实现了第二层（链路层）的数据包转发。</p>","more":"<p><strong>Title: <a href=\"http://aidaizyy.github.io/dpdk_l2fwd\" target=\"_blank\" rel=\"external\">dpdk-l2fwd详解</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang（张云尧）</a></strong><br><strong>E-mail: <a href=\"&#109;&#97;&#105;&#108;&#116;&#111;&#x3a;&#x61;&#105;&#100;&#97;&#105;&#x7a;&#x79;&#x79;&#64;&#x67;&#x6d;&#x61;&#105;&#108;&#x2e;&#x63;&#x6f;&#109;\">&#x61;&#105;&#100;&#97;&#105;&#x7a;&#x79;&#x79;&#64;&#x67;&#x6d;&#x61;&#105;&#108;&#x2e;&#x63;&#x6f;&#109;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-04-15</a></strong></p>\n<h2 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h2><p>版本：DPDK-1.8.0</p>\n<p>本例中实现了相邻端口之间的相互转发。<br>比如一共4个端口可用，那么端口1收到数据后会转发给端口2，端口2收到数据后会转发给端口1，端口3和端口4也会相互转发。</p>\n<h2 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h2><p>设置环境变量<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">export</span> RTE_SDK=/(RTE_SDK) <span class=\"comment\">#DPDK的路径</span></div><div class=\"line\"><span class=\"built_in\">export</span> RTE_TARGET=x86_64-native-linuxapp-gcc <span class=\"comment\">#DPDK的编译目标</span></div></pre></td></tr></table></figure></p>\n<p>进入示例目录<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /(RTE_SDK)/example/l2wfd</div></pre></td></tr></table></figure></p>\n<p>编译<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">make</div></pre></td></tr></table></figure></p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./build/l2wfd [EAL options] -- -p PORTMASK [-q NQ -T t]</div></pre></td></tr></table></figure>\n<ul>\n<li><p>EAL options</p>\n<ul>\n<li>DPDK EAL的默认参数，必须参数为-c COREMASK -n NUM。</li>\n<li>COREMASK：一个十六进制位掩码表示分配的逻辑内核数量。</li>\n<li>NUM：一个十进制整数表示内存通道数量。</li>\n</ul>\n</li>\n<li><p>-p PORTMASK<br>  PORTMASK：一个十六进制位掩码表示分配的端口数量。</p>\n</li>\n<li><p>-q NQ<br>  NQ：表示分配给每个逻辑内核的收发队列数量。</p>\n</li>\n<li><p>-T t<br>  t: 表示打印统计数据到屏幕上的时间间隔，默认为10秒。</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./build/l2fwd -c f -n 4 -- -q 4 -p ffff</div></pre></td></tr></table></figure>\n<p>表示，分配给4个逻辑内核，每个内核分别有4个收发队列，而一共分配了16个端口。</p>\n<h2 id=\"详解\"><a href=\"#详解\" class=\"headerlink\" title=\"详解\"></a>详解</h2><h3 id=\"初始化EAL-Environment-Abstraciton-Layer\"><a href=\"#初始化EAL-Environment-Abstraciton-Layer\" class=\"headerlink\" title=\"初始化EAL(Environment Abstraciton Layer)\"></a>初始化EAL(Environment Abstraciton Layer)</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ret = rte_eal_init(argc, argv);</div><div class=\"line\"><span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\trte_exit(EXIT_FAILURE, <span class=\"string\">\"Invalid EAL arguments\\n\"</span>);</div></pre></td></tr></table></figure>\n<h3 id=\"参数传递\"><a href=\"#参数传递\" class=\"headerlink\" title=\"参数传递\"></a>参数传递</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ret = l2fwd_parse_args(argc, argv);</div><div class=\"line\"><span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\trte_exit(EXIT_FAILURE, <span class=\"string\">\"Invalid L2FWD arguments\\n\"</span>);</div></pre></td></tr></table></figure>\n<p>EAL参数传递已经在rte_eal_init()函数中完成了，这里主要传递“–”后面的参数。<br>传递参数之后，得到三个变量。</p>\n<ul>\n<li>l2fwd_enabled_port_mask：可用端口位掩码</li>\n<li>l2fwd_rx_queue_per_lcore：每个逻辑内核的收取队列数量</li>\n<li>timer_period：打印统计数据的时间间隔</li>\n</ul>\n<h3 id=\"创建内存池\"><a href=\"#创建内存池\" class=\"headerlink\" title=\"创建内存池\"></a>创建内存池</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">l2fwd_pktmbuf_pool =</div><div class=\"line\">\trte_mempool_create(<span class=\"string\">\"mbuf_pool\"</span>, NB_MBUF,</div><div class=\"line\">\t\t\t   MBUF_SIZE, <span class=\"number\">32</span>,</div><div class=\"line\">\t\t\t   <span class=\"keyword\">sizeof</span>(struct rte_pktmbuf_pool_private),</div><div class=\"line\">\t\t\t   rte_pktmbuf_pool_init, <span class=\"literal\">NULL</span>,</div><div class=\"line\">\t\t\t   rte_pktmbuf_init, <span class=\"literal\">NULL</span>,</div><div class=\"line\">\t\t\t   rte_socket_id(), <span class=\"number\">0</span>);</div><div class=\"line\"><span class=\"keyword\">if</span> (l2fwd_pktmbuf_pool == <span class=\"literal\">NULL</span>)</div><div class=\"line\">\trte_exit(EXIT_FAILURE, <span class=\"string\">\"Cannot init mbuf pool\\n\"</span>);</div></pre></td></tr></table></figure>\n<ul>\n<li>“mbuf_pool”：内存池的名称</li>\n<li>NB_MBUF：内存池中存储mbuf的数量</li>\n<li>MBUF_SIZE: mbuf的大小</li>\n<li>32：内存池缓存的大小</li>\n</ul>\n<h3 id=\"端口处理\"><a href=\"#端口处理\" class=\"headerlink\" title=\"端口处理\"></a>端口处理</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//rte_eth_dev_count()函数返回端口总数</span></div><div class=\"line\">nb_ports = rte_eth_dev_count();</div><div class=\"line\"><span class=\"keyword\">if</span> (nb_ports == <span class=\"number\">0</span>)</div><div class=\"line\">\trte_exit(EXIT_FAILURE, <span class=\"string\">\"No Ethernet ports - bye\\n\"</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (nb_ports &gt; RTE_MAX_ETHPORTS)</div><div class=\"line\">\tnb_ports = RTE_MAX_ETHPORTS;</div></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (portid = <span class=\"number\">0</span>; portid &lt; nb_ports; portid++) &#123;</div><div class=\"line\">\t<span class=\"comment\">//跳过未分配或者不可用端口</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> ((l2fwd_enabled_port_mask &amp; (<span class=\"number\">1</span> &lt;&lt; portid)) == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>可用端口位掩码表示，左数第n位如果为1，表示端口n可用，如果左数第n位如果为0，表示端口n不可用。<br>要得到第x位为1还是0，我们的方法是将1左移x位，得到一个只在x位为1，其他位都为0的数，再与位掩码相与。结果为1，那么第x位为1，结果位0，那么第x位为0.</p>\n<h3 id=\"设置每个端口的目的端口\"><a href=\"#设置每个端口的目的端口\" class=\"headerlink\" title=\"设置每个端口的目的端口\"></a>设置每个端口的目的端口</h3><p>这里设置数据包进入端口后，转发给相邻的端口。<br>每两个端口为一对，相互转发。<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (portid = <span class=\"number\">0</span>; portid &lt; nb_ports; portid++) &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((l2fwd_enabled_port_mask &amp; (<span class=\"number\">1</span> &lt;&lt; portid)) == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (nb_ports_in_mask % <span class=\"number\">2</span>) &#123;</div><div class=\"line\">\t\tl2fwd_dst_ports[portid] = last_port;</div><div class=\"line\">\t\tl2fwd_dst_ports[last_port] = portid;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span></div><div class=\"line\">\t\tlast_port = portid;</div><div class=\"line\"></div><div class=\"line\">\tnb_ports_in_mask++;</div><div class=\"line\"></div><div class=\"line\">\trte_eth_dev_info_get(portid, &amp;dev_info);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">if</span> (nb_ports_in_mask % <span class=\"number\">2</span>) &#123;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Notice: odd number of ports in portmask.\\n\"</span>);</div><div class=\"line\">\tl2fwd_dst_ports[last_port] = last_port;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"初始化端口的配置信息\"><a href=\"#初始化端口的配置信息\" class=\"headerlink\" title=\"初始化端口的配置信息\"></a>初始化端口的配置信息</h3><p>为每个端口分配到相应的逻辑内核<br>每个端口只对应一个逻辑内核<br>每个逻辑内核对应l2fwd_rx_queue_per_lcore个端口<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (portid = <span class=\"number\">0</span>; portid &lt; nb_ports; portid++) &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((l2fwd_enabled_port_mask &amp; (<span class=\"number\">1</span> &lt;&lt; portid)) == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//得到一个收取队列未分配满且可用的逻辑内核</span></div><div class=\"line\">\t<span class=\"keyword\">while</span> (rte_lcore_is_enabled(rx_lcore_id) == <span class=\"number\">0</span> ||</div><div class=\"line\">\t       lcore_queue_conf[rx_lcore_id].n_rx_port ==</div><div class=\"line\">\t       l2fwd_rx_queue_per_lcore) &#123;</div><div class=\"line\">\t\trx_lcore_id++;</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (rx_lcore_id &gt;= RTE_MAX_LCORE)</div><div class=\"line\">\t\t\trte_exit(EXIT_FAILURE, <span class=\"string\">\"Not enough cores\\n\"</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">if</span> (qconf != &amp;lcore_queue_conf[rx_lcore_id])</div><div class=\"line\">\t\t<span class=\"comment\">/* Assigned a new logical core in the loop above. */</span></div><div class=\"line\">\t\tqconf = &amp;lcore_queue_conf[rx_lcore_id];</div><div class=\"line\"></div><div class=\"line\">\tqconf-&gt;rx_port_list[qconf-&gt;n_rx_port] = portid;</div><div class=\"line\">\tqconf-&gt;n_rx_port++;</div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Lcore %u: RX port %u\\n\"</span>, rx_lcore_id, (<span class=\"keyword\">unsigned</span>) portid);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"初始化每个端口\"><a href=\"#初始化每个端口\" class=\"headerlink\" title=\"初始化每个端口\"></a>初始化每个端口</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (portid = <span class=\"number\">0</span>; portid &lt; nb_ports; portid++) &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> ((l2fwd_enabled_port_mask &amp; (<span class=\"number\">1</span> &lt;&lt; portid)) == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Skipping disabled port %u\\n\"</span>, (<span class=\"keyword\">unsigned</span>) portid);</div><div class=\"line\">\t\tnb_ports_available--;</div><div class=\"line\">\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Initializing port %u... \"</span>, (<span class=\"keyword\">unsigned</span>) portid);</div><div class=\"line\">\tfflush(<span class=\"built_in\">stdout</span>);</div><div class=\"line\">\t<span class=\"comment\">//初始化端口，第二个参数和第三个参数表示分配收取队列和发送队列的数量</span></div><div class=\"line\">\tret = rte_eth_dev_configure(portid, <span class=\"number\">1</span>, <span class=\"number\">1</span>, &amp;port_conf);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\trte_exit(EXIT_FAILURE, <span class=\"string\">\"Cannot configure device: err=%d, port=%u\\n\"</span>,</div><div class=\"line\">\t\t\t  ret, (<span class=\"keyword\">unsigned</span>) portid);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//得到端口对应的mac地址，存入l2fwd_ports_eth_addr[]数组</span></div><div class=\"line\">\trte_eth_macaddr_get(portid,&amp;l2fwd_ports_eth_addr[portid]);</div><div class=\"line\"></div><div class=\"line\">\tfflush(<span class=\"built_in\">stdout</span>);</div><div class=\"line\">\t<span class=\"comment\">//初始化一个收取队列，nb_rxd指收取队列的大小，最大能够存储mbuf的数量</span></div><div class=\"line\">\tret = rte_eth_rx_queue_setup(portid, <span class=\"number\">0</span>, nb_rxd,</div><div class=\"line\">\t\t\t\t     rte_eth_dev_socket_id(portid),</div><div class=\"line\">\t\t\t\t     <span class=\"literal\">NULL</span>,</div><div class=\"line\">\t\t\t\t     l2fwd_pktmbuf_pool);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\trte_exit(EXIT_FAILURE, <span class=\"string\">\"rte_eth_rx_queue_setup:err=%d, port=%u\\n\"</span>,</div><div class=\"line\">\t\t\t  ret, (<span class=\"keyword\">unsigned</span>) portid);</div><div class=\"line\"></div><div class=\"line\">\tfflush(<span class=\"built_in\">stdout</span>);</div><div class=\"line\">\t<span class=\"comment\">//初始化一个发送队列，nb_txd指发送队列的大小，最大能够存储mbuf的数量</span></div><div class=\"line\">\tret = rte_eth_tx_queue_setup(portid, <span class=\"number\">0</span>, nb_txd,</div><div class=\"line\">\t\t\trte_eth_dev_socket_id(portid),</div><div class=\"line\">\t\t\t<span class=\"literal\">NULL</span>);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\trte_exit(EXIT_FAILURE, <span class=\"string\">\"rte_eth_tx_queue_setup:err=%d, port=%u\\n\"</span>,</div><div class=\"line\">\t\t\tret, (<span class=\"keyword\">unsigned</span>) portid);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//开始运行该端口</span></div><div class=\"line\">\tret = rte_eth_dev_start(portid);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (ret &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\trte_exit(EXIT_FAILURE, <span class=\"string\">\"rte_eth_dev_start:err=%d, port=%u\\n\"</span>,</div><div class=\"line\">\t\t\t  ret, (<span class=\"keyword\">unsigned</span>) portid);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"done: \\n\"</span>);</div><div class=\"line\"></div><div class=\"line\">\trte_eth_promiscuous_enable(portid);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"Port %u, MAC address: %02X:%02X:%02X:%02X:%02X:%02X\\n\\n\"</span>,</div><div class=\"line\">\t\t\t(<span class=\"keyword\">unsigned</span>) portid,</div><div class=\"line\">\t\t\tl2fwd_ports_eth_addr[portid].addr_bytes[<span class=\"number\">0</span>],</div><div class=\"line\">\t\t\tl2fwd_ports_eth_addr[portid].addr_bytes[<span class=\"number\">1</span>],</div><div class=\"line\">\t\t\tl2fwd_ports_eth_addr[portid].addr_bytes[<span class=\"number\">2</span>],</div><div class=\"line\">\t\t\tl2fwd_ports_eth_addr[portid].addr_bytes[<span class=\"number\">3</span>],</div><div class=\"line\">\t\t\tl2fwd_ports_eth_addr[portid].addr_bytes[<span class=\"number\">4</span>],</div><div class=\"line\">\t\t\tl2fwd_ports_eth_addr[portid].addr_bytes[<span class=\"number\">5</span>]);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//初始化端口的统计数据</span></div><div class=\"line\">\t<span class=\"built_in\">memset</span>(&amp;port_statistics, <span class=\"number\">0</span>, <span class=\"keyword\">sizeof</span>(port_statistics));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"检查每个端口的连接状态\"><a href=\"#检查每个端口的连接状态\" class=\"headerlink\" title=\"检查每个端口的连接状态\"></a>检查每个端口的连接状态</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">check_all_ports_link_status(nb_ports, l2fwd_enabled_port_mask);</div></pre></td></tr></table></figure>\n<h3 id=\"在每个逻辑内核上启动线程，开始转发\"><a href=\"#在每个逻辑内核上启动线程，开始转发\" class=\"headerlink\" title=\"在每个逻辑内核上启动线程，开始转发\"></a>在每个逻辑内核上启动线程，开始转发</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">rte_eal_mp_remote_launch(l2fwd_launch_one_lcore, <span class=\"literal\">NULL</span>, CALL_MASTER);</div><div class=\"line\">RTE_LCORE_FOREACH_SLAVE(lcore_id) &#123;</div><div class=\"line\">\t<span class=\"keyword\">if</span> (rte_eal_wait_lcore(lcore_id) &lt; <span class=\"number\">0</span>)</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>收包<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; qconf-&gt;n_rx_port; i++) &#123;</div><div class=\"line\"></div><div class=\"line\">\tportid = qconf-&gt;rx_port_list[i];</div><div class=\"line\">\t<span class=\"comment\">//收包，一次最多收取MAX_PKT_BURST个数据包</span></div><div class=\"line\">\tnb_rx = rte_eth_rx_burst((<span class=\"keyword\">uint8_t</span>) portid, <span class=\"number\">0</span>,</div><div class=\"line\">\t\t\t\t pkts_burst, MAX_PKT_BURST);</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"comment\">//更新统计数据</span></div><div class=\"line\">\tport_statistics[portid].rx += nb_rx;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; nb_rx; j++) &#123;</div><div class=\"line\">\t\tm = pkts_burst[j];</div><div class=\"line\">\t\trte_prefetch0(rte_pktmbuf_mtod(m, <span class=\"keyword\">void</span> *));</div><div class=\"line\">\t\t<span class=\"comment\">//转发</span></div><div class=\"line\">\t\tl2fwd_simple_forward(m, portid);</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>转发<br>替换源MAC地址和目的MAC地址<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span></span></div><div class=\"line\"><span class=\"title\">l2fwd_simple_forward</span><span class=\"params\">(struct rte_mbuf *m, <span class=\"keyword\">unsigned</span> portid)</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ether_hdr</span> *<span class=\"title\">eth</span>;</span></div><div class=\"line\">\t<span class=\"keyword\">void</span> *tmp;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> dst_port;</div><div class=\"line\"></div><div class=\"line\">\tdst_port = l2fwd_dst_ports[portid];</div><div class=\"line\">\teth = rte_pktmbuf_mtod(m, struct ether_hdr *);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//目的地址</span></div><div class=\"line\">\t<span class=\"comment\">/* 02:00:00:00:00:xx */</span></div><div class=\"line\">\ttmp = &amp;eth-&gt;d_addr.addr_bytes[<span class=\"number\">0</span>];</div><div class=\"line\">\t*((<span class=\"keyword\">uint64_t</span> *)tmp) = <span class=\"number\">0x000000000002</span> + ((<span class=\"keyword\">uint64_t</span>)dst_port &lt;&lt; <span class=\"number\">40</span>);</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//源地址</span></div><div class=\"line\">\tether_addr_copy(&amp;l2fwd_ports_eth_addr[dst_port], &amp;eth-&gt;s_addr);</div><div class=\"line\"></div><div class=\"line\">\tl2fwd_send_packet(m, (<span class=\"keyword\">uint8_t</span>) dst_port);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>将数据包推送至发送队列，如果发送队列存够MAX_PKT_BURST，即每次最大收取包的数量，就会发包<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span></span></div><div class=\"line\"><span class=\"title\">l2fwd_send_packet</span><span class=\"params\">(struct rte_mbuf *m, <span class=\"keyword\">uint8_t</span> port)</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> lcore_id, len;</div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">lcore_queue_conf</span> *<span class=\"title\">qconf</span>;</span></div><div class=\"line\"></div><div class=\"line\">\tlcore_id = rte_lcore_id();</div><div class=\"line\"></div><div class=\"line\">\tqconf = &amp;lcore_queue_conf[lcore_id];</div><div class=\"line\">\tlen = qconf-&gt;tx_mbufs[port].len;</div><div class=\"line\">\tqconf-&gt;tx_mbufs[port].m_table[len] = m;</div><div class=\"line\">\tlen++;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//当发包队列存够MAX_PKT_BURST，发包</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (unlikely(len == MAX_PKT_BURST)) &#123;</div><div class=\"line\">\t\tl2fwd_send_burst(qconf, MAX_PKT_BURST, port);</div><div class=\"line\">\t\tlen = <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tqconf-&gt;tx_mbufs[port].len = len;</div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>每隔一定时间也会发包<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//上次收包时间和这次收包时间差</span></div><div class=\"line\">diff_tsc = cur_tsc - prev_tsc;</div><div class=\"line\"><span class=\"comment\">//如果时间差大于我们设定的阈值，这里是100us</span></div><div class=\"line\"><span class=\"keyword\">if</span> (unlikely(diff_tsc &gt; drain_tsc)) &#123;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">for</span> (portid = <span class=\"number\">0</span>; portid &lt; RTE_MAX_ETHPORTS; portid++) &#123;\t\t\t</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (qconf-&gt;tx_mbufs[portid].len == <span class=\"number\">0</span>)</div><div class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</div><div class=\"line\">\t\t<span class=\"comment\">//发包</span></div><div class=\"line\">\t\tl2fwd_send_burst(&amp;lcore_queue_conf[lcore_id],</div><div class=\"line\">\t\t\t\t qconf-&gt;tx_mbufs[portid].len,</div><div class=\"line\">\t\t\t\t (<span class=\"keyword\">uint8_t</span>) portid);</div><div class=\"line\">\t\t\t\tqconf-&gt;tx_mbufs[portid].len = <span class=\"number\">0</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t</div><div class=\"line\">\t<span class=\"keyword\">if</span> (timer_period &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t</div><div class=\"line\">\t\ttimer_tsc += diff_tsc;</div><div class=\"line\"></div><div class=\"line\">\t\t<span class=\"comment\">//如果累积时间超过我们设定的阈值，就打印出统计数据，默认是10s</span></div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (unlikely(timer_tsc &gt;= (<span class=\"keyword\">uint64_t</span>) timer_period)) &#123;</div><div class=\"line\"></div><div class=\"line\">\t\t\t<span class=\"comment\">//打印数据在发生在主逻辑内核上</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">if</span> (lcore_id == rte_get_master_lcore()) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//打印统计数据</span></div><div class=\"line\">\t\t\t\tprint_stats();</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//累积时间置零</span></div><div class=\"line\">\t\t\t\ttimer_tsc = <span class=\"number\">0</span>;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\tprev_tsc = cur_tsc;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这两种情况都会产生发包，无论是发送队列存够阈值MAX_PKT_BURST，或者，时间差超过阈值brain_tsc，都会把发送队列上MAX_PKT_BURST个数据包推送出去，如果不足MAX_PKT_BURST，则把发送队列上全部数据包推送出去。</p>\n<p>发包函数<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span></span></div><div class=\"line\"><span class=\"title\">l2fwd_send_burst</span><span class=\"params\">(struct lcore_queue_conf *qconf, <span class=\"keyword\">unsigned</span> n, <span class=\"keyword\">uint8_t</span> port)</span></div><div class=\"line\">&#123;</div><div class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">rte_mbuf</span> **<span class=\"title\">m_table</span>;</span></div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> ret;</div><div class=\"line\">\t<span class=\"keyword\">unsigned</span> queueid =<span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">\tm_table = (struct rte_mbuf **)qconf-&gt;tx_mbufs[port].m_table;</div><div class=\"line\">\t<span class=\"comment\">//发包</span></div><div class=\"line\">\tret = rte_eth_tx_burst(port, (<span class=\"keyword\">uint16_t</span>) queueid, m_table, (<span class=\"keyword\">uint16_t</span>) n);</div><div class=\"line\">\t<span class=\"comment\">//更新统计数据</span></div><div class=\"line\">\tport_statistics[port].tx += ret;</div><div class=\"line\">\t<span class=\"comment\">//丢包</span></div><div class=\"line\">\t<span class=\"keyword\">if</span> (unlikely(ret &lt; n)) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">//更新统计数据</span></div><div class=\"line\">\t\tport_statistics[port].dropped += (n - ret);</div><div class=\"line\">\t\t<span class=\"keyword\">do</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">//把丢包部分free掉</span></div><div class=\"line\">\t\t\trte_pktmbuf_free(m_table[ret]);</div><div class=\"line\">\t\t&#125; <span class=\"keyword\">while</span> (++ret &lt; n);</div><div class=\"line\">\t&#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在函数rte_eth_tx_burst()中：</p>\n<ul>\n<li>port：端口号。</li>\n<li>queueid：端口中的发送队列号。本例中每个端口都只有一个发送队列，所以固定为0。</li>\n<li>m_table：**rte_mbuf数据</li>\n<li>n：发送包的数量</li>\n</ul>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>"},{"title":"Hadoop安装运行","date":"2016-05-29T06:18:57.000Z","toc":true,"_content":"\nHadoop：是一个由Apache基金会所开发的处理计算机集群上大数据的开源分布式系统基础框架。\n本文基于Mac OSX 10.11操作系统和Hadoop 2.6.4。\n\n<!--more-->\n**Title: [Hadoop安装运行](https://aidaizyy.github.io/hadoop)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2016-05-29](http://aidaizyy.github.io)**\n\n## 准备\n\n### JAVA\nHadoop是由Java实现的，所以首先确入是否已经安装Java。\n``` bash\njava -version\n```\n在终端中输入以上命令，确认是否安装Java。如果没有，可以去[Java官方网站](http://www.java.com)下载，并参照说明配置环境变量。如果已经安装Java，可以进行下一步。\n本文基于JDK 1.8安装Hadoop。官方要求至少java 1.5及其以上版本。\n\n### SSH\n其次，确认ssh安装，且sshd一直运行，以便Hadoop脚本管理远端Hadoop守护进程。\nMac系统已自带ssh，可通过以下三条命令验证。\n``` bash\nwhich ssh\nwhich sshd\nwhich ssh-Keygen\n```\n得到ssh路径。\n我们要实现无密码登录ssh。\n``` bash\nssh-keygen -t rsa\n```\n输入以上命令，需要输入密码时按enter键。\n成功后进入ssh目录。\n``` bash\ncd ~/.ssh\ncp id_rsa.pub authorized_keys\n```\n下面验证是否成功。\n``` bash\nssh localhost\n```\n如果出现\n``` bash\nssh: connect to host localhost port 22: Connection refuse\n```\n说明用户没有权限，需要去“系统偏好设置”——“共享”——“远程登录”，勾选并选择允许访问：“所有用户”。\n\n注意，在Windows系统下，需要安装Cygwin，提供shell支持。\n\n## 下载\n\n### 下载Hadoop\n前往[Apache Hadoop官方网站](http://hadoop.apache.org/releases.html)下载Hadoop发行版。本文下载了最新修改发布的2.6.4版本（2016年2月），选择[binary版本](http://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-2.6.4/hadoop-2.6.4.tar.gz)，如果选择了source版本，压缩包后会有-src后缀，表示源码，需要额外编译。\n\n### 解开压缩包\n``` bash \ntar -xvzf hadoop-2.6.4.tar.gz\n```\n我这里将其放置的路径是~/Applications（本文的路径是/Users/zhangyunyao/Applications/hadoop-2.6.4）。\n\n### 设置环境变量\n在~/.bash_profile文件或~/.profile文件中添加环境变量（本文在zsh环境下，在~/.zshrc中添加环境变量）。\n\n**添加JAVA_HOME环境变量**\n```\nexport JAVA_HOME=`/usr/libexec/java_home`\n```\n将上面句子加在环境变量文件末尾，并用source命令更新。\n``` bash\nsource .zshrc\n```\n验证JAVA_HOME环境变量是否设置成功。\n``` bash\necho $JAVA_HOME\n```\n如果返回Java路径则说明设置成功。\n\n**添加HADOOP_HOME环境变量**\n``` \nexport HADOOP_HOME=/Users/zhangyunyao/Applications/hadoop-2.6.4\n```\n将上面句子加载环境变量文件末尾，同样可以用source命令更新和echo命令验证。\n\n**添加其他可能用到的环境变量** \n``` \nexport PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin\nexport CLASSPATH=$CLASSPATH:$JAVA_HOME/lib\n```\n\n## 配置\n进入hadoop-2.6.4目录后，主要配置四个文件（hadoop-env.sh，core-site.xml，mapred-site.xml，hdfs-site.xml），很多资料显示这四个文件在conf目录里。但在Hadoop 2.5以后，这四个文件都在etc/hadoop文件夹下。\n``` bash\ncd hadoop-2.6.4/etc/hadoop\n```\n\n### 编辑hadoop-env.sh文件\n该文件涉及Hadoop的配置。\n``` \nexport JAVA_HOME=${JAVA_HOME}\n```\n因为我们在环境配置中已经设置了JAVA_HOME的值，所以这里可以不用修改。\n```\n#export HADOOP_HEADSIZE=\n```\n表示Hadoop堆可用的最大大小，默认是1000MB。没有特殊需求，可以不用修改。修改的话去掉注释符号“#”，并在“=”后面加上数字，比如“=2000”，表示2000MB。\n```\nexport HADOOP_OPTS=\"$HADOOP_OPTS -Djava.net.preferIPv4Stack=true\"\n```\n已经有默认值，暂时不需要修改。\n\n### 编辑core-site.xml文件\n参考官方提供的默认文件[core-default.xml](http://hadoop.apache.org/docs/r2.6.4/hadoop-project-dist/hadoop-common/core-default.xml)，其他版本都可以在官网找到对应的默认文件。\n“hadoop.tmp.dir”表示临时目录，“fs.default.name”表示缺省的文件URI标识，这里设置了主机名和端口。\n```\n<configuration>\n \t<property>\n    \t\t<name>hadoop.tmp.dir</name>\n    \t\t<value>/Users/zhangyunyao/Applications/hadoop-2.6.4/tmp/hadoop-${user.name}</value>\n    \t\t<description>A base for other temporary directories.</description>\n  \t</property>\n  \t<property>\n    \t\t<name>fs.default.name</name>\n    \t\t<value>hdfs://localhost:9000</value>\n  \t</property>\n</configuration>\n```\n\n### 编辑hdfs-site.xml文件\n参考官方提供的默认文件[hdfs-default.xml](http://hadoop.apache.org/docs/r2.6.4/hadoop-project-dist/hadoop-hdfs/hdfs-default.xml)，其他版本都可以在官网找到对应的默认文件。\n“dfs.replication”表示缺省的块复制数量，因为这里只有一个节点，所以值设为1。\n```\n<configuration>\n    \t<property>\n        \t<name>dfs.replication</name>\n        \t<value>1</value>\n    \t</property>\n</configuration>\n```\n\n### 编辑mapred-site.xml文件\n参考官方提供的默认文件[mapred-default.xml](http://hadoop.apache.org/docs/r2.6.4/hadoop-mapreduce-client/hadoop-mapreduce-client-core/mapred-default.xml)，其他版本都可以在官网找到对应的默认文件。\n“mapreduce.jobtracker.address”表示JobTracker作业跟踪器的地址，这里设置了它的主机名和端口。\n```\n<configuration>\n\t<property>\n\t\t<name>mapreduce.jobtracker.address</name>\n\t\t<value>localhost:9001</value>\n\t\t<description>The address of JobTracker</description>\n\t</property>\n</configuration>\n```\n注意hadoop-2.6.4/etc/hadoop目录下是没有mapred-site.xml文件的，只有mapred-site.xml.temple。我们需要把该文件复制一份，并命令为mapred-site.xml。\n``` bash\ncp mapred-site.xml.tmple mapred-site.xml\n```\n\n## 安装HDFS\n``` bash\nhadoop namenode -format\n```\n在Hadoop目录内输入以上命令。\n\n## 运行\n运行hadoop-2.6.4/sbin目录下的start-all.sh脚本。\n``` bash\n./start-all.sh\n```\n输入命令``jps``验证是否成功运行Hadoop。\n在本机上出现如下信息：\n``` \n30417 SecondaryNameNode\n30610 Jps\n30324 DataNode\n30571 NodeManager\n29660 ResourceManager\n30253 NameNode\n```\n说明Hadoop已经成功运行。\n\n运行自带的例子验证。\n``` bash\nhadoop jar $HADOOP_HOME/share/hadoop/madreduce/hadoop-mapreduce-examples-2.6.4.jar pi 10 100\n```\n出现以下信息：\n```\nNumber of Maps  = 10\nSamples per Map = 100\nWrote input for Map #0\nWrote input for Map #1\nWrote input for Map #2\nWrote input for Map #3\nWrote input for Map #4\nWrote input for Map #5\nWrote input for Map #6\nWrote input for Map #7\nWrote input for Map #8\nWrote input for Map #9\nStarting Job\n……\nJob Finished in 1.749 seconds\nEstimated value of Pi is 3.14800000000000000000\n```\n说明自带的例子hadoop-mapreduce-examples-2.6.4.jar已经成功运行，至此确认Hadoop已经成功安装。\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","source":"_posts/hadoop.md","raw":"title: \"Hadoop安装运行\"\ndate: 2016-05-29 14:18:57\ntags:\n- hadoop\n- java\ncategories: hadoop \ntoc: true\n---\n\nHadoop：是一个由Apache基金会所开发的处理计算机集群上大数据的开源分布式系统基础框架。\n本文基于Mac OSX 10.11操作系统和Hadoop 2.6.4。\n\n<!--more-->\n**Title: [Hadoop安装运行](https://aidaizyy.github.io/hadoop)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2016-05-29](http://aidaizyy.github.io)**\n\n## 准备\n\n### JAVA\nHadoop是由Java实现的，所以首先确入是否已经安装Java。\n``` bash\njava -version\n```\n在终端中输入以上命令，确认是否安装Java。如果没有，可以去[Java官方网站](http://www.java.com)下载，并参照说明配置环境变量。如果已经安装Java，可以进行下一步。\n本文基于JDK 1.8安装Hadoop。官方要求至少java 1.5及其以上版本。\n\n### SSH\n其次，确认ssh安装，且sshd一直运行，以便Hadoop脚本管理远端Hadoop守护进程。\nMac系统已自带ssh，可通过以下三条命令验证。\n``` bash\nwhich ssh\nwhich sshd\nwhich ssh-Keygen\n```\n得到ssh路径。\n我们要实现无密码登录ssh。\n``` bash\nssh-keygen -t rsa\n```\n输入以上命令，需要输入密码时按enter键。\n成功后进入ssh目录。\n``` bash\ncd ~/.ssh\ncp id_rsa.pub authorized_keys\n```\n下面验证是否成功。\n``` bash\nssh localhost\n```\n如果出现\n``` bash\nssh: connect to host localhost port 22: Connection refuse\n```\n说明用户没有权限，需要去“系统偏好设置”——“共享”——“远程登录”，勾选并选择允许访问：“所有用户”。\n\n注意，在Windows系统下，需要安装Cygwin，提供shell支持。\n\n## 下载\n\n### 下载Hadoop\n前往[Apache Hadoop官方网站](http://hadoop.apache.org/releases.html)下载Hadoop发行版。本文下载了最新修改发布的2.6.4版本（2016年2月），选择[binary版本](http://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-2.6.4/hadoop-2.6.4.tar.gz)，如果选择了source版本，压缩包后会有-src后缀，表示源码，需要额外编译。\n\n### 解开压缩包\n``` bash \ntar -xvzf hadoop-2.6.4.tar.gz\n```\n我这里将其放置的路径是~/Applications（本文的路径是/Users/zhangyunyao/Applications/hadoop-2.6.4）。\n\n### 设置环境变量\n在~/.bash_profile文件或~/.profile文件中添加环境变量（本文在zsh环境下，在~/.zshrc中添加环境变量）。\n\n**添加JAVA_HOME环境变量**\n```\nexport JAVA_HOME=`/usr/libexec/java_home`\n```\n将上面句子加在环境变量文件末尾，并用source命令更新。\n``` bash\nsource .zshrc\n```\n验证JAVA_HOME环境变量是否设置成功。\n``` bash\necho $JAVA_HOME\n```\n如果返回Java路径则说明设置成功。\n\n**添加HADOOP_HOME环境变量**\n``` \nexport HADOOP_HOME=/Users/zhangyunyao/Applications/hadoop-2.6.4\n```\n将上面句子加载环境变量文件末尾，同样可以用source命令更新和echo命令验证。\n\n**添加其他可能用到的环境变量** \n``` \nexport PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin\nexport CLASSPATH=$CLASSPATH:$JAVA_HOME/lib\n```\n\n## 配置\n进入hadoop-2.6.4目录后，主要配置四个文件（hadoop-env.sh，core-site.xml，mapred-site.xml，hdfs-site.xml），很多资料显示这四个文件在conf目录里。但在Hadoop 2.5以后，这四个文件都在etc/hadoop文件夹下。\n``` bash\ncd hadoop-2.6.4/etc/hadoop\n```\n\n### 编辑hadoop-env.sh文件\n该文件涉及Hadoop的配置。\n``` \nexport JAVA_HOME=${JAVA_HOME}\n```\n因为我们在环境配置中已经设置了JAVA_HOME的值，所以这里可以不用修改。\n```\n#export HADOOP_HEADSIZE=\n```\n表示Hadoop堆可用的最大大小，默认是1000MB。没有特殊需求，可以不用修改。修改的话去掉注释符号“#”，并在“=”后面加上数字，比如“=2000”，表示2000MB。\n```\nexport HADOOP_OPTS=\"$HADOOP_OPTS -Djava.net.preferIPv4Stack=true\"\n```\n已经有默认值，暂时不需要修改。\n\n### 编辑core-site.xml文件\n参考官方提供的默认文件[core-default.xml](http://hadoop.apache.org/docs/r2.6.4/hadoop-project-dist/hadoop-common/core-default.xml)，其他版本都可以在官网找到对应的默认文件。\n“hadoop.tmp.dir”表示临时目录，“fs.default.name”表示缺省的文件URI标识，这里设置了主机名和端口。\n```\n<configuration>\n \t<property>\n    \t\t<name>hadoop.tmp.dir</name>\n    \t\t<value>/Users/zhangyunyao/Applications/hadoop-2.6.4/tmp/hadoop-${user.name}</value>\n    \t\t<description>A base for other temporary directories.</description>\n  \t</property>\n  \t<property>\n    \t\t<name>fs.default.name</name>\n    \t\t<value>hdfs://localhost:9000</value>\n  \t</property>\n</configuration>\n```\n\n### 编辑hdfs-site.xml文件\n参考官方提供的默认文件[hdfs-default.xml](http://hadoop.apache.org/docs/r2.6.4/hadoop-project-dist/hadoop-hdfs/hdfs-default.xml)，其他版本都可以在官网找到对应的默认文件。\n“dfs.replication”表示缺省的块复制数量，因为这里只有一个节点，所以值设为1。\n```\n<configuration>\n    \t<property>\n        \t<name>dfs.replication</name>\n        \t<value>1</value>\n    \t</property>\n</configuration>\n```\n\n### 编辑mapred-site.xml文件\n参考官方提供的默认文件[mapred-default.xml](http://hadoop.apache.org/docs/r2.6.4/hadoop-mapreduce-client/hadoop-mapreduce-client-core/mapred-default.xml)，其他版本都可以在官网找到对应的默认文件。\n“mapreduce.jobtracker.address”表示JobTracker作业跟踪器的地址，这里设置了它的主机名和端口。\n```\n<configuration>\n\t<property>\n\t\t<name>mapreduce.jobtracker.address</name>\n\t\t<value>localhost:9001</value>\n\t\t<description>The address of JobTracker</description>\n\t</property>\n</configuration>\n```\n注意hadoop-2.6.4/etc/hadoop目录下是没有mapred-site.xml文件的，只有mapred-site.xml.temple。我们需要把该文件复制一份，并命令为mapred-site.xml。\n``` bash\ncp mapred-site.xml.tmple mapred-site.xml\n```\n\n## 安装HDFS\n``` bash\nhadoop namenode -format\n```\n在Hadoop目录内输入以上命令。\n\n## 运行\n运行hadoop-2.6.4/sbin目录下的start-all.sh脚本。\n``` bash\n./start-all.sh\n```\n输入命令``jps``验证是否成功运行Hadoop。\n在本机上出现如下信息：\n``` \n30417 SecondaryNameNode\n30610 Jps\n30324 DataNode\n30571 NodeManager\n29660 ResourceManager\n30253 NameNode\n```\n说明Hadoop已经成功运行。\n\n运行自带的例子验证。\n``` bash\nhadoop jar $HADOOP_HOME/share/hadoop/madreduce/hadoop-mapreduce-examples-2.6.4.jar pi 10 100\n```\n出现以下信息：\n```\nNumber of Maps  = 10\nSamples per Map = 100\nWrote input for Map #0\nWrote input for Map #1\nWrote input for Map #2\nWrote input for Map #3\nWrote input for Map #4\nWrote input for Map #5\nWrote input for Map #6\nWrote input for Map #7\nWrote input for Map #8\nWrote input for Map #9\nStarting Job\n……\nJob Finished in 1.749 seconds\nEstimated value of Pi is 3.14800000000000000000\n```\n说明自带的例子hadoop-mapreduce-examples-2.6.4.jar已经成功运行，至此确认Hadoop已经成功安装。\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","slug":"hadoop","published":1,"updated":"2017-05-08T16:40:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2gdu6ji0009v1o3tpvnhjch","content":"<p>Hadoop：是一个由Apache基金会所开发的处理计算机集群上大数据的开源分布式系统基础框架。<br>本文基于Mac OSX 10.11操作系统和Hadoop 2.6.4。</p>\n<a id=\"more\"></a>\n<p><strong>Title: <a href=\"https://aidaizyy.github.io/hadoop\" target=\"_blank\" rel=\"external\">Hadoop安装运行</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#x6d;&#x61;&#105;&#x6c;&#x74;&#111;&#x3a;&#x61;&#105;&#x64;&#x61;&#x69;&#122;&#121;&#x79;&#64;&#x67;&#109;&#x61;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;\">&#x61;&#105;&#x64;&#x61;&#x69;&#122;&#121;&#x79;&#64;&#x67;&#109;&#x61;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2016-05-29</a></strong></p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><h3 id=\"JAVA\"><a href=\"#JAVA\" class=\"headerlink\" title=\"JAVA\"></a>JAVA</h3><p>Hadoop是由Java实现的，所以首先确入是否已经安装Java。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java -version</div></pre></td></tr></table></figure></p>\n<p>在终端中输入以上命令，确认是否安装Java。如果没有，可以去<a href=\"http://www.java.com\" target=\"_blank\" rel=\"external\">Java官方网站</a>下载，并参照说明配置环境变量。如果已经安装Java，可以进行下一步。<br>本文基于JDK 1.8安装Hadoop。官方要求至少java 1.5及其以上版本。</p>\n<h3 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h3><p>其次，确认ssh安装，且sshd一直运行，以便Hadoop脚本管理远端Hadoop守护进程。<br>Mac系统已自带ssh，可通过以下三条命令验证。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">which</span> ssh</div><div class=\"line\"><span class=\"built_in\">which</span> sshd</div><div class=\"line\"><span class=\"built_in\">which</span> ssh-Keygen</div></pre></td></tr></table></figure></p>\n<p>得到ssh路径。<br>我们要实现无密码登录ssh。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen -t rsa</div></pre></td></tr></table></figure></p>\n<p>输入以上命令，需要输入密码时按enter键。<br>成功后进入ssh目录。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> ~/.ssh</div><div class=\"line\">cp id_rsa.pub authorized_keys</div></pre></td></tr></table></figure></p>\n<p>下面验证是否成功。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh localhost</div></pre></td></tr></table></figure></p>\n<p>如果出现<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh: connect to host localhost port 22: Connection refuse</div></pre></td></tr></table></figure></p>\n<p>说明用户没有权限，需要去“系统偏好设置”——“共享”——“远程登录”，勾选并选择允许访问：“所有用户”。</p>\n<p>注意，在Windows系统下，需要安装Cygwin，提供shell支持。</p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><h3 id=\"下载Hadoop\"><a href=\"#下载Hadoop\" class=\"headerlink\" title=\"下载Hadoop\"></a>下载Hadoop</h3><p>前往<a href=\"http://hadoop.apache.org/releases.html\" target=\"_blank\" rel=\"external\">Apache Hadoop官方网站</a>下载Hadoop发行版。本文下载了最新修改发布的2.6.4版本（2016年2月），选择<a href=\"http://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-2.6.4/hadoop-2.6.4.tar.gz\" target=\"_blank\" rel=\"external\">binary版本</a>，如果选择了source版本，压缩包后会有-src后缀，表示源码，需要额外编译。</p>\n<h3 id=\"解开压缩包\"><a href=\"#解开压缩包\" class=\"headerlink\" title=\"解开压缩包\"></a>解开压缩包</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -xvzf hadoop-2.6.4.tar.gz</div></pre></td></tr></table></figure>\n<p>我这里将其放置的路径是~/Applications（本文的路径是/Users/zhangyunyao/Applications/hadoop-2.6.4）。</p>\n<h3 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h3><p>在~/.bash_profile文件或~/.profile文件中添加环境变量（本文在zsh环境下，在~/.zshrc中添加环境变量）。</p>\n<p><strong>添加JAVA_HOME环境变量</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export JAVA_HOME=`/usr/libexec/java_home`</div></pre></td></tr></table></figure></p>\n<p>将上面句子加在环境变量文件末尾，并用source命令更新。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">source</span> .zshrc</div></pre></td></tr></table></figure></p>\n<p>验证JAVA_HOME环境变量是否设置成功。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$JAVA_HOME</span></div></pre></td></tr></table></figure></p>\n<p>如果返回Java路径则说明设置成功。</p>\n<p><strong>添加HADOOP_HOME环境变量</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export HADOOP_HOME=/Users/zhangyunyao/Applications/hadoop-2.6.4</div></pre></td></tr></table></figure></p>\n<p>将上面句子加载环境变量文件末尾，同样可以用source命令更新和echo命令验证。</p>\n<p><strong>添加其他可能用到的环境变量</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</div><div class=\"line\">export CLASSPATH=$CLASSPATH:$JAVA_HOME/lib</div></pre></td></tr></table></figure></p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>进入hadoop-2.6.4目录后，主要配置四个文件（hadoop-env.sh，core-site.xml，mapred-site.xml，hdfs-site.xml），很多资料显示这四个文件在conf目录里。但在Hadoop 2.5以后，这四个文件都在etc/hadoop文件夹下。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> hadoop-2.6.4/etc/hadoop</div></pre></td></tr></table></figure></p>\n<h3 id=\"编辑hadoop-env-sh文件\"><a href=\"#编辑hadoop-env-sh文件\" class=\"headerlink\" title=\"编辑hadoop-env.sh文件\"></a>编辑hadoop-env.sh文件</h3><p>该文件涉及Hadoop的配置。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export JAVA_HOME=$&#123;JAVA_HOME&#125;</div></pre></td></tr></table></figure></p>\n<p>因为我们在环境配置中已经设置了JAVA_HOME的值，所以这里可以不用修改。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#export HADOOP_HEADSIZE=</div></pre></td></tr></table></figure></p>\n<p>表示Hadoop堆可用的最大大小，默认是1000MB。没有特殊需求，可以不用修改。修改的话去掉注释符号“#”，并在“=”后面加上数字，比如“=2000”，表示2000MB。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export HADOOP_OPTS=&quot;$HADOOP_OPTS -Djava.net.preferIPv4Stack=true&quot;</div></pre></td></tr></table></figure></p>\n<p>已经有默认值，暂时不需要修改。</p>\n<h3 id=\"编辑core-site-xml文件\"><a href=\"#编辑core-site-xml文件\" class=\"headerlink\" title=\"编辑core-site.xml文件\"></a>编辑core-site.xml文件</h3><p>参考官方提供的默认文件<a href=\"http://hadoop.apache.org/docs/r2.6.4/hadoop-project-dist/hadoop-common/core-default.xml\" target=\"_blank\" rel=\"external\">core-default.xml</a>，其他版本都可以在官网找到对应的默认文件。<br>“hadoop.tmp.dir”表示临时目录，“fs.default.name”表示缺省的文件URI标识，这里设置了主机名和端口。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration&gt;</div><div class=\"line\"> \t&lt;property&gt;</div><div class=\"line\">    \t\t&lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</div><div class=\"line\">    \t\t&lt;value&gt;/Users/zhangyunyao/Applications/hadoop-2.6.4/tmp/hadoop-$&#123;user.name&#125;&lt;/value&gt;</div><div class=\"line\">    \t\t&lt;description&gt;A base for other temporary directories.&lt;/description&gt;</div><div class=\"line\">  \t&lt;/property&gt;</div><div class=\"line\">  \t&lt;property&gt;</div><div class=\"line\">    \t\t&lt;name&gt;fs.default.name&lt;/name&gt;</div><div class=\"line\">    \t\t&lt;value&gt;hdfs://localhost:9000&lt;/value&gt;</div><div class=\"line\">  \t&lt;/property&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"编辑hdfs-site-xml文件\"><a href=\"#编辑hdfs-site-xml文件\" class=\"headerlink\" title=\"编辑hdfs-site.xml文件\"></a>编辑hdfs-site.xml文件</h3><p>参考官方提供的默认文件<a href=\"http://hadoop.apache.org/docs/r2.6.4/hadoop-project-dist/hadoop-hdfs/hdfs-default.xml\" target=\"_blank\" rel=\"external\">hdfs-default.xml</a>，其他版本都可以在官网找到对应的默认文件。<br>“dfs.replication”表示缺省的块复制数量，因为这里只有一个节点，所以值设为1。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration&gt;</div><div class=\"line\">    \t&lt;property&gt;</div><div class=\"line\">        \t&lt;name&gt;dfs.replication&lt;/name&gt;</div><div class=\"line\">        \t&lt;value&gt;1&lt;/value&gt;</div><div class=\"line\">    \t&lt;/property&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"编辑mapred-site-xml文件\"><a href=\"#编辑mapred-site-xml文件\" class=\"headerlink\" title=\"编辑mapred-site.xml文件\"></a>编辑mapred-site.xml文件</h3><p>参考官方提供的默认文件<a href=\"http://hadoop.apache.org/docs/r2.6.4/hadoop-mapreduce-client/hadoop-mapreduce-client-core/mapred-default.xml\" target=\"_blank\" rel=\"external\">mapred-default.xml</a>，其他版本都可以在官网找到对应的默认文件。<br>“mapreduce.jobtracker.address”表示JobTracker作业跟踪器的地址，这里设置了它的主机名和端口。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration&gt;</div><div class=\"line\">\t&lt;property&gt;</div><div class=\"line\">\t\t&lt;name&gt;mapreduce.jobtracker.address&lt;/name&gt;</div><div class=\"line\">\t\t&lt;value&gt;localhost:9001&lt;/value&gt;</div><div class=\"line\">\t\t&lt;description&gt;The address of JobTracker&lt;/description&gt;</div><div class=\"line\">\t&lt;/property&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>\n<p>注意hadoop-2.6.4/etc/hadoop目录下是没有mapred-site.xml文件的，只有mapred-site.xml.temple。我们需要把该文件复制一份，并命令为mapred-site.xml。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp mapred-site.xml.tmple mapred-site.xml</div></pre></td></tr></table></figure></p>\n<h2 id=\"安装HDFS\"><a href=\"#安装HDFS\" class=\"headerlink\" title=\"安装HDFS\"></a>安装HDFS</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hadoop namenode -format</div></pre></td></tr></table></figure>\n<p>在Hadoop目录内输入以上命令。</p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>运行hadoop-2.6.4/sbin目录下的start-all.sh脚本。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./start-all.sh</div></pre></td></tr></table></figure></p>\n<p>输入命令<code>jps</code>验证是否成功运行Hadoop。<br>在本机上出现如下信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">30417 SecondaryNameNode</div><div class=\"line\">30610 Jps</div><div class=\"line\">30324 DataNode</div><div class=\"line\">30571 NodeManager</div><div class=\"line\">29660 ResourceManager</div><div class=\"line\">30253 NameNode</div></pre></td></tr></table></figure></p>\n<p>说明Hadoop已经成功运行。</p>\n<p>运行自带的例子验证。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hadoop jar <span class=\"variable\">$HADOOP_HOME</span>/share/hadoop/madreduce/hadoop-mapreduce-examples-2.6.4.jar pi 10 100</div></pre></td></tr></table></figure></p>\n<p>出现以下信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Number of Maps  = 10</div><div class=\"line\">Samples per Map = 100</div><div class=\"line\">Wrote input for Map #0</div><div class=\"line\">Wrote input for Map #1</div><div class=\"line\">Wrote input for Map #2</div><div class=\"line\">Wrote input for Map #3</div><div class=\"line\">Wrote input for Map #4</div><div class=\"line\">Wrote input for Map #5</div><div class=\"line\">Wrote input for Map #6</div><div class=\"line\">Wrote input for Map #7</div><div class=\"line\">Wrote input for Map #8</div><div class=\"line\">Wrote input for Map #9</div><div class=\"line\">Starting Job</div><div class=\"line\">……</div><div class=\"line\">Job Finished in 1.749 seconds</div><div class=\"line\">Estimated value of Pi is 3.14800000000000000000</div></pre></td></tr></table></figure></p>\n<p>说明自带的例子hadoop-mapreduce-examples-2.6.4.jar已经成功运行，至此确认Hadoop已经成功安装。</p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>Hadoop：是一个由Apache基金会所开发的处理计算机集群上大数据的开源分布式系统基础框架。<br>本文基于Mac OSX 10.11操作系统和Hadoop 2.6.4。</p>","more":"<p><strong>Title: <a href=\"https://aidaizyy.github.io/hadoop\" target=\"_blank\" rel=\"external\">Hadoop安装运行</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#x6d;&#x61;&#105;&#x6c;&#x74;&#111;&#x3a;&#x61;&#105;&#x64;&#x61;&#x69;&#122;&#121;&#x79;&#64;&#x67;&#109;&#x61;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;\">&#x61;&#105;&#x64;&#x61;&#x69;&#122;&#121;&#x79;&#64;&#x67;&#109;&#x61;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2016-05-29</a></strong></p>\n<h2 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h2><h3 id=\"JAVA\"><a href=\"#JAVA\" class=\"headerlink\" title=\"JAVA\"></a>JAVA</h3><p>Hadoop是由Java实现的，所以首先确入是否已经安装Java。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">java -version</div></pre></td></tr></table></figure></p>\n<p>在终端中输入以上命令，确认是否安装Java。如果没有，可以去<a href=\"http://www.java.com\" target=\"_blank\" rel=\"external\">Java官方网站</a>下载，并参照说明配置环境变量。如果已经安装Java，可以进行下一步。<br>本文基于JDK 1.8安装Hadoop。官方要求至少java 1.5及其以上版本。</p>\n<h3 id=\"SSH\"><a href=\"#SSH\" class=\"headerlink\" title=\"SSH\"></a>SSH</h3><p>其次，确认ssh安装，且sshd一直运行，以便Hadoop脚本管理远端Hadoop守护进程。<br>Mac系统已自带ssh，可通过以下三条命令验证。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">which</span> ssh</div><div class=\"line\"><span class=\"built_in\">which</span> sshd</div><div class=\"line\"><span class=\"built_in\">which</span> ssh-Keygen</div></pre></td></tr></table></figure></p>\n<p>得到ssh路径。<br>我们要实现无密码登录ssh。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen -t rsa</div></pre></td></tr></table></figure></p>\n<p>输入以上命令，需要输入密码时按enter键。<br>成功后进入ssh目录。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> ~/.ssh</div><div class=\"line\">cp id_rsa.pub authorized_keys</div></pre></td></tr></table></figure></p>\n<p>下面验证是否成功。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh localhost</div></pre></td></tr></table></figure></p>\n<p>如果出现<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh: connect to host localhost port 22: Connection refuse</div></pre></td></tr></table></figure></p>\n<p>说明用户没有权限，需要去“系统偏好设置”——“共享”——“远程登录”，勾选并选择允许访问：“所有用户”。</p>\n<p>注意，在Windows系统下，需要安装Cygwin，提供shell支持。</p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><h3 id=\"下载Hadoop\"><a href=\"#下载Hadoop\" class=\"headerlink\" title=\"下载Hadoop\"></a>下载Hadoop</h3><p>前往<a href=\"http://hadoop.apache.org/releases.html\" target=\"_blank\" rel=\"external\">Apache Hadoop官方网站</a>下载Hadoop发行版。本文下载了最新修改发布的2.6.4版本（2016年2月），选择<a href=\"http://www.apache.org/dyn/closer.cgi/hadoop/common/hadoop-2.6.4/hadoop-2.6.4.tar.gz\" target=\"_blank\" rel=\"external\">binary版本</a>，如果选择了source版本，压缩包后会有-src后缀，表示源码，需要额外编译。</p>\n<h3 id=\"解开压缩包\"><a href=\"#解开压缩包\" class=\"headerlink\" title=\"解开压缩包\"></a>解开压缩包</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -xvzf hadoop-2.6.4.tar.gz</div></pre></td></tr></table></figure>\n<p>我这里将其放置的路径是~/Applications（本文的路径是/Users/zhangyunyao/Applications/hadoop-2.6.4）。</p>\n<h3 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h3><p>在~/.bash_profile文件或~/.profile文件中添加环境变量（本文在zsh环境下，在~/.zshrc中添加环境变量）。</p>\n<p><strong>添加JAVA_HOME环境变量</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export JAVA_HOME=`/usr/libexec/java_home`</div></pre></td></tr></table></figure></p>\n<p>将上面句子加在环境变量文件末尾，并用source命令更新。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">source</span> .zshrc</div></pre></td></tr></table></figure></p>\n<p>验证JAVA_HOME环境变量是否设置成功。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$JAVA_HOME</span></div></pre></td></tr></table></figure></p>\n<p>如果返回Java路径则说明设置成功。</p>\n<p><strong>添加HADOOP_HOME环境变量</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export HADOOP_HOME=/Users/zhangyunyao/Applications/hadoop-2.6.4</div></pre></td></tr></table></figure></p>\n<p>将上面句子加载环境变量文件末尾，同样可以用source命令更新和echo命令验证。</p>\n<p><strong>添加其他可能用到的环境变量</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</div><div class=\"line\">export CLASSPATH=$CLASSPATH:$JAVA_HOME/lib</div></pre></td></tr></table></figure></p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>进入hadoop-2.6.4目录后，主要配置四个文件（hadoop-env.sh，core-site.xml，mapred-site.xml，hdfs-site.xml），很多资料显示这四个文件在conf目录里。但在Hadoop 2.5以后，这四个文件都在etc/hadoop文件夹下。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> hadoop-2.6.4/etc/hadoop</div></pre></td></tr></table></figure></p>\n<h3 id=\"编辑hadoop-env-sh文件\"><a href=\"#编辑hadoop-env-sh文件\" class=\"headerlink\" title=\"编辑hadoop-env.sh文件\"></a>编辑hadoop-env.sh文件</h3><p>该文件涉及Hadoop的配置。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export JAVA_HOME=$&#123;JAVA_HOME&#125;</div></pre></td></tr></table></figure></p>\n<p>因为我们在环境配置中已经设置了JAVA_HOME的值，所以这里可以不用修改。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">#export HADOOP_HEADSIZE=</div></pre></td></tr></table></figure></p>\n<p>表示Hadoop堆可用的最大大小，默认是1000MB。没有特殊需求，可以不用修改。修改的话去掉注释符号“#”，并在“=”后面加上数字，比如“=2000”，表示2000MB。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">export HADOOP_OPTS=&quot;$HADOOP_OPTS -Djava.net.preferIPv4Stack=true&quot;</div></pre></td></tr></table></figure></p>\n<p>已经有默认值，暂时不需要修改。</p>\n<h3 id=\"编辑core-site-xml文件\"><a href=\"#编辑core-site-xml文件\" class=\"headerlink\" title=\"编辑core-site.xml文件\"></a>编辑core-site.xml文件</h3><p>参考官方提供的默认文件<a href=\"http://hadoop.apache.org/docs/r2.6.4/hadoop-project-dist/hadoop-common/core-default.xml\" target=\"_blank\" rel=\"external\">core-default.xml</a>，其他版本都可以在官网找到对应的默认文件。<br>“hadoop.tmp.dir”表示临时目录，“fs.default.name”表示缺省的文件URI标识，这里设置了主机名和端口。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration&gt;</div><div class=\"line\"> \t&lt;property&gt;</div><div class=\"line\">    \t\t&lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</div><div class=\"line\">    \t\t&lt;value&gt;/Users/zhangyunyao/Applications/hadoop-2.6.4/tmp/hadoop-$&#123;user.name&#125;&lt;/value&gt;</div><div class=\"line\">    \t\t&lt;description&gt;A base for other temporary directories.&lt;/description&gt;</div><div class=\"line\">  \t&lt;/property&gt;</div><div class=\"line\">  \t&lt;property&gt;</div><div class=\"line\">    \t\t&lt;name&gt;fs.default.name&lt;/name&gt;</div><div class=\"line\">    \t\t&lt;value&gt;hdfs://localhost:9000&lt;/value&gt;</div><div class=\"line\">  \t&lt;/property&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"编辑hdfs-site-xml文件\"><a href=\"#编辑hdfs-site-xml文件\" class=\"headerlink\" title=\"编辑hdfs-site.xml文件\"></a>编辑hdfs-site.xml文件</h3><p>参考官方提供的默认文件<a href=\"http://hadoop.apache.org/docs/r2.6.4/hadoop-project-dist/hadoop-hdfs/hdfs-default.xml\" target=\"_blank\" rel=\"external\">hdfs-default.xml</a>，其他版本都可以在官网找到对应的默认文件。<br>“dfs.replication”表示缺省的块复制数量，因为这里只有一个节点，所以值设为1。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration&gt;</div><div class=\"line\">    \t&lt;property&gt;</div><div class=\"line\">        \t&lt;name&gt;dfs.replication&lt;/name&gt;</div><div class=\"line\">        \t&lt;value&gt;1&lt;/value&gt;</div><div class=\"line\">    \t&lt;/property&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>\n<h3 id=\"编辑mapred-site-xml文件\"><a href=\"#编辑mapred-site-xml文件\" class=\"headerlink\" title=\"编辑mapred-site.xml文件\"></a>编辑mapred-site.xml文件</h3><p>参考官方提供的默认文件<a href=\"http://hadoop.apache.org/docs/r2.6.4/hadoop-mapreduce-client/hadoop-mapreduce-client-core/mapred-default.xml\" target=\"_blank\" rel=\"external\">mapred-default.xml</a>，其他版本都可以在官网找到对应的默认文件。<br>“mapreduce.jobtracker.address”表示JobTracker作业跟踪器的地址，这里设置了它的主机名和端口。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;configuration&gt;</div><div class=\"line\">\t&lt;property&gt;</div><div class=\"line\">\t\t&lt;name&gt;mapreduce.jobtracker.address&lt;/name&gt;</div><div class=\"line\">\t\t&lt;value&gt;localhost:9001&lt;/value&gt;</div><div class=\"line\">\t\t&lt;description&gt;The address of JobTracker&lt;/description&gt;</div><div class=\"line\">\t&lt;/property&gt;</div><div class=\"line\">&lt;/configuration&gt;</div></pre></td></tr></table></figure></p>\n<p>注意hadoop-2.6.4/etc/hadoop目录下是没有mapred-site.xml文件的，只有mapred-site.xml.temple。我们需要把该文件复制一份，并命令为mapred-site.xml。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cp mapred-site.xml.tmple mapred-site.xml</div></pre></td></tr></table></figure></p>\n<h2 id=\"安装HDFS\"><a href=\"#安装HDFS\" class=\"headerlink\" title=\"安装HDFS\"></a>安装HDFS</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hadoop namenode -format</div></pre></td></tr></table></figure>\n<p>在Hadoop目录内输入以上命令。</p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><p>运行hadoop-2.6.4/sbin目录下的start-all.sh脚本。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./start-all.sh</div></pre></td></tr></table></figure></p>\n<p>输入命令<code>jps</code>验证是否成功运行Hadoop。<br>在本机上出现如下信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">30417 SecondaryNameNode</div><div class=\"line\">30610 Jps</div><div class=\"line\">30324 DataNode</div><div class=\"line\">30571 NodeManager</div><div class=\"line\">29660 ResourceManager</div><div class=\"line\">30253 NameNode</div></pre></td></tr></table></figure></p>\n<p>说明Hadoop已经成功运行。</p>\n<p>运行自带的例子验证。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hadoop jar <span class=\"variable\">$HADOOP_HOME</span>/share/hadoop/madreduce/hadoop-mapreduce-examples-2.6.4.jar pi 10 100</div></pre></td></tr></table></figure></p>\n<p>出现以下信息：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Number of Maps  = 10</div><div class=\"line\">Samples per Map = 100</div><div class=\"line\">Wrote input for Map #0</div><div class=\"line\">Wrote input for Map #1</div><div class=\"line\">Wrote input for Map #2</div><div class=\"line\">Wrote input for Map #3</div><div class=\"line\">Wrote input for Map #4</div><div class=\"line\">Wrote input for Map #5</div><div class=\"line\">Wrote input for Map #6</div><div class=\"line\">Wrote input for Map #7</div><div class=\"line\">Wrote input for Map #8</div><div class=\"line\">Wrote input for Map #9</div><div class=\"line\">Starting Job</div><div class=\"line\">……</div><div class=\"line\">Job Finished in 1.749 seconds</div><div class=\"line\">Estimated value of Pi is 3.14800000000000000000</div></pre></td></tr></table></figure></p>\n<p>说明自带的例子hadoop-mapreduce-examples-2.6.4.jar已经成功运行，至此确认Hadoop已经成功安装。</p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>"},{"title":"Open vSwitch安装与使用","toc":true,"date":"2016-11-23T06:26:26.000Z","_content":"\nOpen vSwitch是Apache 2.0协议下，实现分布式虚拟多层网络交换机功能的产品级开源软件，其目的是为硬件虚拟化环境提供交换机堆栈，支持计算机网络中使用的多种协议和标准。其具体概念参考[官方文档](https://github.com/openvswitch/ovs/blob/master/Documentation/faq/general.rst) 。\n\n<!--more-->\n**Title: [Open vSwitch安装与使用](https://aidaizyy.github.io/openvswitch-build)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2016-12-27](http://aidaizyy.github.io)**\n\n本文使用的服务器操作系统发行版本为CentOS 6.3，kernel版本为2.6.32-279.el6.x86_64，Open vSwitch版本为2.4.1。\n\n## 下载源码\n\n下载Open vSwitch，目前最新的版本为2.6.1（发布于2016.11.2），只支持kernel 3.10-4.7。因为服务器的kernel版本（2.6.32-279）较低，经测试2.4.1可以正常使用（支持kernel 2.6.32-4.0），更高的还有2.5.1(支持kernel 2.6.32-4.3)。\n``` bash\nsudo wget http://openvswitch.org/releases/openvswitch-2.4.1.tar.gz\n```\n如需其他版本，把上面的2.4.1替换为2.6.1或者2.5.1或者更低的版本。\n或者直接到官网http://openvswitch.org/download 下载。\n\n## 准备环境\n\n安装Open vSwitch需要准备的环境，可以参考https://github.com/openvswitch/ovs/blob/master/Documentation/intro/install/general.rst 的\"Build Requirements\"部分。\n摘自官方文档：\n需要的软件：\n- GNU make\n- 编译器：GCC 4.x/Clang 3.4\n- libssl：可选，在需要连接ovs（Open vSwitch）到OpenFlows控制器时推荐安装\n- libcap-ng：可选，在需要非root用户使用root权限运行ovs后台程序时推荐安装\n- Pyhton 2.7\n其他情况的软件及需要的内核模块自行参考官方文档。\n\n如果要编译内核模块，需要与内核版本一致的内核源代码，通常位于`/usr/src/kernels/<version>`或者`/usr/src/<versio>`。\n``` bash\ncd /lib/modules/<version>\nls -l build\n```\n<version>指内核版本，用`uname -r`得到。\n如果打印了一个目录列表，直接进行编译；\n如果打印了`No such file or directory error`，执行以下操作：\n``` bash\ncd /lib/modules/<version>\nrm build\nln -s /usr/src/kernels/<version> build\n```\n或者为\n``` bash\ncd /lib/modules/<version>\nrm build\nln -s /usr/src/<version> build\n```\n重复上面的步骤验证是否生效。\n\n## 编译安装\n\n``` bash\ntar -xvzf openvswitch-2.4.1.tar.gz\ncd openvswitch-2.4.1\n./configure --with-linux=/lib/modules/$(uname -r)/build\n```\n配置编译内核模块，如果不需要基于内核的交换机（可以只运行在用户态空间中），即直接`./configure`。\n其他配置，参考上面链接的官方文档。\n\n``` bash\nmake\nmake install\nmake modules_install\n```\n`make modules_install`编译内核模块，可以不用执行。\n在编译内核模块的过程中，需要`/lib/modules/<version>/build/include/generated/utsrelease.h`，可能会遇到较低kenrel版本中的指定位置并没有文件`utsrelease.h`的错误，我们可以在`<version>/build/include/linux/utsrelease.h`找到该文件，把它复制到`.../generated/utsrelease.h`，重新编译。\n\n## 加载模块\n\n如果不需要基于内核的交换机，没有编译内核模块，可以跳过这一步。\n``` bash\nmodprobe openvswitch\n```\n\n因为openvswitch模块与linux的bridge模块冲突，所以如果发生冲突，不能加载ovs的内核模块时，先卸载掉bridge模块。\n``` bash\nrmmod bridge\nmodprobe openvswitch\n```\n\n用`lsmod`查看已加载的所有模块，验证是否加载ovs的内核模块成功。\n``` bash\nlsmod | grep openvswitch\n```\n\n如果一直加载模块不成功，可以用命令`modinfo openvswitch`查看该模块的信息，内核版本以及依赖关系等。或者用`dmesg | tail`查看kernel的日志信息。\n\n关于ovs的内核模块的作用，可以参考https://github.com/openvswitch/ovs/blob/master/Documentation/intro/why-ovs.rst 。\n\n## 初始操作\n\n遇到权限不够时，使用`sudo`命令或`root`用户，或者`libcap-ng`。\n\n``` bash\nmkdir -p /usr/local/etc/openvswitch\ncd openvswitch-2.4.1\novsdb-tool create /usr/local/etc/openvswitch/conf.db vswitchd/vswitch.ovsschema\n```\n创建配置数据库\n`vswitch.ovsschema`是一个数据库模板，存放在`openvswitch-2.4.1/vswitchd/vswitch.ovsschema`。\n`conf.db`是数据库文件，是`vswith.ovsschema`的一份拷贝。\n\n``` bash\nmkdir -p /usr/local/var/run/openvswitch\novsdb-server --remote=punix:/usr/local/var/run/openvswitch/db.sock \\\n    --remote=db:Open_vSwitch,Open_vSwitch,manager_options \\\n    --private-key=db:Open_vSwitch,SSL,private_key \\\n    --certificate=db:Open_vSwitch,SSL,certificate \\\n    --bootstrap-ca-cert=db:Open_vSwitch,SSL,ca_cert \\\n    --pidfile --detach\n```\n创建连接到上面创建的配置数据库的Unix domain socket，以便管理员能管理数据库。\n如果不需要SSL支持，删除掉`--private`，`--certificate`，`--bootstrap`。\n执行以上操作后，开启了进程`ovsdb-server`。\n\n``` bash\novs-vsctl --no-wait init\n```\n对数据库进行初始化。\n\n``` bash\novs-vswitchd --pidfile --detach --log-file\n```\n开启ovs后台程序，连接到上面创建的Unix domain socket。一个后台程序可以管理和控制本机上任意数量的ovs交换机。\n`--pidfile`的意思是创建一个运行的进程文件，默认路径为`/usr/local/var/run/openvswitch/`，可以用`ovs-appctl`管理该后台程序。\n`--detach`的意思是在后台运行。\n`--log-file`的意思是创建一个日志文件，默认路径为`/usr/local/var/log/openvswitch/`，可以查看该后台程序的日志。\n其他参数可通过`man ovs-vswitchd`查看。\n\n``` bash\nps -ea | grep ovs\n```\n用`ps`命令查看当前运行的ovs进程，一共有两个进程，分别是ovs-server和ovs-vswitchd。\n这两个进程的pidfile都在`/usr/local/var/run/openvswitch/`中，可以用`ovs-appctl`管理。\n\n## 应用举例\n\n`ovs-vsctl`命令主要是把配置信息更新到数据库中。\n\n### 添加网桥\n创建ovs网桥br0\n``` bash\novs-vsctl add-br br0\n```\novs网桥就表示以太网交换机（Switch）。\n如果没有加载openvswitch内核模块，以上操作会报错，在日志文件中可以得到详情。如果想要ovs完全运行在用户态空间中，不使用内核模块，进行以下操作：\n``` bash\novs-vsctl add-br br0 -- set bridge br0 datapath_type=netdev\n```\n`--`替代`ovs-vsctl`命令，也可以拆成两个语句执行。\n后面的操作表示把数据库中ovs网桥br0的datapath_type属性的值设为netdev，对br0的其他属性设置操作类似。\nnetdev表示用户态数据通路，system表示内核数据通路。\n\n关于用户态空间ovs的更多资料，可以参考https://github.com/openvswitch/ovs/blob/master/Documentation/intro/install/userspace.rst 。\n\n删除ovs网桥br0\n``` bash\novs-vsctl del-br br0\n```\n\n### 添加端口\n为br0添加端口p0\n``` bash\novs-vsctl add-port br0 p0\n```\n同样会报错，因为根本实际没有p0这个端口。\n我们把p0的类型设置为虚拟端口可以解决这个问题。\n``` bash\novs-vsctl set interface p0 type=internal\n```\ninterface是连接到port的网络接口设备，一对一关系，可以直接理解为port。\n其他类型还有system、tap、geneve、gre、ipsec_gre、vxlan、lisp、stt、patch、null等。\n\n删除端口p0\n``` bash\novs-vsctl del-port p0\n```\n\n### 网桥接管以太网卡\nbr0接管以太网卡端口eth0\n``` bash\novs-vsctl add-port br0 eth0\n```\n因为eth0是实际存在的端口，不需要特意设置类型为internal。\n这时存在一个问题，以上操作执行后，eth0直接断网，不能连接到外网，如果使用ssh连接的服务器的就要小心了。\n（实际使用中发现只有在内核模式下才会断网，用户态模式下不会断网。）\n\n要解决这个问题，只需要把eth0的相同ip/子网掩码/网关等设置移植给br0即可。\n比如eth0的ip为192.168.1.100，子网掩码为255.255.0.0，网关为192.168.0.254。\n``` bash\nifconfig br0 192.168.1.100 netmask 255.255.0.0\nifconfig br0 up\nifconfig eth0 0.0.0.0\n```\n注意还要把eth0的ip清空后。\n在清空eth0的ip之前，最好执行`route -n`命令，观察eth0现有的路由设置，避免br0的路由设置出错。\n``` bash\nroute add default gw 192.168.0.254\n```\n上面设置了默认网关，其他的路由设置自行查询`route`命令用法设置。\n这时能ping通外网的话，表示设置成功。\n\n`ovs-vsctl show`显示ovs交换机的信息。\n``` bash\n$ ovs-vsctl show\n89da09a9-a172-4e62-b4a0-afc36760ad16\n    Bridge \"br0\"\n        Port \"p0\"\n            Interface \"p0\"\n                type: internal\n        Port \"br0\"\n            Interface \"br0\"\n                type: internal\n        Port \"eth0\"\n            Interface \"eth0\"\n```\n\n### 虚拟端口连接外网\n实际上这时p0在网桥中，已经连接到外网了，但还不能使用，因为p0还没有up。\n同样设置ip和子网掩码，然后用混杂模式up。\n``` bash\nifconfig p0 192.168.1.101 netmask 255.255.0.0\nifconfig p0 promisc up\n```\n混杂模式可以接收非本ip的数据包，如果不使用混杂模式，接收到非本ip的数据包直接丢弃，在交换机该场景下需要使用混杂模式。\n\n这时通过指定ping外网，就可以验证是否成功。\n``` bash\nping -I p0 http://www.baidu.com\n```\n\n> 这里可能会有疑问，为什么不直接创建一个tap设备来替代这个虚拟端口？关于这个问题，在https://github.com/openvswitch/ovs/blob/master/Documentation/faq/issues.rst 其中的“Q: I created a tap device tap0, configured an IP address on it, and add it to a bridge. I exacped that I counld then use this IP address to contract other hosts on the network, but it doesn't work. Why not?”部分有解答。\n除了ovs内部的虚拟端口，加入ovs的其他网络设备发送的数据包都会被丢弃。假如我们在tap设备上ping任意一个ip地址，tap设备将会发送ARP数据包，但是这些ARP数据包都会被丢弃，所以tap设备无法正常工作。在上面的场景中，只能用ovs内部的虚拟端口来实现。\n\n## 参考资料\n\n* Open vSwitch官网：http://openvswitch.org\n* Github地址：https://github.com/openvswitch/ovs\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","source":"_posts/openvswitch-build.md","raw":"title: Open vSwitch安装与使用\ntoc: true\ndate: 2016-11-23 14:26:26\ntags:\n- openvswitch\n- openflow\ncategories: openvswitch\n---\n\nOpen vSwitch是Apache 2.0协议下，实现分布式虚拟多层网络交换机功能的产品级开源软件，其目的是为硬件虚拟化环境提供交换机堆栈，支持计算机网络中使用的多种协议和标准。其具体概念参考[官方文档](https://github.com/openvswitch/ovs/blob/master/Documentation/faq/general.rst) 。\n\n<!--more-->\n**Title: [Open vSwitch安装与使用](https://aidaizyy.github.io/openvswitch-build)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2016-12-27](http://aidaizyy.github.io)**\n\n本文使用的服务器操作系统发行版本为CentOS 6.3，kernel版本为2.6.32-279.el6.x86_64，Open vSwitch版本为2.4.1。\n\n## 下载源码\n\n下载Open vSwitch，目前最新的版本为2.6.1（发布于2016.11.2），只支持kernel 3.10-4.7。因为服务器的kernel版本（2.6.32-279）较低，经测试2.4.1可以正常使用（支持kernel 2.6.32-4.0），更高的还有2.5.1(支持kernel 2.6.32-4.3)。\n``` bash\nsudo wget http://openvswitch.org/releases/openvswitch-2.4.1.tar.gz\n```\n如需其他版本，把上面的2.4.1替换为2.6.1或者2.5.1或者更低的版本。\n或者直接到官网http://openvswitch.org/download 下载。\n\n## 准备环境\n\n安装Open vSwitch需要准备的环境，可以参考https://github.com/openvswitch/ovs/blob/master/Documentation/intro/install/general.rst 的\"Build Requirements\"部分。\n摘自官方文档：\n需要的软件：\n- GNU make\n- 编译器：GCC 4.x/Clang 3.4\n- libssl：可选，在需要连接ovs（Open vSwitch）到OpenFlows控制器时推荐安装\n- libcap-ng：可选，在需要非root用户使用root权限运行ovs后台程序时推荐安装\n- Pyhton 2.7\n其他情况的软件及需要的内核模块自行参考官方文档。\n\n如果要编译内核模块，需要与内核版本一致的内核源代码，通常位于`/usr/src/kernels/<version>`或者`/usr/src/<versio>`。\n``` bash\ncd /lib/modules/<version>\nls -l build\n```\n<version>指内核版本，用`uname -r`得到。\n如果打印了一个目录列表，直接进行编译；\n如果打印了`No such file or directory error`，执行以下操作：\n``` bash\ncd /lib/modules/<version>\nrm build\nln -s /usr/src/kernels/<version> build\n```\n或者为\n``` bash\ncd /lib/modules/<version>\nrm build\nln -s /usr/src/<version> build\n```\n重复上面的步骤验证是否生效。\n\n## 编译安装\n\n``` bash\ntar -xvzf openvswitch-2.4.1.tar.gz\ncd openvswitch-2.4.1\n./configure --with-linux=/lib/modules/$(uname -r)/build\n```\n配置编译内核模块，如果不需要基于内核的交换机（可以只运行在用户态空间中），即直接`./configure`。\n其他配置，参考上面链接的官方文档。\n\n``` bash\nmake\nmake install\nmake modules_install\n```\n`make modules_install`编译内核模块，可以不用执行。\n在编译内核模块的过程中，需要`/lib/modules/<version>/build/include/generated/utsrelease.h`，可能会遇到较低kenrel版本中的指定位置并没有文件`utsrelease.h`的错误，我们可以在`<version>/build/include/linux/utsrelease.h`找到该文件，把它复制到`.../generated/utsrelease.h`，重新编译。\n\n## 加载模块\n\n如果不需要基于内核的交换机，没有编译内核模块，可以跳过这一步。\n``` bash\nmodprobe openvswitch\n```\n\n因为openvswitch模块与linux的bridge模块冲突，所以如果发生冲突，不能加载ovs的内核模块时，先卸载掉bridge模块。\n``` bash\nrmmod bridge\nmodprobe openvswitch\n```\n\n用`lsmod`查看已加载的所有模块，验证是否加载ovs的内核模块成功。\n``` bash\nlsmod | grep openvswitch\n```\n\n如果一直加载模块不成功，可以用命令`modinfo openvswitch`查看该模块的信息，内核版本以及依赖关系等。或者用`dmesg | tail`查看kernel的日志信息。\n\n关于ovs的内核模块的作用，可以参考https://github.com/openvswitch/ovs/blob/master/Documentation/intro/why-ovs.rst 。\n\n## 初始操作\n\n遇到权限不够时，使用`sudo`命令或`root`用户，或者`libcap-ng`。\n\n``` bash\nmkdir -p /usr/local/etc/openvswitch\ncd openvswitch-2.4.1\novsdb-tool create /usr/local/etc/openvswitch/conf.db vswitchd/vswitch.ovsschema\n```\n创建配置数据库\n`vswitch.ovsschema`是一个数据库模板，存放在`openvswitch-2.4.1/vswitchd/vswitch.ovsschema`。\n`conf.db`是数据库文件，是`vswith.ovsschema`的一份拷贝。\n\n``` bash\nmkdir -p /usr/local/var/run/openvswitch\novsdb-server --remote=punix:/usr/local/var/run/openvswitch/db.sock \\\n    --remote=db:Open_vSwitch,Open_vSwitch,manager_options \\\n    --private-key=db:Open_vSwitch,SSL,private_key \\\n    --certificate=db:Open_vSwitch,SSL,certificate \\\n    --bootstrap-ca-cert=db:Open_vSwitch,SSL,ca_cert \\\n    --pidfile --detach\n```\n创建连接到上面创建的配置数据库的Unix domain socket，以便管理员能管理数据库。\n如果不需要SSL支持，删除掉`--private`，`--certificate`，`--bootstrap`。\n执行以上操作后，开启了进程`ovsdb-server`。\n\n``` bash\novs-vsctl --no-wait init\n```\n对数据库进行初始化。\n\n``` bash\novs-vswitchd --pidfile --detach --log-file\n```\n开启ovs后台程序，连接到上面创建的Unix domain socket。一个后台程序可以管理和控制本机上任意数量的ovs交换机。\n`--pidfile`的意思是创建一个运行的进程文件，默认路径为`/usr/local/var/run/openvswitch/`，可以用`ovs-appctl`管理该后台程序。\n`--detach`的意思是在后台运行。\n`--log-file`的意思是创建一个日志文件，默认路径为`/usr/local/var/log/openvswitch/`，可以查看该后台程序的日志。\n其他参数可通过`man ovs-vswitchd`查看。\n\n``` bash\nps -ea | grep ovs\n```\n用`ps`命令查看当前运行的ovs进程，一共有两个进程，分别是ovs-server和ovs-vswitchd。\n这两个进程的pidfile都在`/usr/local/var/run/openvswitch/`中，可以用`ovs-appctl`管理。\n\n## 应用举例\n\n`ovs-vsctl`命令主要是把配置信息更新到数据库中。\n\n### 添加网桥\n创建ovs网桥br0\n``` bash\novs-vsctl add-br br0\n```\novs网桥就表示以太网交换机（Switch）。\n如果没有加载openvswitch内核模块，以上操作会报错，在日志文件中可以得到详情。如果想要ovs完全运行在用户态空间中，不使用内核模块，进行以下操作：\n``` bash\novs-vsctl add-br br0 -- set bridge br0 datapath_type=netdev\n```\n`--`替代`ovs-vsctl`命令，也可以拆成两个语句执行。\n后面的操作表示把数据库中ovs网桥br0的datapath_type属性的值设为netdev，对br0的其他属性设置操作类似。\nnetdev表示用户态数据通路，system表示内核数据通路。\n\n关于用户态空间ovs的更多资料，可以参考https://github.com/openvswitch/ovs/blob/master/Documentation/intro/install/userspace.rst 。\n\n删除ovs网桥br0\n``` bash\novs-vsctl del-br br0\n```\n\n### 添加端口\n为br0添加端口p0\n``` bash\novs-vsctl add-port br0 p0\n```\n同样会报错，因为根本实际没有p0这个端口。\n我们把p0的类型设置为虚拟端口可以解决这个问题。\n``` bash\novs-vsctl set interface p0 type=internal\n```\ninterface是连接到port的网络接口设备，一对一关系，可以直接理解为port。\n其他类型还有system、tap、geneve、gre、ipsec_gre、vxlan、lisp、stt、patch、null等。\n\n删除端口p0\n``` bash\novs-vsctl del-port p0\n```\n\n### 网桥接管以太网卡\nbr0接管以太网卡端口eth0\n``` bash\novs-vsctl add-port br0 eth0\n```\n因为eth0是实际存在的端口，不需要特意设置类型为internal。\n这时存在一个问题，以上操作执行后，eth0直接断网，不能连接到外网，如果使用ssh连接的服务器的就要小心了。\n（实际使用中发现只有在内核模式下才会断网，用户态模式下不会断网。）\n\n要解决这个问题，只需要把eth0的相同ip/子网掩码/网关等设置移植给br0即可。\n比如eth0的ip为192.168.1.100，子网掩码为255.255.0.0，网关为192.168.0.254。\n``` bash\nifconfig br0 192.168.1.100 netmask 255.255.0.0\nifconfig br0 up\nifconfig eth0 0.0.0.0\n```\n注意还要把eth0的ip清空后。\n在清空eth0的ip之前，最好执行`route -n`命令，观察eth0现有的路由设置，避免br0的路由设置出错。\n``` bash\nroute add default gw 192.168.0.254\n```\n上面设置了默认网关，其他的路由设置自行查询`route`命令用法设置。\n这时能ping通外网的话，表示设置成功。\n\n`ovs-vsctl show`显示ovs交换机的信息。\n``` bash\n$ ovs-vsctl show\n89da09a9-a172-4e62-b4a0-afc36760ad16\n    Bridge \"br0\"\n        Port \"p0\"\n            Interface \"p0\"\n                type: internal\n        Port \"br0\"\n            Interface \"br0\"\n                type: internal\n        Port \"eth0\"\n            Interface \"eth0\"\n```\n\n### 虚拟端口连接外网\n实际上这时p0在网桥中，已经连接到外网了，但还不能使用，因为p0还没有up。\n同样设置ip和子网掩码，然后用混杂模式up。\n``` bash\nifconfig p0 192.168.1.101 netmask 255.255.0.0\nifconfig p0 promisc up\n```\n混杂模式可以接收非本ip的数据包，如果不使用混杂模式，接收到非本ip的数据包直接丢弃，在交换机该场景下需要使用混杂模式。\n\n这时通过指定ping外网，就可以验证是否成功。\n``` bash\nping -I p0 http://www.baidu.com\n```\n\n> 这里可能会有疑问，为什么不直接创建一个tap设备来替代这个虚拟端口？关于这个问题，在https://github.com/openvswitch/ovs/blob/master/Documentation/faq/issues.rst 其中的“Q: I created a tap device tap0, configured an IP address on it, and add it to a bridge. I exacped that I counld then use this IP address to contract other hosts on the network, but it doesn't work. Why not?”部分有解答。\n除了ovs内部的虚拟端口，加入ovs的其他网络设备发送的数据包都会被丢弃。假如我们在tap设备上ping任意一个ip地址，tap设备将会发送ARP数据包，但是这些ARP数据包都会被丢弃，所以tap设备无法正常工作。在上面的场景中，只能用ovs内部的虚拟端口来实现。\n\n## 参考资料\n\n* Open vSwitch官网：http://openvswitch.org\n* Github地址：https://github.com/openvswitch/ovs\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","slug":"openvswitch-build","published":1,"updated":"2017-05-08T16:40:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2gdu6jm000cv1o3sze4jy6x","content":"<p>Open vSwitch是Apache 2.0协议下，实现分布式虚拟多层网络交换机功能的产品级开源软件，其目的是为硬件虚拟化环境提供交换机堆栈，支持计算机网络中使用的多种协议和标准。其具体概念参考<a href=\"https://github.com/openvswitch/ovs/blob/master/Documentation/faq/general.rst\" target=\"_blank\" rel=\"external\">官方文档</a> 。</p>\n<a id=\"more\"></a>\n<p><strong>Title: <a href=\"https://aidaizyy.github.io/openvswitch-build\" target=\"_blank\" rel=\"external\">Open vSwitch安装与使用</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#109;&#97;&#105;&#x6c;&#116;&#111;&#58;&#x61;&#105;&#100;&#97;&#105;&#x7a;&#121;&#121;&#64;&#103;&#109;&#97;&#105;&#108;&#x2e;&#x63;&#111;&#109;\">&#x61;&#105;&#100;&#97;&#105;&#x7a;&#121;&#121;&#64;&#103;&#109;&#97;&#105;&#108;&#x2e;&#x63;&#111;&#109;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2016-12-27</a></strong></p>\n<p>本文使用的服务器操作系统发行版本为CentOS 6.3，kernel版本为2.6.32-279.el6.x86_64，Open vSwitch版本为2.4.1。</p>\n<h2 id=\"下载源码\"><a href=\"#下载源码\" class=\"headerlink\" title=\"下载源码\"></a>下载源码</h2><p>下载Open vSwitch，目前最新的版本为2.6.1（发布于2016.11.2），只支持kernel 3.10-4.7。因为服务器的kernel版本（2.6.32-279）较低，经测试2.4.1可以正常使用（支持kernel 2.6.32-4.0），更高的还有2.5.1(支持kernel 2.6.32-4.3)。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo wget http://openvswitch.org/releases/openvswitch-2.4.1.tar.gz</div></pre></td></tr></table></figure></p>\n<p>如需其他版本，把上面的2.4.1替换为2.6.1或者2.5.1或者更低的版本。<br>或者直接到官网<a href=\"http://openvswitch.org/download\" target=\"_blank\" rel=\"external\">http://openvswitch.org/download</a> 下载。</p>\n<h2 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h2><p>安装Open vSwitch需要准备的环境，可以参考<a href=\"https://github.com/openvswitch/ovs/blob/master/Documentation/intro/install/general.rst\" target=\"_blank\" rel=\"external\">https://github.com/openvswitch/ovs/blob/master/Documentation/intro/install/general.rst</a> 的”Build Requirements”部分。<br>摘自官方文档：<br>需要的软件：</p>\n<ul>\n<li>GNU make</li>\n<li>编译器：GCC 4.x/Clang 3.4</li>\n<li>libssl：可选，在需要连接ovs（Open vSwitch）到OpenFlows控制器时推荐安装</li>\n<li>libcap-ng：可选，在需要非root用户使用root权限运行ovs后台程序时推荐安装</li>\n<li>Pyhton 2.7<br>其他情况的软件及需要的内核模块自行参考官方文档。</li>\n</ul>\n<p>如果要编译内核模块，需要与内核版本一致的内核源代码，通常位于<code>/usr/src/kernels/&lt;version&gt;</code>或者<code>/usr/src/&lt;versio&gt;</code>。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /lib/modules/&lt;version&gt;</div><div class=\"line\">ls <span class=\"_\">-l</span> build</div></pre></td></tr></table></figure></p>\n<p><version>指内核版本，用<code>uname -r</code>得到。<br>如果打印了一个目录列表，直接进行编译；<br>如果打印了<code>No such file or directory error</code>，执行以下操作：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /lib/modules/&lt;version&gt;</div><div class=\"line\">rm build</div><div class=\"line\">ln <span class=\"_\">-s</span> /usr/src/kernels/&lt;version&gt; build</div></pre></td></tr></table></figure></version></p>\n<p>或者为<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /lib/modules/&lt;version&gt;</div><div class=\"line\">rm build</div><div class=\"line\">ln <span class=\"_\">-s</span> /usr/src/&lt;version&gt; build</div></pre></td></tr></table></figure></p>\n<p>重复上面的步骤验证是否生效。</p>\n<h2 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -xvzf openvswitch-2.4.1.tar.gz</div><div class=\"line\"><span class=\"built_in\">cd</span> openvswitch-2.4.1</div><div class=\"line\">./configure --with-linux=/lib/modules/$(uname -r)/build</div></pre></td></tr></table></figure>\n<p>配置编译内核模块，如果不需要基于内核的交换机（可以只运行在用户态空间中），即直接<code>./configure</code>。<br>其他配置，参考上面链接的官方文档。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">make</div><div class=\"line\">make install</div><div class=\"line\">make modules_install</div></pre></td></tr></table></figure>\n<p><code>make modules_install</code>编译内核模块，可以不用执行。<br>在编译内核模块的过程中，需要<code>/lib/modules/&lt;version&gt;/build/include/generated/utsrelease.h</code>，可能会遇到较低kenrel版本中的指定位置并没有文件<code>utsrelease.h</code>的错误，我们可以在<code>&lt;version&gt;/build/include/linux/utsrelease.h</code>找到该文件，把它复制到<code>.../generated/utsrelease.h</code>，重新编译。</p>\n<h2 id=\"加载模块\"><a href=\"#加载模块\" class=\"headerlink\" title=\"加载模块\"></a>加载模块</h2><p>如果不需要基于内核的交换机，没有编译内核模块，可以跳过这一步。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">modprobe openvswitch</div></pre></td></tr></table></figure></p>\n<p>因为openvswitch模块与linux的bridge模块冲突，所以如果发生冲突，不能加载ovs的内核模块时，先卸载掉bridge模块。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rmmod bridge</div><div class=\"line\">modprobe openvswitch</div></pre></td></tr></table></figure></p>\n<p>用<code>lsmod</code>查看已加载的所有模块，验证是否加载ovs的内核模块成功。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">lsmod | grep openvswitch</div></pre></td></tr></table></figure></p>\n<p>如果一直加载模块不成功，可以用命令<code>modinfo openvswitch</code>查看该模块的信息，内核版本以及依赖关系等。或者用<code>dmesg | tail</code>查看kernel的日志信息。</p>\n<p>关于ovs的内核模块的作用，可以参考<a href=\"https://github.com/openvswitch/ovs/blob/master/Documentation/intro/why-ovs.rst\" target=\"_blank\" rel=\"external\">https://github.com/openvswitch/ovs/blob/master/Documentation/intro/why-ovs.rst</a> 。</p>\n<h2 id=\"初始操作\"><a href=\"#初始操作\" class=\"headerlink\" title=\"初始操作\"></a>初始操作</h2><p>遇到权限不够时，使用<code>sudo</code>命令或<code>root</code>用户，或者<code>libcap-ng</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir -p /usr/<span class=\"built_in\">local</span>/etc/openvswitch</div><div class=\"line\"><span class=\"built_in\">cd</span> openvswitch-2.4.1</div><div class=\"line\">ovsdb-tool create /usr/<span class=\"built_in\">local</span>/etc/openvswitch/conf.db vswitchd/vswitch.ovsschema</div></pre></td></tr></table></figure>\n<p>创建配置数据库<br><code>vswitch.ovsschema</code>是一个数据库模板，存放在<code>openvswitch-2.4.1/vswitchd/vswitch.ovsschema</code>。<br><code>conf.db</code>是数据库文件，是<code>vswith.ovsschema</code>的一份拷贝。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir -p /usr/<span class=\"built_in\">local</span>/var/run/openvswitch</div><div class=\"line\">ovsdb-server --remote=punix:/usr/<span class=\"built_in\">local</span>/var/run/openvswitch/db.sock \\</div><div class=\"line\">    --remote=db:Open_vSwitch,Open_vSwitch,manager_options \\</div><div class=\"line\">    --private-key=db:Open_vSwitch,SSL,private_key \\</div><div class=\"line\">    --certificate=db:Open_vSwitch,SSL,certificate \\</div><div class=\"line\">    --bootstrap-ca-cert=db:Open_vSwitch,SSL,ca_cert \\</div><div class=\"line\">    --pidfile --detach</div></pre></td></tr></table></figure>\n<p>创建连接到上面创建的配置数据库的Unix domain socket，以便管理员能管理数据库。<br>如果不需要SSL支持，删除掉<code>--private</code>，<code>--certificate</code>，<code>--bootstrap</code>。<br>执行以上操作后，开启了进程<code>ovsdb-server</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ovs-vsctl --no-wait init</div></pre></td></tr></table></figure>\n<p>对数据库进行初始化。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ovs-vswitchd --pidfile --detach --log-file</div></pre></td></tr></table></figure>\n<p>开启ovs后台程序，连接到上面创建的Unix domain socket。一个后台程序可以管理和控制本机上任意数量的ovs交换机。<br><code>--pidfile</code>的意思是创建一个运行的进程文件，默认路径为<code>/usr/local/var/run/openvswitch/</code>，可以用<code>ovs-appctl</code>管理该后台程序。<br><code>--detach</code>的意思是在后台运行。<br><code>--log-file</code>的意思是创建一个日志文件，默认路径为<code>/usr/local/var/log/openvswitch/</code>，可以查看该后台程序的日志。<br>其他参数可通过<code>man ovs-vswitchd</code>查看。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps -ea | grep ovs</div></pre></td></tr></table></figure>\n<p>用<code>ps</code>命令查看当前运行的ovs进程，一共有两个进程，分别是ovs-server和ovs-vswitchd。<br>这两个进程的pidfile都在<code>/usr/local/var/run/openvswitch/</code>中，可以用<code>ovs-appctl</code>管理。</p>\n<h2 id=\"应用举例\"><a href=\"#应用举例\" class=\"headerlink\" title=\"应用举例\"></a>应用举例</h2><p><code>ovs-vsctl</code>命令主要是把配置信息更新到数据库中。</p>\n<h3 id=\"添加网桥\"><a href=\"#添加网桥\" class=\"headerlink\" title=\"添加网桥\"></a>添加网桥</h3><p>创建ovs网桥br0<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ovs-vsctl add-br br0</div></pre></td></tr></table></figure></p>\n<p>ovs网桥就表示以太网交换机（Switch）。<br>如果没有加载openvswitch内核模块，以上操作会报错，在日志文件中可以得到详情。如果想要ovs完全运行在用户态空间中，不使用内核模块，进行以下操作：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ovs-vsctl add-br br0 -- <span class=\"built_in\">set</span> bridge br0 datapath_type=netdev</div></pre></td></tr></table></figure></p>\n<p><code>--</code>替代<code>ovs-vsctl</code>命令，也可以拆成两个语句执行。<br>后面的操作表示把数据库中ovs网桥br0的datapath_type属性的值设为netdev，对br0的其他属性设置操作类似。<br>netdev表示用户态数据通路，system表示内核数据通路。</p>\n<p>关于用户态空间ovs的更多资料，可以参考<a href=\"https://github.com/openvswitch/ovs/blob/master/Documentation/intro/install/userspace.rst\" target=\"_blank\" rel=\"external\">https://github.com/openvswitch/ovs/blob/master/Documentation/intro/install/userspace.rst</a> 。</p>\n<p>删除ovs网桥br0<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ovs-vsctl del-br br0</div></pre></td></tr></table></figure></p>\n<h3 id=\"添加端口\"><a href=\"#添加端口\" class=\"headerlink\" title=\"添加端口\"></a>添加端口</h3><p>为br0添加端口p0<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ovs-vsctl add-port br0 p0</div></pre></td></tr></table></figure></p>\n<p>同样会报错，因为根本实际没有p0这个端口。<br>我们把p0的类型设置为虚拟端口可以解决这个问题。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ovs-vsctl <span class=\"built_in\">set</span> interface p0 <span class=\"built_in\">type</span>=internal</div></pre></td></tr></table></figure></p>\n<p>interface是连接到port的网络接口设备，一对一关系，可以直接理解为port。<br>其他类型还有system、tap、geneve、gre、ipsec_gre、vxlan、lisp、stt、patch、null等。</p>\n<p>删除端口p0<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ovs-vsctl del-port p0</div></pre></td></tr></table></figure></p>\n<h3 id=\"网桥接管以太网卡\"><a href=\"#网桥接管以太网卡\" class=\"headerlink\" title=\"网桥接管以太网卡\"></a>网桥接管以太网卡</h3><p>br0接管以太网卡端口eth0<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ovs-vsctl add-port br0 eth0</div></pre></td></tr></table></figure></p>\n<p>因为eth0是实际存在的端口，不需要特意设置类型为internal。<br>这时存在一个问题，以上操作执行后，eth0直接断网，不能连接到外网，如果使用ssh连接的服务器的就要小心了。<br>（实际使用中发现只有在内核模式下才会断网，用户态模式下不会断网。）</p>\n<p>要解决这个问题，只需要把eth0的相同ip/子网掩码/网关等设置移植给br0即可。<br>比如eth0的ip为192.168.1.100，子网掩码为255.255.0.0，网关为192.168.0.254。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ifconfig br0 192.168.1.100 netmask 255.255.0.0</div><div class=\"line\">ifconfig br0 up</div><div class=\"line\">ifconfig eth0 0.0.0.0</div></pre></td></tr></table></figure></p>\n<p>注意还要把eth0的ip清空后。<br>在清空eth0的ip之前，最好执行<code>route -n</code>命令，观察eth0现有的路由设置，避免br0的路由设置出错。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">route add default gw 192.168.0.254</div></pre></td></tr></table></figure></p>\n<p>上面设置了默认网关，其他的路由设置自行查询<code>route</code>命令用法设置。<br>这时能ping通外网的话，表示设置成功。</p>\n<p><code>ovs-vsctl show</code>显示ovs交换机的信息。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ovs-vsctl show</div><div class=\"line\">89da09a9<span class=\"_\">-a</span>172-4e62-b4a0-afc36760ad16</div><div class=\"line\">    Bridge <span class=\"string\">\"br0\"</span></div><div class=\"line\">        Port <span class=\"string\">\"p0\"</span></div><div class=\"line\">            Interface <span class=\"string\">\"p0\"</span></div><div class=\"line\">                <span class=\"built_in\">type</span>: internal</div><div class=\"line\">        Port <span class=\"string\">\"br0\"</span></div><div class=\"line\">            Interface <span class=\"string\">\"br0\"</span></div><div class=\"line\">                <span class=\"built_in\">type</span>: internal</div><div class=\"line\">        Port <span class=\"string\">\"eth0\"</span></div><div class=\"line\">            Interface <span class=\"string\">\"eth0\"</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"虚拟端口连接外网\"><a href=\"#虚拟端口连接外网\" class=\"headerlink\" title=\"虚拟端口连接外网\"></a>虚拟端口连接外网</h3><p>实际上这时p0在网桥中，已经连接到外网了，但还不能使用，因为p0还没有up。<br>同样设置ip和子网掩码，然后用混杂模式up。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ifconfig p0 192.168.1.101 netmask 255.255.0.0</div><div class=\"line\">ifconfig p0 promisc up</div></pre></td></tr></table></figure></p>\n<p>混杂模式可以接收非本ip的数据包，如果不使用混杂模式，接收到非本ip的数据包直接丢弃，在交换机该场景下需要使用混杂模式。</p>\n<p>这时通过指定ping外网，就可以验证是否成功。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ping -I p0 http://www.baidu.com</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这里可能会有疑问，为什么不直接创建一个tap设备来替代这个虚拟端口？关于这个问题，在<a href=\"https://github.com/openvswitch/ovs/blob/master/Documentation/faq/issues.rst\" target=\"_blank\" rel=\"external\">https://github.com/openvswitch/ovs/blob/master/Documentation/faq/issues.rst</a> 其中的“Q: I created a tap device tap0, configured an IP address on it, and add it to a bridge. I exacped that I counld then use this IP address to contract other hosts on the network, but it doesn’t work. Why not?”部分有解答。<br>除了ovs内部的虚拟端口，加入ovs的其他网络设备发送的数据包都会被丢弃。假如我们在tap设备上ping任意一个ip地址，tap设备将会发送ARP数据包，但是这些ARP数据包都会被丢弃，所以tap设备无法正常工作。在上面的场景中，只能用ovs内部的虚拟端口来实现。</p>\n</blockquote>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>Open vSwitch官网：<a href=\"http://openvswitch.org\" target=\"_blank\" rel=\"external\">http://openvswitch.org</a></li>\n<li>Github地址：<a href=\"https://github.com/openvswitch/ovs\" target=\"_blank\" rel=\"external\">https://github.com/openvswitch/ovs</a></li>\n</ul>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>Open vSwitch是Apache 2.0协议下，实现分布式虚拟多层网络交换机功能的产品级开源软件，其目的是为硬件虚拟化环境提供交换机堆栈，支持计算机网络中使用的多种协议和标准。其具体概念参考<a href=\"https://github.com/openvswitch/ovs/blob/master/Documentation/faq/general.rst\" target=\"_blank\" rel=\"external\">官方文档</a> 。</p>","more":"<p><strong>Title: <a href=\"https://aidaizyy.github.io/openvswitch-build\" target=\"_blank\" rel=\"external\">Open vSwitch安装与使用</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#109;&#97;&#105;&#x6c;&#116;&#111;&#58;&#x61;&#105;&#100;&#97;&#105;&#x7a;&#121;&#121;&#64;&#103;&#109;&#97;&#105;&#108;&#x2e;&#x63;&#111;&#109;\">&#x61;&#105;&#100;&#97;&#105;&#x7a;&#121;&#121;&#64;&#103;&#109;&#97;&#105;&#108;&#x2e;&#x63;&#111;&#109;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2016-12-27</a></strong></p>\n<p>本文使用的服务器操作系统发行版本为CentOS 6.3，kernel版本为2.6.32-279.el6.x86_64，Open vSwitch版本为2.4.1。</p>\n<h2 id=\"下载源码\"><a href=\"#下载源码\" class=\"headerlink\" title=\"下载源码\"></a>下载源码</h2><p>下载Open vSwitch，目前最新的版本为2.6.1（发布于2016.11.2），只支持kernel 3.10-4.7。因为服务器的kernel版本（2.6.32-279）较低，经测试2.4.1可以正常使用（支持kernel 2.6.32-4.0），更高的还有2.5.1(支持kernel 2.6.32-4.3)。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo wget http://openvswitch.org/releases/openvswitch-2.4.1.tar.gz</div></pre></td></tr></table></figure></p>\n<p>如需其他版本，把上面的2.4.1替换为2.6.1或者2.5.1或者更低的版本。<br>或者直接到官网<a href=\"http://openvswitch.org/download\" target=\"_blank\" rel=\"external\">http://openvswitch.org/download</a> 下载。</p>\n<h2 id=\"准备环境\"><a href=\"#准备环境\" class=\"headerlink\" title=\"准备环境\"></a>准备环境</h2><p>安装Open vSwitch需要准备的环境，可以参考<a href=\"https://github.com/openvswitch/ovs/blob/master/Documentation/intro/install/general.rst\" target=\"_blank\" rel=\"external\">https://github.com/openvswitch/ovs/blob/master/Documentation/intro/install/general.rst</a> 的”Build Requirements”部分。<br>摘自官方文档：<br>需要的软件：</p>\n<ul>\n<li>GNU make</li>\n<li>编译器：GCC 4.x/Clang 3.4</li>\n<li>libssl：可选，在需要连接ovs（Open vSwitch）到OpenFlows控制器时推荐安装</li>\n<li>libcap-ng：可选，在需要非root用户使用root权限运行ovs后台程序时推荐安装</li>\n<li>Pyhton 2.7<br>其他情况的软件及需要的内核模块自行参考官方文档。</li>\n</ul>\n<p>如果要编译内核模块，需要与内核版本一致的内核源代码，通常位于<code>/usr/src/kernels/&lt;version&gt;</code>或者<code>/usr/src/&lt;versio&gt;</code>。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /lib/modules/&lt;version&gt;</div><div class=\"line\">ls <span class=\"_\">-l</span> build</div></pre></td></tr></table></figure></p>\n<p><version>指内核版本，用<code>uname -r</code>得到。<br>如果打印了一个目录列表，直接进行编译；<br>如果打印了<code>No such file or directory error</code>，执行以下操作：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /lib/modules/&lt;version&gt;</div><div class=\"line\">rm build</div><div class=\"line\">ln <span class=\"_\">-s</span> /usr/src/kernels/&lt;version&gt; build</div></pre></td></tr></table></figure></version></p>\n<p>或者为<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> /lib/modules/&lt;version&gt;</div><div class=\"line\">rm build</div><div class=\"line\">ln <span class=\"_\">-s</span> /usr/src/&lt;version&gt; build</div></pre></td></tr></table></figure></p>\n<p>重复上面的步骤验证是否生效。</p>\n<h2 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -xvzf openvswitch-2.4.1.tar.gz</div><div class=\"line\"><span class=\"built_in\">cd</span> openvswitch-2.4.1</div><div class=\"line\">./configure --with-linux=/lib/modules/$(uname -r)/build</div></pre></td></tr></table></figure>\n<p>配置编译内核模块，如果不需要基于内核的交换机（可以只运行在用户态空间中），即直接<code>./configure</code>。<br>其他配置，参考上面链接的官方文档。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">make</div><div class=\"line\">make install</div><div class=\"line\">make modules_install</div></pre></td></tr></table></figure>\n<p><code>make modules_install</code>编译内核模块，可以不用执行。<br>在编译内核模块的过程中，需要<code>/lib/modules/&lt;version&gt;/build/include/generated/utsrelease.h</code>，可能会遇到较低kenrel版本中的指定位置并没有文件<code>utsrelease.h</code>的错误，我们可以在<code>&lt;version&gt;/build/include/linux/utsrelease.h</code>找到该文件，把它复制到<code>.../generated/utsrelease.h</code>，重新编译。</p>\n<h2 id=\"加载模块\"><a href=\"#加载模块\" class=\"headerlink\" title=\"加载模块\"></a>加载模块</h2><p>如果不需要基于内核的交换机，没有编译内核模块，可以跳过这一步。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">modprobe openvswitch</div></pre></td></tr></table></figure></p>\n<p>因为openvswitch模块与linux的bridge模块冲突，所以如果发生冲突，不能加载ovs的内核模块时，先卸载掉bridge模块。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rmmod bridge</div><div class=\"line\">modprobe openvswitch</div></pre></td></tr></table></figure></p>\n<p>用<code>lsmod</code>查看已加载的所有模块，验证是否加载ovs的内核模块成功。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">lsmod | grep openvswitch</div></pre></td></tr></table></figure></p>\n<p>如果一直加载模块不成功，可以用命令<code>modinfo openvswitch</code>查看该模块的信息，内核版本以及依赖关系等。或者用<code>dmesg | tail</code>查看kernel的日志信息。</p>\n<p>关于ovs的内核模块的作用，可以参考<a href=\"https://github.com/openvswitch/ovs/blob/master/Documentation/intro/why-ovs.rst\" target=\"_blank\" rel=\"external\">https://github.com/openvswitch/ovs/blob/master/Documentation/intro/why-ovs.rst</a> 。</p>\n<h2 id=\"初始操作\"><a href=\"#初始操作\" class=\"headerlink\" title=\"初始操作\"></a>初始操作</h2><p>遇到权限不够时，使用<code>sudo</code>命令或<code>root</code>用户，或者<code>libcap-ng</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir -p /usr/<span class=\"built_in\">local</span>/etc/openvswitch</div><div class=\"line\"><span class=\"built_in\">cd</span> openvswitch-2.4.1</div><div class=\"line\">ovsdb-tool create /usr/<span class=\"built_in\">local</span>/etc/openvswitch/conf.db vswitchd/vswitch.ovsschema</div></pre></td></tr></table></figure>\n<p>创建配置数据库<br><code>vswitch.ovsschema</code>是一个数据库模板，存放在<code>openvswitch-2.4.1/vswitchd/vswitch.ovsschema</code>。<br><code>conf.db</code>是数据库文件，是<code>vswith.ovsschema</code>的一份拷贝。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir -p /usr/<span class=\"built_in\">local</span>/var/run/openvswitch</div><div class=\"line\">ovsdb-server --remote=punix:/usr/<span class=\"built_in\">local</span>/var/run/openvswitch/db.sock \\</div><div class=\"line\">    --remote=db:Open_vSwitch,Open_vSwitch,manager_options \\</div><div class=\"line\">    --private-key=db:Open_vSwitch,SSL,private_key \\</div><div class=\"line\">    --certificate=db:Open_vSwitch,SSL,certificate \\</div><div class=\"line\">    --bootstrap-ca-cert=db:Open_vSwitch,SSL,ca_cert \\</div><div class=\"line\">    --pidfile --detach</div></pre></td></tr></table></figure>\n<p>创建连接到上面创建的配置数据库的Unix domain socket，以便管理员能管理数据库。<br>如果不需要SSL支持，删除掉<code>--private</code>，<code>--certificate</code>，<code>--bootstrap</code>。<br>执行以上操作后，开启了进程<code>ovsdb-server</code>。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ovs-vsctl --no-wait init</div></pre></td></tr></table></figure>\n<p>对数据库进行初始化。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ovs-vswitchd --pidfile --detach --log-file</div></pre></td></tr></table></figure>\n<p>开启ovs后台程序，连接到上面创建的Unix domain socket。一个后台程序可以管理和控制本机上任意数量的ovs交换机。<br><code>--pidfile</code>的意思是创建一个运行的进程文件，默认路径为<code>/usr/local/var/run/openvswitch/</code>，可以用<code>ovs-appctl</code>管理该后台程序。<br><code>--detach</code>的意思是在后台运行。<br><code>--log-file</code>的意思是创建一个日志文件，默认路径为<code>/usr/local/var/log/openvswitch/</code>，可以查看该后台程序的日志。<br>其他参数可通过<code>man ovs-vswitchd</code>查看。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ps -ea | grep ovs</div></pre></td></tr></table></figure>\n<p>用<code>ps</code>命令查看当前运行的ovs进程，一共有两个进程，分别是ovs-server和ovs-vswitchd。<br>这两个进程的pidfile都在<code>/usr/local/var/run/openvswitch/</code>中，可以用<code>ovs-appctl</code>管理。</p>\n<h2 id=\"应用举例\"><a href=\"#应用举例\" class=\"headerlink\" title=\"应用举例\"></a>应用举例</h2><p><code>ovs-vsctl</code>命令主要是把配置信息更新到数据库中。</p>\n<h3 id=\"添加网桥\"><a href=\"#添加网桥\" class=\"headerlink\" title=\"添加网桥\"></a>添加网桥</h3><p>创建ovs网桥br0<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ovs-vsctl add-br br0</div></pre></td></tr></table></figure></p>\n<p>ovs网桥就表示以太网交换机（Switch）。<br>如果没有加载openvswitch内核模块，以上操作会报错，在日志文件中可以得到详情。如果想要ovs完全运行在用户态空间中，不使用内核模块，进行以下操作：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ovs-vsctl add-br br0 -- <span class=\"built_in\">set</span> bridge br0 datapath_type=netdev</div></pre></td></tr></table></figure></p>\n<p><code>--</code>替代<code>ovs-vsctl</code>命令，也可以拆成两个语句执行。<br>后面的操作表示把数据库中ovs网桥br0的datapath_type属性的值设为netdev，对br0的其他属性设置操作类似。<br>netdev表示用户态数据通路，system表示内核数据通路。</p>\n<p>关于用户态空间ovs的更多资料，可以参考<a href=\"https://github.com/openvswitch/ovs/blob/master/Documentation/intro/install/userspace.rst\" target=\"_blank\" rel=\"external\">https://github.com/openvswitch/ovs/blob/master/Documentation/intro/install/userspace.rst</a> 。</p>\n<p>删除ovs网桥br0<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ovs-vsctl del-br br0</div></pre></td></tr></table></figure></p>\n<h3 id=\"添加端口\"><a href=\"#添加端口\" class=\"headerlink\" title=\"添加端口\"></a>添加端口</h3><p>为br0添加端口p0<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ovs-vsctl add-port br0 p0</div></pre></td></tr></table></figure></p>\n<p>同样会报错，因为根本实际没有p0这个端口。<br>我们把p0的类型设置为虚拟端口可以解决这个问题。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ovs-vsctl <span class=\"built_in\">set</span> interface p0 <span class=\"built_in\">type</span>=internal</div></pre></td></tr></table></figure></p>\n<p>interface是连接到port的网络接口设备，一对一关系，可以直接理解为port。<br>其他类型还有system、tap、geneve、gre、ipsec_gre、vxlan、lisp、stt、patch、null等。</p>\n<p>删除端口p0<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ovs-vsctl del-port p0</div></pre></td></tr></table></figure></p>\n<h3 id=\"网桥接管以太网卡\"><a href=\"#网桥接管以太网卡\" class=\"headerlink\" title=\"网桥接管以太网卡\"></a>网桥接管以太网卡</h3><p>br0接管以太网卡端口eth0<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ovs-vsctl add-port br0 eth0</div></pre></td></tr></table></figure></p>\n<p>因为eth0是实际存在的端口，不需要特意设置类型为internal。<br>这时存在一个问题，以上操作执行后，eth0直接断网，不能连接到外网，如果使用ssh连接的服务器的就要小心了。<br>（实际使用中发现只有在内核模式下才会断网，用户态模式下不会断网。）</p>\n<p>要解决这个问题，只需要把eth0的相同ip/子网掩码/网关等设置移植给br0即可。<br>比如eth0的ip为192.168.1.100，子网掩码为255.255.0.0，网关为192.168.0.254。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ifconfig br0 192.168.1.100 netmask 255.255.0.0</div><div class=\"line\">ifconfig br0 up</div><div class=\"line\">ifconfig eth0 0.0.0.0</div></pre></td></tr></table></figure></p>\n<p>注意还要把eth0的ip清空后。<br>在清空eth0的ip之前，最好执行<code>route -n</code>命令，观察eth0现有的路由设置，避免br0的路由设置出错。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">route add default gw 192.168.0.254</div></pre></td></tr></table></figure></p>\n<p>上面设置了默认网关，其他的路由设置自行查询<code>route</code>命令用法设置。<br>这时能ping通外网的话，表示设置成功。</p>\n<p><code>ovs-vsctl show</code>显示ovs交换机的信息。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ovs-vsctl show</div><div class=\"line\">89da09a9<span class=\"_\">-a</span>172-4e62-b4a0-afc36760ad16</div><div class=\"line\">    Bridge <span class=\"string\">\"br0\"</span></div><div class=\"line\">        Port <span class=\"string\">\"p0\"</span></div><div class=\"line\">            Interface <span class=\"string\">\"p0\"</span></div><div class=\"line\">                <span class=\"built_in\">type</span>: internal</div><div class=\"line\">        Port <span class=\"string\">\"br0\"</span></div><div class=\"line\">            Interface <span class=\"string\">\"br0\"</span></div><div class=\"line\">                <span class=\"built_in\">type</span>: internal</div><div class=\"line\">        Port <span class=\"string\">\"eth0\"</span></div><div class=\"line\">            Interface <span class=\"string\">\"eth0\"</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"虚拟端口连接外网\"><a href=\"#虚拟端口连接外网\" class=\"headerlink\" title=\"虚拟端口连接外网\"></a>虚拟端口连接外网</h3><p>实际上这时p0在网桥中，已经连接到外网了，但还不能使用，因为p0还没有up。<br>同样设置ip和子网掩码，然后用混杂模式up。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ifconfig p0 192.168.1.101 netmask 255.255.0.0</div><div class=\"line\">ifconfig p0 promisc up</div></pre></td></tr></table></figure></p>\n<p>混杂模式可以接收非本ip的数据包，如果不使用混杂模式，接收到非本ip的数据包直接丢弃，在交换机该场景下需要使用混杂模式。</p>\n<p>这时通过指定ping外网，就可以验证是否成功。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ping -I p0 http://www.baidu.com</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p>这里可能会有疑问，为什么不直接创建一个tap设备来替代这个虚拟端口？关于这个问题，在<a href=\"https://github.com/openvswitch/ovs/blob/master/Documentation/faq/issues.rst\" target=\"_blank\" rel=\"external\">https://github.com/openvswitch/ovs/blob/master/Documentation/faq/issues.rst</a> 其中的“Q: I created a tap device tap0, configured an IP address on it, and add it to a bridge. I exacped that I counld then use this IP address to contract other hosts on the network, but it doesn’t work. Why not?”部分有解答。<br>除了ovs内部的虚拟端口，加入ovs的其他网络设备发送的数据包都会被丢弃。假如我们在tap设备上ping任意一个ip地址，tap设备将会发送ARP数据包，但是这些ARP数据包都会被丢弃，所以tap设备无法正常工作。在上面的场景中，只能用ovs内部的虚拟端口来实现。</p>\n</blockquote>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>Open vSwitch官网：<a href=\"http://openvswitch.org\" target=\"_blank\" rel=\"external\">http://openvswitch.org</a></li>\n<li>Github地址：<a href=\"https://github.com/openvswitch/ovs\" target=\"_blank\" rel=\"external\">https://github.com/openvswitch/ovs</a></li>\n</ul>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>"},{"title":"Open vSwitch的OpenFlow和QOS","toc":true,"date":"2016-11-24T06:41:03.000Z","_content":"\nOpenFlow协议是一种网络通信协议，属于数据链路层，可以控制几换几或者路由器的转发平面（forwarding plane)，借此改变网络数据包所走的网络路径。\nOpen vSwitch支持OpenFlow协议，就可以控制数据包的走向，还可以修改源目的地址，支持QOS（Quality of Service）等。\n本文主要介绍Open vSwitch配置OpenFlow协议以及对QOS的支持。\n\n<!--more-->\n**Title: [Open vSwitch的OpenFlow和QOS](https://aidaizyy.github.io/openvswitch-qos)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2016-12-26](http://aidaizyy.github.io)**\n\n## OpenFlow基本应用\n\n这里有两篇参考文章，已经写得非常详细了：\n- [《基于Open vSwitch的OpenFlow实践》](http://www.ibm.com/developerworks/cn/cloud/library/1401_zhaoyi_openswitch)\n- [Open vSwitch Advanced Features](https://github.com/openvswitch/ovs/blob/master/Documentation/tutorials/ovs-advanced.rst)\n\n交换机包括一个或多个流表，流表中的条目主要包括数据包要匹配的信息，匹配成功后要执行的操作和统计信息三部分。\n\n``` bash\novs-vsctl add-br br0\novs-vsctl add-port br0 p0 -- set interface p0 type=internal\novs-vsctl add-port br0 eth0\n```\n创建网桥br0，并添加虚拟端口p0和以太网端口eth0。\n再对br0进行网络配置，使其能上外网，并将p0 up。（参考上一篇博文[《Open vSwitch安装与使用》](http://aidaiz.com/openvswitch-build)。）\n\n`ovs-ofctl`是OpenFlow相关命令，详细参考`man ovs-ofctl`。\n`ovs-ofctl show br0`命令是显示交换机br0的端口信息。\n``` bash\n$ ovs-ofctl show br0\nFPT_FEATURES_REPLY (xid=0x2): dpid:00000025909765b0\nn_tables:254, n_buffers:256\ncapabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IP\nactions: output enqueue set_vlan_vid set_vlan_pcp strip_vlan mod_dl_src mod_dl_dst mod_nw_src mod_nw_dst mod_nw_tos mod_tp_src mod_tp_dst\n 1(eth0): addr:00:25:90:97:65:b0\n     config:     0\n     state:      0\n     current:    1GB-FD COPPER AUTO_NEG\n     advertised: 10MB-HD 10MB-FD 100MB-HD 100MB-FD 1GB-FD COPPER AUTO_NEG AUTO_PAUSE\n     supported:  10MB-HD 10MB-FD 100MB-HD 100MB-FD 1GB-FD COPPER AUTO_NEG\n     speed: 1000 Mbps now, 1000 Mbps max\n 2(p0): addr:d2:ca:93:d4:d5:0b\n     config:     0\n     state:      0\n     speed: 0 Mbps now, 0 Mbps max\n LOCAL(br0): addr:00:25:90:97:65:b0\n     config:     0\n     state:      0\n     speed: 0 Mbps now, 0 Mbps max\nOFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0\n```\ndpid后面的字符串表示交换机br0的datapath id。\neht0前面的0和p0前面的1表示端口eth0和端口p0的OpenFlow端口的id。\n其他的还有端口名称，端口状态等。\n\n端口的OpenFlow id也可以修改，用`ovs-vsctl set interface p0 ofport_request=id`命令。\n``` bash\n$ ovs-vsctl set interface eth0 ofport_request=100\n$ ovs-vsctl set interface p0 ofport_request=101\n$ ovs-ofctl show br0\nOFPT_FEATURES_REPLY (xid=0x2): dpid:00000025909765b0\nn_tables:254, n_buffers:256\ncapabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IP\nactions: output enqueue set_vlan_vid set_vlan_pcp strip_vlan mod_dl_src mod_dl_dst mod_nw_src mod_nw_dst mod_nw_tos mod_tp_src mod_tp_dst\n 100(eth0): addr:00:25:90:97:65:b0\n     config:     0\n     state:      0\n     current:    1GB-FD COPPER AUTO_NEG\n     advertised: 10MB-HD 10MB-FD 100MB-HD 100MB-FD 1GB-FD COPPER AUTO_NEG AUTO_PAUSE\n     supported:  10MB-HD 10MB-FD 100MB-HD 100MB-FD 1GB-FD COPPER AUTO_NEG\n     speed: 1000 Mbps now, 1000 Mbps max\n 101(p0): addr:fe:07:57:d1:46:f7\n     config:     PORT_DOWN\n     state:      LINK_DOWN\n     speed: 0 Mbps now, 0 Mbps max\n LOCAL(br0): addr:00:25:90:97:65:b0\n     config:     0\n     state:      0\n     speed: 0 Mbps now, 0 Mbps max\nOFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0\n```\n\n``` bash\novs-ofctl add-flow br0 priority,in_port=101,actions=normal\n```\n上面命令在br0上添加了一个流表条目，即一个OpenFlow规则，匹配内容是从端口id为101的端口出来的数据包，匹配成功后的操作为normal，即不做特殊处理。\nprority表示优先级，prority值越高，优先级越高，其取值区间为0-65535，不显示指定的默认值为32768。\n注意：OpenFlow规则语句中不能加空格；如果一定要加空格，整个规则语句必须要双引号括起来。比如：\n``` bash\novs-ofctl add-flow br0 \"priority=10, in_port=101, actions=normal\"\n```\n\n``` bash\n$ ovs-ofctl add-flow br0 in_port=101,actions=normal\n$ ovs-ofctl dump-flows br0\nNXST_FLOW reply (xid=0x4):\n cookie=0x0, duration=11.641s, table=0, n_packets=0, n_bytes=0, idle_age=11, priority,in_port=101 actions=NORMAL\n cookie=0x0, duration=61979.386s, table=0, n_packets=7766539, n_bytes=758342681, idle_age=0, priority=0 actions=NORMAL\n```\n`ovs-ofctl dump-flows br0`命令是查看交换机br0中所有的流表条目。\n上图中出现了两条规则，第二条是我们创建br0时自动生成的，没有任何特殊操作，目的是为了统计数据包信息。\n第一条规则，是我们创建的：\n- duration: 该规则存在的时间\n- table: 属于第0号流表\n- n_packets: 匹配成功的数据包数量\n- n_bytes: 匹配成功的数据包总大小\n- idle_age: 与该规则相关的规则最近一次修改到现在的时间\n我们设置的流表条目没有做任何处理，意义仅仅是统计数据包信息。\n因为p0是虚拟端口，很少流过数据包，所以n_packets的值几乎不变。\n``` bash\nping -I p0 www.baidu.com\n```\n指定p0端口去ping外网，一段时间后去执行`dump-flows`命令，可以看到n_packets的值剧烈增加。\n\n除了`in_port`之外还有其他的匹配模式，除了`normal`之外还有其他的匹配成功的操作，具体可参加上面提到的文章[《基于Open vSwitch的OpenFlow实践》](http://www.ibm.com/developerworks/cn/cloud/library/1401_zhaoyi_openswitch)，还可以参考数据库[ovs-vswitchd.conf.db(5)](http://openvswitch.org/support/dist-docs/ovs-vswitchd.conf.db.5.html)。\n\n其他相关命令还有：\n``` bash\n#查看交换机br0中所有的流表\novs-ofctl dump-tables br0\n\n#删除端口id为101的端口上所有的的流表条目\novs-ofctl del-flows br0 in_port=101\n```\n\n关于OpenFlow的应用不再做更多介绍，可以参考上面列出的两篇文章。\n\n## Open vSwitch的QOS\n\nOpen vSwitch关于QOS的官方资料，主要在：\n- [ovs-vsctl(8)](http://openvswitch.org/support/dist-docs/ovs-vsctl.8.html)\n- [ovs-vswitchd.conf.db(5)](http://openvswitch.org/support/dist-docs/ovs-vswitchd.conf.db.5.html)\n- [Frequently Asked Questions: Quality of Service (QoS)](https://github.com/openvswitch/ovs/blob/master/Documentation/faq/qos.rst)\n- [《Quality of Service (QoS) Rate Limiting》](https://github.com/openvswitch/ovs/blob/master/Documentation/howto/qos.rst)\n\nOpen vSwitch本身并不具备qos功能，是基于linux的\"tc\"功能实现的，是已经在linux内核中存在的功能。\n而Open vSwitch所做的是对其部分支持的tc功能进行配置（因为Open vSwitch不是支持所有的tc功能）。\n如果Open vSwitch不支持你需要的qos功能，那么可以直接使用linux的\"tc\"。\n\n### 策略（Policing）\n在linux的qos中，接收数据包使用的方法叫策略（policing），当速率超过了配置速率，就简单的把数据包丢弃。\n不通过OpenFlow设置，直接在interface上设置。\n[Frequently Asked Questions: Quality of Service (QoS)](https://github.com/openvswitch/ovs/blob/master/Documentation/faq/qos.rst) 中有一个例子：\n``` bash\novs-vsctl set interface vif1.0 ingress_policing_rate=10000\novs-vsctl set interface vif1.0 ingress_policing_burst=8000\n```\n上面两行命令，把虚拟端口vif1.0的最大接收速率设置为10000kbps，桶大小设置为8000kb。\n策略使用了简单的令牌桶（token bucket）算法。\n我们以一定的速度不断生成令牌，除非令牌桶装满。\n每接收一个包，需要消耗一个令牌；如果没有令牌了，就会把新到达的包丢弃。\n（这里用“到达”和“接收”来区别，到达节点的包和其中被接收转发的包。)\n如果到达包的速度大于令牌的生成速度，那么令牌很快消耗干净，新到达的包只能丢弃，那么接收包的速度很快就降下来，和令牌的生成速度一致。\n所以接收包的速度依赖于令牌的生成速度，换句话说，不能大于令牌的生成速度，也就是最大接收速率，即`ingree_policing_rate`的值，单位是kbps。\n如果到达包的速度小于令牌的生成速度，那么令牌很快堆满令牌桶，这时到达包的速度突然增大，令牌桶中有足够的令牌。这一瞬间可供消耗的令牌有桶中的令牌，也有不断生成的令牌，导致接收包的速度也会突然增大，大于令牌的生成速度，也就是大于我们设置的最大接收速率，称为突发接收速率。\n这时虽然突发接收速率大于最大接受速率，但是也是有限制的，最多增加的速率（最大突发接收速率减去最大接收速率）依赖于桶的大小，换句话说，增加的吞吐量不能大于桶的大小，毕竟桶中令牌只有这么多（多余的可供消耗的令牌），即`ingress_policing_burst`的值，单位是kb。\n在上面的例子中，如果所有包的大小都是1kb，那么最多增加的速率达到8000kbps，最大突发接收速率达到18000kbps。\n\n注意：要实现ingress policing，内核必须支持NET_CLS_BASIC，NET_SCH_INGRESS，和NET_ACT_POLICE等模块，而NET_CLS_POLICE不需要，因为已经过时。\n\n### 整形（Shaping）\n在linux的qos中，发送数据包使用的方法叫整形（shaping）。\n与策略的不同之处在于，它使用了队列（queue)，除了丢弃数据包之后，还可以缓存数据包延迟发送，或者调度改变数据包的发送顺序。\n比策略更加精确和有效。\n[Frequently Asked Questions: Quality of Service (QoS)](https://github.com/openvswitch/ovs/blob/master/Documentation/faq/qos.rst) 中有一个例子：\n``` bash\novs-vsctl -- \\\n  add-br br0 -- \\\n  add-port br0 eth0 -- \\\n  add-port br0 vif1.0 -- set interface vif1.0 ofport_request=5 -- \\\n  add-port br0 vif2.0 -- set interface vif2.0 ofport_request=6 -- \\\n  set port eth0 qos=@newqos -- \\\n  --id=@newqos create qos type=linux-htb \\\n      other-config:max-rate=1000000000 \\\n      queues:123=@vif10queue \\\n      queues:234=@vif20queue -- \\\n  --id=@vif10queue create queue other-config:max-rate=10000000 -- \\\n  --id=@vif20queue create queue other-config:max-rate=20000000\n\novs-ofctl add-flow br0 in_port=5,actions=set_queue:123,normal\novs-ofctl add-flow br0 in_port=6,acitons=set_queue:234,normal\n```\n上面的命令，分别把虚拟端口vif1.0，vif2.0的最大发送速率设置为10000000bps和20000000bps。\n第2行，建立了一个网桥br0。\n这里的`--`指当前的命令，即`ovs-vsctl`，是一种省略写法，当然也可以拆开为`ovs-vsctl`的多条命令。后面接`--`，实际是接着下一行，使第3行形成一个完整的命令。\n第3行，把物理网卡端口eth0加入到网桥br0中。\n第4、5行，将虚拟端口vif1.0和vif2.0加入到网桥br0中，并分别设置OpenFlow端口id为5和6。\n第6行，设置eth0的qos规则为\"newqos\"，这里的`@`可以理解为变量或者指针，\"newqos\"这时还没有创建，接下来几行是创建它。\n第7行，用`--id=@`开头，表示创建这个变量或者指针，赋值给它的值是后面语句的返回值。\n后面的`create qos`表示创建了qos规则，将这个qos规则赋值给\"newqos\"，相当于把这个qos规则命名为\"newqos\"。\n这个qos规则的类型是\"linux-htb\"。\n\nqos规则有两个重要属性，分别是type和queues。\n\"tc\"中，队列（queue）分为无类队列，有类队列。\n无类队列只有一条队列，只有一种队列规则（qdisc）；而有类队列分为很多类（class），数据包到达时，根据不同的数据包类型，源目的ip，端口等等属性，被筛选器（filter）划分进不同的类中，不同的类可能有不同的队列规则，不同的类也可以继续划分，嵌套下去。\ntype就相当于不同的队列，具有不同的队列规则；queues就相当于有类队列的不同类。\n\n这里的type值设置为\"linux-htb\"。\nlinux-htb使用了\"tc\"的htb队列（hieratchical token bucket），分层次的令牌桶队列，属于有类队列。\n在无类队列中，最简单的是pfifo_fast队列，采取先入先出的算法，只能延迟数据包发送或丢弃数据包，不能对数据包进行调度，即改变数据包发送顺序。\n还有一种tbf队列（token bucket filter），采取上面提到的令牌桶的算法，而htb就是在tbf的基础上修改为了有类队列，其核心算法还是令牌桶算法。\nOpen vSwitch的qos规则除了提供linux-htb类型，还提供了linux-hfsc类型，对应了\"tc\"中的hsfc队列（hieratchical fair service curve），分层次的公平服务曲线队列，它同时除了针对带宽，还针对延迟对数据包进行调度，其原理参考http://linux-ip.net/articles/hfsc.en 。\n\n第8行，设置了\"newqos\"的一个额外属性，max-rate，表示最大发送速率，和上面的最大接收速率类似，其值为1000000000bps。\n第9、10行，在qos规则中建立了两个queue，分别为vif10queue和vif20queue，key分别为123和234。\n同样使用了`@`，即在第11、12行，创建了queue，并设置了最大发送速率分别为10000000bps和20000000bps，命名为vif10queue和vif20queue。\n这两个queue属于属性queues，可以理解成htb算法中不同的类，它们的队列规则不同之处在于最大发送速率不同。\n第14、15行，为网桥br0添加OpenFlow规则，当数据包用OpenFlow端口id为5的端口（即vif1.0）传递时，使用队列123（即vif10queue）发送；数据包用OpenFlow端口id为6（即vif2.0）传递时，使用队列234（即vif20queue）发送。\n前面的命令全是创建qos规则，但是并没有使用，这两句才是使用qos规则的命令。\n如果没有这两句命令，数据包发送一直使用默认的queue，没有对发送速率的限制。\n\nlinux-htb类型qos规则为queue提供了四种属性，上面只用到了max-rate，除此之外，还有min-rate，burst，priority。\n- min-rate：最低发送速率，保障了最低带宽。\n- burst：桶大小，和policing部分介绍的含义一样，和突峰发送速率相关。\n- priority：优先级，数字越小，优先级越高，默认值为0。数据包发送时，发送优先级高的类里的数据包。\n\n> 注意：openflow规则的priority值越大，优先级越高；而queue的prority值越小，优先级越高。\n\n而linux-hfsc的queue只有max-rate和min-rate两种属性。\n\n同样在整形里面，实际的最大发送速率大于我们设置的最大发送速率，因为有突峰发送速率存在。桶大小和最大突峰发送速率的关系，参看上一节策略部分。\n\nOpen vSwitch和qos功能相关的命令和属性并不多，所以如果无法满足需求，只能直接使用linux的\"tc\"功能。\n\n### 实践\n\n现在来完成一个整形（shaping）的实践：\n``` bash\n#创建网桥br0\nvs-vsctl add-br br0\n\n#创建两个虚拟端口p0和p1\novs-vsctl add-port br0 p0 -- set interface p0 type=internal -- set interface p0 ofport_request=10\novs-vsctl add-port br0 p1 -- set interface p1 type=internal -- set interface p1 ofport_request=11\n\n#把以太网卡eth0加入到网桥br0中\novs-vsctl add-port br0 eth0\n\n#设置ip、网关、路由信息等，使br0能连上外网\nifconfig eth0 0\nifconfig br0 10.18.129.162/16 up\nroute add default gw 10.18.0.254\nroute add -net 169.254.0.0 netmask 255.255.0.0 dev br\n#ip地址10.18.129.162/16是eth0之前的ip地址，现在将其设置到br0上\n#默认网关10.18.0.254和路由169.254.0.0也分别是eth0之前的信息，现在将其设置到br0上\n#另外还要把br0的ip地址设为空，因为不能和br0的ip地址冲突\n#如果该环境是单网卡服务器，最好使用脚本，因为在设置过程中会造成ssh连接断开\n\n#设置两个虚拟端口的ip分别为10.18.200.10/16和10.18.200.11/16\nifconfig p0 10.18.200.10/16 promisc up\nifconfig p1 10.18.200.11/16 promisc up\n\n#清楚现在eth0上qos规则，所有qos规则及queue信息\n#如果是第一次运行，可以不运行这两句命令\novs-vsctl clear port eth0 qos\novs-vsctl -- --all destroy QoS -- --all destroy Queue\n\n#该qos规则创建两个queue，其最大发送速率为100mbps和200mbps，id为123和234\novs-vsctl set port eth0 qos=@newqos -- \\\n--id=@newqos create qos type=linux-htb \\\n        other-config:max-rate=2000000000 \\\n        queues:123=@p0queue \\\n        queues:234=@p1queue -- \\\n--id=@p0queue create queue other-config:max-rate=100000000 -- \\\n--id=@p1queue create queue other-config:max-rate=200000000\n\n#清楚br0上所有用ip匹配的openflow规则\n#如果之前没有类似规则，可以不运行这句命令\novs-ofctl del-flows br0 ip\n\n#在br0上添加两条openflow规则，将源地址为10.18.200.10的ip数据包放入id为123的queue，将源地址为10.18.200.11的ip数据包放入id为234的queue\novs-ofctl add-flow br0 priority=5,ip,nw_src=10.18.200.10,actions=set_queue:123,normal\novs-ofctl add-flow br0 priority=5,ip,nw_src=10.18.200.11,actions=set_queue:234,normal\n#注意：在nw_src/nw_dst/nw_proto等匹配规则前必须加上ip或者icmp关键字\n#必须确认数据包的网络层协议类型才能使用网络层的源地址/目的地址/协议编号匹配，否则不生效\n#同样，在tp_src/mod_tp_dst等匹配规则前也必须加上tcp/udp/sctp等关键字\n#必须确认数据包的传输层协议类型才能使用传输层的源地址/目的地址匹配，否则不生效\n#openflow规则不生效的很有可能的一种原因是其他规则的优先级更高，导致优先匹配了其他规则，即使不生效的规则匹配精度更高。\n```\n\n现在开始发包测试，利用发包测速工具[iperf](iperf.fr) 将数据包发往另一个节点（10.18.129.163）：\n``` bash\n#10.18.129.163\niperf -s -p 12345 -i 1\n\n#10.18.129.162\niperf -c 10.18.129.163 -p 12345 -i 1 -t 30 -B 10.18.200.10 & \\\niperf -c 10.18.129.163 -p 12345 -i 1 -t 30 -B 10.18.200.11\n```\n\n10.18.129.163上显示：\n``` bash\n------------------------------------------------------------\nServer listening on TCP port 12345\nTCP window size: 85.3 KByte (default)\n------------------------------------------------------------\n[  4] local 10.18.129.163 port 12345 connected with 10.18.200.10 port 12345\n[  5] local 10.18.129.163 port 12345 connected with 10.18.200.11 port 12345\n[ ID] Interval       Transfer     Bandwidth\n[  4]  0.0- 1.0 sec  11.9 MBytes   100 Mbits/sec\n[  5]  0.0- 1.0 sec  23.8 MBytes   200 Mbits/sec\n[  4]  1.0- 2.0 sec  11.9 MBytes  99.6 Mbits/sec\n[  5]  1.0- 2.0 sec  23.8 MBytes   200 Mbits/sec\n[  4]  2.0- 3.0 sec  11.9 MBytes  99.8 Mbits/sec\n[  5]  2.0- 3.0 sec  23.8 MBytes   200 Mbits/sec\n[  5]  3.0- 4.0 sec  23.8 MBytes   199 Mbits/sec\n[  4]  3.0- 4.0 sec  11.9 MBytes   100 Mbits/sec\n[  4]  4.0- 5.0 sec  11.9 MBytes  99.6 Mbits/sec\n[  5]  4.0- 5.0 sec  23.8 MBytes   199 Mbits/sec\n[  4]  5.0- 6.0 sec  11.9 MBytes  99.6 Mbits/sec\n[  5]  5.0- 6.0 sec  23.8 MBytes   200 Mbits/sec\n[  4]  6.0- 7.0 sec  11.9 MBytes  99.9 Mbits/sec\n[  5]  6.0- 7.0 sec  23.8 MBytes   199 Mbits/sec\n[  4]  7.0- 8.0 sec  11.9 MBytes  99.8 Mbits/sec\n[  5]  7.0- 8.0 sec  23.8 MBytes   200 Mbits/sec\n[  4]  8.0- 9.0 sec  11.9 MBytes  99.6 Mbits/sec\n[  5]  8.0- 9.0 sec  23.8 MBytes   200 Mbits/sec\n[  4]  9.0-10.0 sec  11.9 MBytes  99.6 Mbits/sec\n[  5]  9.0-10.0 sec  23.8 MBytes   200 Mbits/sec\n[  5] 10.0-11.0 sec  23.8 MBytes   200 Mbits/sec\n[  4] 10.0-11.0 sec  11.9 MBytes   100 Mbits/sec\n[  4] 11.0-12.0 sec  11.9 MBytes  99.5 Mbits/sec\n[  5] 11.0-12.0 sec  23.7 MBytes   199 Mbits/sec\n[  4] 12.0-13.0 sec  11.9 MBytes  99.6 Mbits/sec\n[  5] 12.0-13.0 sec  23.8 MBytes   200 Mbits/sec\n[  4] 13.0-14.0 sec  11.9 MBytes  99.7 Mbits/sec\n[  5] 13.0-14.0 sec  23.7 MBytes   199 Mbits/sec\n[  5] 14.0-15.0 sec  23.8 MBytes   200 Mbits/sec\n[  4] 14.0-15.0 sec  11.9 MBytes   100 Mbits/sec\n[  4] 15.0-16.0 sec  11.9 MBytes  99.5 Mbits/sec\n[  5] 15.0-16.0 sec  23.8 MBytes   200 Mbits/sec\n[  4] 16.0-17.0 sec  11.9 MBytes  99.7 Mbits/sec\n[  5] 16.0-17.0 sec  23.7 MBytes   199 Mbits/sec\n[  4] 17.0-18.0 sec  11.9 MBytes   100 Mbits/sec\n[  5] 17.0-18.0 sec  23.8 MBytes   200 Mbits/sec\n[  5] 18.0-19.0 sec  23.8 MBytes   199 Mbits/sec\n[  4] 18.0-19.0 sec  11.9 MBytes  99.6 Mbits/sec\n[  4] 19.0-20.0 sec  11.9 MBytes  99.6 Mbits/sec\n[  5] 19.0-20.0 sec  23.8 MBytes   199 Mbits/sec\n[  4] 20.0-21.0 sec  11.9 MBytes  99.7 Mbits/sec\n[  5] 20.0-21.0 sec  23.8 MBytes   200 Mbits/sec\n[  4] 21.0-22.0 sec  11.9 MBytes  99.8 Mbits/sec\n[  5] 21.0-22.0 sec  23.7 MBytes   199 Mbits/sec\n[  4] 22.0-23.0 sec  11.9 MBytes  99.6 Mbits/sec\n[  5] 22.0-23.0 sec  23.8 MBytes   200 Mbits/sec\n[  4] 23.0-24.0 sec  11.9 MBytes   100 Mbits/sec\n[  5] 23.0-24.0 sec  23.8 MBytes   200 Mbits/sec\n[  4] 24.0-25.0 sec  11.9 MBytes  99.6 Mbits/sec\n[  5] 24.0-25.0 sec  23.8 MBytes   199 Mbits/sec\n[  4] 25.0-26.0 sec  11.9 MBytes  99.6 Mbits/sec\n[  5] 25.0-26.0 sec  23.8 MBytes   200 Mbits/sec\n[  4] 26.0-27.0 sec  11.9 MBytes   100 Mbits/sec\n[  5] 26.0-27.0 sec  23.8 MBytes   200 Mbits/sec\n[  4] 27.0-28.0 sec  11.9 MBytes  99.6 Mbits/sec\n[  5] 27.0-28.0 sec  23.8 MBytes   199 Mbits/sec\n[  4] 28.0-29.0 sec  11.9 MBytes  99.6 Mbits/sec\n[  5] 28.0-29.0 sec  23.8 MBytes   200 Mbits/sec\n[  4] 29.0-30.0 sec  11.9 MBytes  99.7 Mbits/sec\n[  5] 29.0-30.0 sec  23.8 MBytes   200 Mbits/sec\n[  5]  0.0-30.2 sec   718 MBytes   200 Mbits/sec\n[  4]  0.0-30.3 sec   361 MBytes  99.7 Mbits/sec\n```\n可以看到最后的qos结果非常好。\n节点10.18.129.162的两个进程使用两个不同的ip，占用两个不同的queue同时向节点10.18.129.163发包，接收方接收到数据包的带宽分别为200Mbps和99.7Mbps，符合之前发送方设置的200Mbps和100Mbps的最大发送速率。\n\n* 注：Open vSwitch官方文档的github地址在不断变动，上述超链接可能失效，请在http://openvswitch.org 和https://github.com/openvswitch/ovs 查找。\n \n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n\n","source":"_posts/openvswitch-qos.md","raw":"title: Open vSwitch的OpenFlow和QOS\ntoc: true\ndate: 2016-11-24 14:41:03\ntags:\n- openvswitch\n- openflow\ncategories: openvswitch\n---\n\nOpenFlow协议是一种网络通信协议，属于数据链路层，可以控制几换几或者路由器的转发平面（forwarding plane)，借此改变网络数据包所走的网络路径。\nOpen vSwitch支持OpenFlow协议，就可以控制数据包的走向，还可以修改源目的地址，支持QOS（Quality of Service）等。\n本文主要介绍Open vSwitch配置OpenFlow协议以及对QOS的支持。\n\n<!--more-->\n**Title: [Open vSwitch的OpenFlow和QOS](https://aidaizyy.github.io/openvswitch-qos)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2016-12-26](http://aidaizyy.github.io)**\n\n## OpenFlow基本应用\n\n这里有两篇参考文章，已经写得非常详细了：\n- [《基于Open vSwitch的OpenFlow实践》](http://www.ibm.com/developerworks/cn/cloud/library/1401_zhaoyi_openswitch)\n- [Open vSwitch Advanced Features](https://github.com/openvswitch/ovs/blob/master/Documentation/tutorials/ovs-advanced.rst)\n\n交换机包括一个或多个流表，流表中的条目主要包括数据包要匹配的信息，匹配成功后要执行的操作和统计信息三部分。\n\n``` bash\novs-vsctl add-br br0\novs-vsctl add-port br0 p0 -- set interface p0 type=internal\novs-vsctl add-port br0 eth0\n```\n创建网桥br0，并添加虚拟端口p0和以太网端口eth0。\n再对br0进行网络配置，使其能上外网，并将p0 up。（参考上一篇博文[《Open vSwitch安装与使用》](http://aidaiz.com/openvswitch-build)。）\n\n`ovs-ofctl`是OpenFlow相关命令，详细参考`man ovs-ofctl`。\n`ovs-ofctl show br0`命令是显示交换机br0的端口信息。\n``` bash\n$ ovs-ofctl show br0\nFPT_FEATURES_REPLY (xid=0x2): dpid:00000025909765b0\nn_tables:254, n_buffers:256\ncapabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IP\nactions: output enqueue set_vlan_vid set_vlan_pcp strip_vlan mod_dl_src mod_dl_dst mod_nw_src mod_nw_dst mod_nw_tos mod_tp_src mod_tp_dst\n 1(eth0): addr:00:25:90:97:65:b0\n     config:     0\n     state:      0\n     current:    1GB-FD COPPER AUTO_NEG\n     advertised: 10MB-HD 10MB-FD 100MB-HD 100MB-FD 1GB-FD COPPER AUTO_NEG AUTO_PAUSE\n     supported:  10MB-HD 10MB-FD 100MB-HD 100MB-FD 1GB-FD COPPER AUTO_NEG\n     speed: 1000 Mbps now, 1000 Mbps max\n 2(p0): addr:d2:ca:93:d4:d5:0b\n     config:     0\n     state:      0\n     speed: 0 Mbps now, 0 Mbps max\n LOCAL(br0): addr:00:25:90:97:65:b0\n     config:     0\n     state:      0\n     speed: 0 Mbps now, 0 Mbps max\nOFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0\n```\ndpid后面的字符串表示交换机br0的datapath id。\neht0前面的0和p0前面的1表示端口eth0和端口p0的OpenFlow端口的id。\n其他的还有端口名称，端口状态等。\n\n端口的OpenFlow id也可以修改，用`ovs-vsctl set interface p0 ofport_request=id`命令。\n``` bash\n$ ovs-vsctl set interface eth0 ofport_request=100\n$ ovs-vsctl set interface p0 ofport_request=101\n$ ovs-ofctl show br0\nOFPT_FEATURES_REPLY (xid=0x2): dpid:00000025909765b0\nn_tables:254, n_buffers:256\ncapabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IP\nactions: output enqueue set_vlan_vid set_vlan_pcp strip_vlan mod_dl_src mod_dl_dst mod_nw_src mod_nw_dst mod_nw_tos mod_tp_src mod_tp_dst\n 100(eth0): addr:00:25:90:97:65:b0\n     config:     0\n     state:      0\n     current:    1GB-FD COPPER AUTO_NEG\n     advertised: 10MB-HD 10MB-FD 100MB-HD 100MB-FD 1GB-FD COPPER AUTO_NEG AUTO_PAUSE\n     supported:  10MB-HD 10MB-FD 100MB-HD 100MB-FD 1GB-FD COPPER AUTO_NEG\n     speed: 1000 Mbps now, 1000 Mbps max\n 101(p0): addr:fe:07:57:d1:46:f7\n     config:     PORT_DOWN\n     state:      LINK_DOWN\n     speed: 0 Mbps now, 0 Mbps max\n LOCAL(br0): addr:00:25:90:97:65:b0\n     config:     0\n     state:      0\n     speed: 0 Mbps now, 0 Mbps max\nOFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0\n```\n\n``` bash\novs-ofctl add-flow br0 priority,in_port=101,actions=normal\n```\n上面命令在br0上添加了一个流表条目，即一个OpenFlow规则，匹配内容是从端口id为101的端口出来的数据包，匹配成功后的操作为normal，即不做特殊处理。\nprority表示优先级，prority值越高，优先级越高，其取值区间为0-65535，不显示指定的默认值为32768。\n注意：OpenFlow规则语句中不能加空格；如果一定要加空格，整个规则语句必须要双引号括起来。比如：\n``` bash\novs-ofctl add-flow br0 \"priority=10, in_port=101, actions=normal\"\n```\n\n``` bash\n$ ovs-ofctl add-flow br0 in_port=101,actions=normal\n$ ovs-ofctl dump-flows br0\nNXST_FLOW reply (xid=0x4):\n cookie=0x0, duration=11.641s, table=0, n_packets=0, n_bytes=0, idle_age=11, priority,in_port=101 actions=NORMAL\n cookie=0x0, duration=61979.386s, table=0, n_packets=7766539, n_bytes=758342681, idle_age=0, priority=0 actions=NORMAL\n```\n`ovs-ofctl dump-flows br0`命令是查看交换机br0中所有的流表条目。\n上图中出现了两条规则，第二条是我们创建br0时自动生成的，没有任何特殊操作，目的是为了统计数据包信息。\n第一条规则，是我们创建的：\n- duration: 该规则存在的时间\n- table: 属于第0号流表\n- n_packets: 匹配成功的数据包数量\n- n_bytes: 匹配成功的数据包总大小\n- idle_age: 与该规则相关的规则最近一次修改到现在的时间\n我们设置的流表条目没有做任何处理，意义仅仅是统计数据包信息。\n因为p0是虚拟端口，很少流过数据包，所以n_packets的值几乎不变。\n``` bash\nping -I p0 www.baidu.com\n```\n指定p0端口去ping外网，一段时间后去执行`dump-flows`命令，可以看到n_packets的值剧烈增加。\n\n除了`in_port`之外还有其他的匹配模式，除了`normal`之外还有其他的匹配成功的操作，具体可参加上面提到的文章[《基于Open vSwitch的OpenFlow实践》](http://www.ibm.com/developerworks/cn/cloud/library/1401_zhaoyi_openswitch)，还可以参考数据库[ovs-vswitchd.conf.db(5)](http://openvswitch.org/support/dist-docs/ovs-vswitchd.conf.db.5.html)。\n\n其他相关命令还有：\n``` bash\n#查看交换机br0中所有的流表\novs-ofctl dump-tables br0\n\n#删除端口id为101的端口上所有的的流表条目\novs-ofctl del-flows br0 in_port=101\n```\n\n关于OpenFlow的应用不再做更多介绍，可以参考上面列出的两篇文章。\n\n## Open vSwitch的QOS\n\nOpen vSwitch关于QOS的官方资料，主要在：\n- [ovs-vsctl(8)](http://openvswitch.org/support/dist-docs/ovs-vsctl.8.html)\n- [ovs-vswitchd.conf.db(5)](http://openvswitch.org/support/dist-docs/ovs-vswitchd.conf.db.5.html)\n- [Frequently Asked Questions: Quality of Service (QoS)](https://github.com/openvswitch/ovs/blob/master/Documentation/faq/qos.rst)\n- [《Quality of Service (QoS) Rate Limiting》](https://github.com/openvswitch/ovs/blob/master/Documentation/howto/qos.rst)\n\nOpen vSwitch本身并不具备qos功能，是基于linux的\"tc\"功能实现的，是已经在linux内核中存在的功能。\n而Open vSwitch所做的是对其部分支持的tc功能进行配置（因为Open vSwitch不是支持所有的tc功能）。\n如果Open vSwitch不支持你需要的qos功能，那么可以直接使用linux的\"tc\"。\n\n### 策略（Policing）\n在linux的qos中，接收数据包使用的方法叫策略（policing），当速率超过了配置速率，就简单的把数据包丢弃。\n不通过OpenFlow设置，直接在interface上设置。\n[Frequently Asked Questions: Quality of Service (QoS)](https://github.com/openvswitch/ovs/blob/master/Documentation/faq/qos.rst) 中有一个例子：\n``` bash\novs-vsctl set interface vif1.0 ingress_policing_rate=10000\novs-vsctl set interface vif1.0 ingress_policing_burst=8000\n```\n上面两行命令，把虚拟端口vif1.0的最大接收速率设置为10000kbps，桶大小设置为8000kb。\n策略使用了简单的令牌桶（token bucket）算法。\n我们以一定的速度不断生成令牌，除非令牌桶装满。\n每接收一个包，需要消耗一个令牌；如果没有令牌了，就会把新到达的包丢弃。\n（这里用“到达”和“接收”来区别，到达节点的包和其中被接收转发的包。)\n如果到达包的速度大于令牌的生成速度，那么令牌很快消耗干净，新到达的包只能丢弃，那么接收包的速度很快就降下来，和令牌的生成速度一致。\n所以接收包的速度依赖于令牌的生成速度，换句话说，不能大于令牌的生成速度，也就是最大接收速率，即`ingree_policing_rate`的值，单位是kbps。\n如果到达包的速度小于令牌的生成速度，那么令牌很快堆满令牌桶，这时到达包的速度突然增大，令牌桶中有足够的令牌。这一瞬间可供消耗的令牌有桶中的令牌，也有不断生成的令牌，导致接收包的速度也会突然增大，大于令牌的生成速度，也就是大于我们设置的最大接收速率，称为突发接收速率。\n这时虽然突发接收速率大于最大接受速率，但是也是有限制的，最多增加的速率（最大突发接收速率减去最大接收速率）依赖于桶的大小，换句话说，增加的吞吐量不能大于桶的大小，毕竟桶中令牌只有这么多（多余的可供消耗的令牌），即`ingress_policing_burst`的值，单位是kb。\n在上面的例子中，如果所有包的大小都是1kb，那么最多增加的速率达到8000kbps，最大突发接收速率达到18000kbps。\n\n注意：要实现ingress policing，内核必须支持NET_CLS_BASIC，NET_SCH_INGRESS，和NET_ACT_POLICE等模块，而NET_CLS_POLICE不需要，因为已经过时。\n\n### 整形（Shaping）\n在linux的qos中，发送数据包使用的方法叫整形（shaping）。\n与策略的不同之处在于，它使用了队列（queue)，除了丢弃数据包之后，还可以缓存数据包延迟发送，或者调度改变数据包的发送顺序。\n比策略更加精确和有效。\n[Frequently Asked Questions: Quality of Service (QoS)](https://github.com/openvswitch/ovs/blob/master/Documentation/faq/qos.rst) 中有一个例子：\n``` bash\novs-vsctl -- \\\n  add-br br0 -- \\\n  add-port br0 eth0 -- \\\n  add-port br0 vif1.0 -- set interface vif1.0 ofport_request=5 -- \\\n  add-port br0 vif2.0 -- set interface vif2.0 ofport_request=6 -- \\\n  set port eth0 qos=@newqos -- \\\n  --id=@newqos create qos type=linux-htb \\\n      other-config:max-rate=1000000000 \\\n      queues:123=@vif10queue \\\n      queues:234=@vif20queue -- \\\n  --id=@vif10queue create queue other-config:max-rate=10000000 -- \\\n  --id=@vif20queue create queue other-config:max-rate=20000000\n\novs-ofctl add-flow br0 in_port=5,actions=set_queue:123,normal\novs-ofctl add-flow br0 in_port=6,acitons=set_queue:234,normal\n```\n上面的命令，分别把虚拟端口vif1.0，vif2.0的最大发送速率设置为10000000bps和20000000bps。\n第2行，建立了一个网桥br0。\n这里的`--`指当前的命令，即`ovs-vsctl`，是一种省略写法，当然也可以拆开为`ovs-vsctl`的多条命令。后面接`--`，实际是接着下一行，使第3行形成一个完整的命令。\n第3行，把物理网卡端口eth0加入到网桥br0中。\n第4、5行，将虚拟端口vif1.0和vif2.0加入到网桥br0中，并分别设置OpenFlow端口id为5和6。\n第6行，设置eth0的qos规则为\"newqos\"，这里的`@`可以理解为变量或者指针，\"newqos\"这时还没有创建，接下来几行是创建它。\n第7行，用`--id=@`开头，表示创建这个变量或者指针，赋值给它的值是后面语句的返回值。\n后面的`create qos`表示创建了qos规则，将这个qos规则赋值给\"newqos\"，相当于把这个qos规则命名为\"newqos\"。\n这个qos规则的类型是\"linux-htb\"。\n\nqos规则有两个重要属性，分别是type和queues。\n\"tc\"中，队列（queue）分为无类队列，有类队列。\n无类队列只有一条队列，只有一种队列规则（qdisc）；而有类队列分为很多类（class），数据包到达时，根据不同的数据包类型，源目的ip，端口等等属性，被筛选器（filter）划分进不同的类中，不同的类可能有不同的队列规则，不同的类也可以继续划分，嵌套下去。\ntype就相当于不同的队列，具有不同的队列规则；queues就相当于有类队列的不同类。\n\n这里的type值设置为\"linux-htb\"。\nlinux-htb使用了\"tc\"的htb队列（hieratchical token bucket），分层次的令牌桶队列，属于有类队列。\n在无类队列中，最简单的是pfifo_fast队列，采取先入先出的算法，只能延迟数据包发送或丢弃数据包，不能对数据包进行调度，即改变数据包发送顺序。\n还有一种tbf队列（token bucket filter），采取上面提到的令牌桶的算法，而htb就是在tbf的基础上修改为了有类队列，其核心算法还是令牌桶算法。\nOpen vSwitch的qos规则除了提供linux-htb类型，还提供了linux-hfsc类型，对应了\"tc\"中的hsfc队列（hieratchical fair service curve），分层次的公平服务曲线队列，它同时除了针对带宽，还针对延迟对数据包进行调度，其原理参考http://linux-ip.net/articles/hfsc.en 。\n\n第8行，设置了\"newqos\"的一个额外属性，max-rate，表示最大发送速率，和上面的最大接收速率类似，其值为1000000000bps。\n第9、10行，在qos规则中建立了两个queue，分别为vif10queue和vif20queue，key分别为123和234。\n同样使用了`@`，即在第11、12行，创建了queue，并设置了最大发送速率分别为10000000bps和20000000bps，命名为vif10queue和vif20queue。\n这两个queue属于属性queues，可以理解成htb算法中不同的类，它们的队列规则不同之处在于最大发送速率不同。\n第14、15行，为网桥br0添加OpenFlow规则，当数据包用OpenFlow端口id为5的端口（即vif1.0）传递时，使用队列123（即vif10queue）发送；数据包用OpenFlow端口id为6（即vif2.0）传递时，使用队列234（即vif20queue）发送。\n前面的命令全是创建qos规则，但是并没有使用，这两句才是使用qos规则的命令。\n如果没有这两句命令，数据包发送一直使用默认的queue，没有对发送速率的限制。\n\nlinux-htb类型qos规则为queue提供了四种属性，上面只用到了max-rate，除此之外，还有min-rate，burst，priority。\n- min-rate：最低发送速率，保障了最低带宽。\n- burst：桶大小，和policing部分介绍的含义一样，和突峰发送速率相关。\n- priority：优先级，数字越小，优先级越高，默认值为0。数据包发送时，发送优先级高的类里的数据包。\n\n> 注意：openflow规则的priority值越大，优先级越高；而queue的prority值越小，优先级越高。\n\n而linux-hfsc的queue只有max-rate和min-rate两种属性。\n\n同样在整形里面，实际的最大发送速率大于我们设置的最大发送速率，因为有突峰发送速率存在。桶大小和最大突峰发送速率的关系，参看上一节策略部分。\n\nOpen vSwitch和qos功能相关的命令和属性并不多，所以如果无法满足需求，只能直接使用linux的\"tc\"功能。\n\n### 实践\n\n现在来完成一个整形（shaping）的实践：\n``` bash\n#创建网桥br0\nvs-vsctl add-br br0\n\n#创建两个虚拟端口p0和p1\novs-vsctl add-port br0 p0 -- set interface p0 type=internal -- set interface p0 ofport_request=10\novs-vsctl add-port br0 p1 -- set interface p1 type=internal -- set interface p1 ofport_request=11\n\n#把以太网卡eth0加入到网桥br0中\novs-vsctl add-port br0 eth0\n\n#设置ip、网关、路由信息等，使br0能连上外网\nifconfig eth0 0\nifconfig br0 10.18.129.162/16 up\nroute add default gw 10.18.0.254\nroute add -net 169.254.0.0 netmask 255.255.0.0 dev br\n#ip地址10.18.129.162/16是eth0之前的ip地址，现在将其设置到br0上\n#默认网关10.18.0.254和路由169.254.0.0也分别是eth0之前的信息，现在将其设置到br0上\n#另外还要把br0的ip地址设为空，因为不能和br0的ip地址冲突\n#如果该环境是单网卡服务器，最好使用脚本，因为在设置过程中会造成ssh连接断开\n\n#设置两个虚拟端口的ip分别为10.18.200.10/16和10.18.200.11/16\nifconfig p0 10.18.200.10/16 promisc up\nifconfig p1 10.18.200.11/16 promisc up\n\n#清楚现在eth0上qos规则，所有qos规则及queue信息\n#如果是第一次运行，可以不运行这两句命令\novs-vsctl clear port eth0 qos\novs-vsctl -- --all destroy QoS -- --all destroy Queue\n\n#该qos规则创建两个queue，其最大发送速率为100mbps和200mbps，id为123和234\novs-vsctl set port eth0 qos=@newqos -- \\\n--id=@newqos create qos type=linux-htb \\\n        other-config:max-rate=2000000000 \\\n        queues:123=@p0queue \\\n        queues:234=@p1queue -- \\\n--id=@p0queue create queue other-config:max-rate=100000000 -- \\\n--id=@p1queue create queue other-config:max-rate=200000000\n\n#清楚br0上所有用ip匹配的openflow规则\n#如果之前没有类似规则，可以不运行这句命令\novs-ofctl del-flows br0 ip\n\n#在br0上添加两条openflow规则，将源地址为10.18.200.10的ip数据包放入id为123的queue，将源地址为10.18.200.11的ip数据包放入id为234的queue\novs-ofctl add-flow br0 priority=5,ip,nw_src=10.18.200.10,actions=set_queue:123,normal\novs-ofctl add-flow br0 priority=5,ip,nw_src=10.18.200.11,actions=set_queue:234,normal\n#注意：在nw_src/nw_dst/nw_proto等匹配规则前必须加上ip或者icmp关键字\n#必须确认数据包的网络层协议类型才能使用网络层的源地址/目的地址/协议编号匹配，否则不生效\n#同样，在tp_src/mod_tp_dst等匹配规则前也必须加上tcp/udp/sctp等关键字\n#必须确认数据包的传输层协议类型才能使用传输层的源地址/目的地址匹配，否则不生效\n#openflow规则不生效的很有可能的一种原因是其他规则的优先级更高，导致优先匹配了其他规则，即使不生效的规则匹配精度更高。\n```\n\n现在开始发包测试，利用发包测速工具[iperf](iperf.fr) 将数据包发往另一个节点（10.18.129.163）：\n``` bash\n#10.18.129.163\niperf -s -p 12345 -i 1\n\n#10.18.129.162\niperf -c 10.18.129.163 -p 12345 -i 1 -t 30 -B 10.18.200.10 & \\\niperf -c 10.18.129.163 -p 12345 -i 1 -t 30 -B 10.18.200.11\n```\n\n10.18.129.163上显示：\n``` bash\n------------------------------------------------------------\nServer listening on TCP port 12345\nTCP window size: 85.3 KByte (default)\n------------------------------------------------------------\n[  4] local 10.18.129.163 port 12345 connected with 10.18.200.10 port 12345\n[  5] local 10.18.129.163 port 12345 connected with 10.18.200.11 port 12345\n[ ID] Interval       Transfer     Bandwidth\n[  4]  0.0- 1.0 sec  11.9 MBytes   100 Mbits/sec\n[  5]  0.0- 1.0 sec  23.8 MBytes   200 Mbits/sec\n[  4]  1.0- 2.0 sec  11.9 MBytes  99.6 Mbits/sec\n[  5]  1.0- 2.0 sec  23.8 MBytes   200 Mbits/sec\n[  4]  2.0- 3.0 sec  11.9 MBytes  99.8 Mbits/sec\n[  5]  2.0- 3.0 sec  23.8 MBytes   200 Mbits/sec\n[  5]  3.0- 4.0 sec  23.8 MBytes   199 Mbits/sec\n[  4]  3.0- 4.0 sec  11.9 MBytes   100 Mbits/sec\n[  4]  4.0- 5.0 sec  11.9 MBytes  99.6 Mbits/sec\n[  5]  4.0- 5.0 sec  23.8 MBytes   199 Mbits/sec\n[  4]  5.0- 6.0 sec  11.9 MBytes  99.6 Mbits/sec\n[  5]  5.0- 6.0 sec  23.8 MBytes   200 Mbits/sec\n[  4]  6.0- 7.0 sec  11.9 MBytes  99.9 Mbits/sec\n[  5]  6.0- 7.0 sec  23.8 MBytes   199 Mbits/sec\n[  4]  7.0- 8.0 sec  11.9 MBytes  99.8 Mbits/sec\n[  5]  7.0- 8.0 sec  23.8 MBytes   200 Mbits/sec\n[  4]  8.0- 9.0 sec  11.9 MBytes  99.6 Mbits/sec\n[  5]  8.0- 9.0 sec  23.8 MBytes   200 Mbits/sec\n[  4]  9.0-10.0 sec  11.9 MBytes  99.6 Mbits/sec\n[  5]  9.0-10.0 sec  23.8 MBytes   200 Mbits/sec\n[  5] 10.0-11.0 sec  23.8 MBytes   200 Mbits/sec\n[  4] 10.0-11.0 sec  11.9 MBytes   100 Mbits/sec\n[  4] 11.0-12.0 sec  11.9 MBytes  99.5 Mbits/sec\n[  5] 11.0-12.0 sec  23.7 MBytes   199 Mbits/sec\n[  4] 12.0-13.0 sec  11.9 MBytes  99.6 Mbits/sec\n[  5] 12.0-13.0 sec  23.8 MBytes   200 Mbits/sec\n[  4] 13.0-14.0 sec  11.9 MBytes  99.7 Mbits/sec\n[  5] 13.0-14.0 sec  23.7 MBytes   199 Mbits/sec\n[  5] 14.0-15.0 sec  23.8 MBytes   200 Mbits/sec\n[  4] 14.0-15.0 sec  11.9 MBytes   100 Mbits/sec\n[  4] 15.0-16.0 sec  11.9 MBytes  99.5 Mbits/sec\n[  5] 15.0-16.0 sec  23.8 MBytes   200 Mbits/sec\n[  4] 16.0-17.0 sec  11.9 MBytes  99.7 Mbits/sec\n[  5] 16.0-17.0 sec  23.7 MBytes   199 Mbits/sec\n[  4] 17.0-18.0 sec  11.9 MBytes   100 Mbits/sec\n[  5] 17.0-18.0 sec  23.8 MBytes   200 Mbits/sec\n[  5] 18.0-19.0 sec  23.8 MBytes   199 Mbits/sec\n[  4] 18.0-19.0 sec  11.9 MBytes  99.6 Mbits/sec\n[  4] 19.0-20.0 sec  11.9 MBytes  99.6 Mbits/sec\n[  5] 19.0-20.0 sec  23.8 MBytes   199 Mbits/sec\n[  4] 20.0-21.0 sec  11.9 MBytes  99.7 Mbits/sec\n[  5] 20.0-21.0 sec  23.8 MBytes   200 Mbits/sec\n[  4] 21.0-22.0 sec  11.9 MBytes  99.8 Mbits/sec\n[  5] 21.0-22.0 sec  23.7 MBytes   199 Mbits/sec\n[  4] 22.0-23.0 sec  11.9 MBytes  99.6 Mbits/sec\n[  5] 22.0-23.0 sec  23.8 MBytes   200 Mbits/sec\n[  4] 23.0-24.0 sec  11.9 MBytes   100 Mbits/sec\n[  5] 23.0-24.0 sec  23.8 MBytes   200 Mbits/sec\n[  4] 24.0-25.0 sec  11.9 MBytes  99.6 Mbits/sec\n[  5] 24.0-25.0 sec  23.8 MBytes   199 Mbits/sec\n[  4] 25.0-26.0 sec  11.9 MBytes  99.6 Mbits/sec\n[  5] 25.0-26.0 sec  23.8 MBytes   200 Mbits/sec\n[  4] 26.0-27.0 sec  11.9 MBytes   100 Mbits/sec\n[  5] 26.0-27.0 sec  23.8 MBytes   200 Mbits/sec\n[  4] 27.0-28.0 sec  11.9 MBytes  99.6 Mbits/sec\n[  5] 27.0-28.0 sec  23.8 MBytes   199 Mbits/sec\n[  4] 28.0-29.0 sec  11.9 MBytes  99.6 Mbits/sec\n[  5] 28.0-29.0 sec  23.8 MBytes   200 Mbits/sec\n[  4] 29.0-30.0 sec  11.9 MBytes  99.7 Mbits/sec\n[  5] 29.0-30.0 sec  23.8 MBytes   200 Mbits/sec\n[  5]  0.0-30.2 sec   718 MBytes   200 Mbits/sec\n[  4]  0.0-30.3 sec   361 MBytes  99.7 Mbits/sec\n```\n可以看到最后的qos结果非常好。\n节点10.18.129.162的两个进程使用两个不同的ip，占用两个不同的queue同时向节点10.18.129.163发包，接收方接收到数据包的带宽分别为200Mbps和99.7Mbps，符合之前发送方设置的200Mbps和100Mbps的最大发送速率。\n\n* 注：Open vSwitch官方文档的github地址在不断变动，上述超链接可能失效，请在http://openvswitch.org 和https://github.com/openvswitch/ovs 查找。\n \n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n\n","slug":"openvswitch-qos","published":1,"updated":"2017-05-08T16:40:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2gdu6jp000ev1o3t19g3lte","content":"<p>OpenFlow协议是一种网络通信协议，属于数据链路层，可以控制几换几或者路由器的转发平面（forwarding plane)，借此改变网络数据包所走的网络路径。<br>Open vSwitch支持OpenFlow协议，就可以控制数据包的走向，还可以修改源目的地址，支持QOS（Quality of Service）等。<br>本文主要介绍Open vSwitch配置OpenFlow协议以及对QOS的支持。</p>\n<a id=\"more\"></a>\n<p><strong>Title: <a href=\"https://aidaizyy.github.io/openvswitch-qos\" target=\"_blank\" rel=\"external\">Open vSwitch的OpenFlow和QOS</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#109;&#x61;&#105;&#x6c;&#116;&#x6f;&#58;&#x61;&#x69;&#100;&#x61;&#105;&#x7a;&#x79;&#121;&#64;&#x67;&#109;&#x61;&#x69;&#108;&#46;&#99;&#111;&#109;\">&#x61;&#x69;&#100;&#x61;&#105;&#x7a;&#x79;&#121;&#64;&#x67;&#109;&#x61;&#x69;&#108;&#46;&#99;&#111;&#109;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2016-12-26</a></strong></p>\n<h2 id=\"OpenFlow基本应用\"><a href=\"#OpenFlow基本应用\" class=\"headerlink\" title=\"OpenFlow基本应用\"></a>OpenFlow基本应用</h2><p>这里有两篇参考文章，已经写得非常详细了：</p>\n<ul>\n<li><a href=\"http://www.ibm.com/developerworks/cn/cloud/library/1401_zhaoyi_openswitch\" target=\"_blank\" rel=\"external\">《基于Open vSwitch的OpenFlow实践》</a></li>\n<li><a href=\"https://github.com/openvswitch/ovs/blob/master/Documentation/tutorials/ovs-advanced.rst\" target=\"_blank\" rel=\"external\">Open vSwitch Advanced Features</a></li>\n</ul>\n<p>交换机包括一个或多个流表，流表中的条目主要包括数据包要匹配的信息，匹配成功后要执行的操作和统计信息三部分。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ovs-vsctl add-br br0</div><div class=\"line\">ovs-vsctl add-port br0 p0 -- <span class=\"built_in\">set</span> interface p0 <span class=\"built_in\">type</span>=internal</div><div class=\"line\">ovs-vsctl add-port br0 eth0</div></pre></td></tr></table></figure>\n<p>创建网桥br0，并添加虚拟端口p0和以太网端口eth0。<br>再对br0进行网络配置，使其能上外网，并将p0 up。（参考上一篇博文<a href=\"http://aidaiz.com/openvswitch-build\">《Open vSwitch安装与使用》</a>。）</p>\n<p><code>ovs-ofctl</code>是OpenFlow相关命令，详细参考<code>man ovs-ofctl</code>。<br><code>ovs-ofctl show br0</code>命令是显示交换机br0的端口信息。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ovs-ofctl show br0</div><div class=\"line\">FPT_FEATURES_REPLY (xid=0x2): dpid:00000025909765b0</div><div class=\"line\">n_tables:254, n_buffers:256</div><div class=\"line\">capabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IP</div><div class=\"line\">actions: output enqueue set_vlan_vid set_vlan_pcp strip_vlan mod_dl_src mod_dl_dst mod_nw_src mod_nw_dst mod_nw_tos mod_tp_src mod_tp_dst</div><div class=\"line\"> 1(eth0): addr:00:25:90:97:65:b0</div><div class=\"line\">     config:     0</div><div class=\"line\">     state:      0</div><div class=\"line\">     current:    1GB-FD COPPER AUTO_NEG</div><div class=\"line\">     advertised: 10MB-HD 10MB-FD 100MB-HD 100MB-FD 1GB-FD COPPER AUTO_NEG AUTO_PAUSE</div><div class=\"line\">     supported:  10MB-HD 10MB-FD 100MB-HD 100MB-FD 1GB-FD COPPER AUTO_NEG</div><div class=\"line\">     speed: 1000 Mbps now, 1000 Mbps max</div><div class=\"line\"> 2(p0): addr:d2:ca:93:d4:d5:0b</div><div class=\"line\">     config:     0</div><div class=\"line\">     state:      0</div><div class=\"line\">     speed: 0 Mbps now, 0 Mbps max</div><div class=\"line\"> LOCAL(br0): addr:00:25:90:97:65:b0</div><div class=\"line\">     config:     0</div><div class=\"line\">     state:      0</div><div class=\"line\">     speed: 0 Mbps now, 0 Mbps max</div><div class=\"line\">OFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0</div></pre></td></tr></table></figure></p>\n<p>dpid后面的字符串表示交换机br0的datapath id。<br>eht0前面的0和p0前面的1表示端口eth0和端口p0的OpenFlow端口的id。<br>其他的还有端口名称，端口状态等。</p>\n<p>端口的OpenFlow id也可以修改，用<code>ovs-vsctl set interface p0 ofport_request=id</code>命令。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ovs-vsctl <span class=\"built_in\">set</span> interface eth0 ofport_request=100</div><div class=\"line\">$ ovs-vsctl <span class=\"built_in\">set</span> interface p0 ofport_request=101</div><div class=\"line\">$ ovs-ofctl show br0</div><div class=\"line\">OFPT_FEATURES_REPLY (xid=0x2): dpid:00000025909765b0</div><div class=\"line\">n_tables:254, n_buffers:256</div><div class=\"line\">capabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IP</div><div class=\"line\">actions: output enqueue set_vlan_vid set_vlan_pcp strip_vlan mod_dl_src mod_dl_dst mod_nw_src mod_nw_dst mod_nw_tos mod_tp_src mod_tp_dst</div><div class=\"line\"> 100(eth0): addr:00:25:90:97:65:b0</div><div class=\"line\">     config:     0</div><div class=\"line\">     state:      0</div><div class=\"line\">     current:    1GB-FD COPPER AUTO_NEG</div><div class=\"line\">     advertised: 10MB-HD 10MB-FD 100MB-HD 100MB-FD 1GB-FD COPPER AUTO_NEG AUTO_PAUSE</div><div class=\"line\">     supported:  10MB-HD 10MB-FD 100MB-HD 100MB-FD 1GB-FD COPPER AUTO_NEG</div><div class=\"line\">     speed: 1000 Mbps now, 1000 Mbps max</div><div class=\"line\"> 101(p0): addr:fe:07:57:d1:46:f7</div><div class=\"line\">     config:     PORT_DOWN</div><div class=\"line\">     state:      LINK_DOWN</div><div class=\"line\">     speed: 0 Mbps now, 0 Mbps max</div><div class=\"line\"> LOCAL(br0): addr:00:25:90:97:65:b0</div><div class=\"line\">     config:     0</div><div class=\"line\">     state:      0</div><div class=\"line\">     speed: 0 Mbps now, 0 Mbps max</div><div class=\"line\">OFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ovs-ofctl add-flow br0 priority,in_port=101,actions=normal</div></pre></td></tr></table></figure>\n<p>上面命令在br0上添加了一个流表条目，即一个OpenFlow规则，匹配内容是从端口id为101的端口出来的数据包，匹配成功后的操作为normal，即不做特殊处理。<br>prority表示优先级，prority值越高，优先级越高，其取值区间为0-65535，不显示指定的默认值为32768。<br>注意：OpenFlow规则语句中不能加空格；如果一定要加空格，整个规则语句必须要双引号括起来。比如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ovs-ofctl add-flow br0 <span class=\"string\">\"priority=10, in_port=101, actions=normal\"</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ovs-ofctl add-flow br0 in_port=101,actions=normal</div><div class=\"line\">$ ovs-ofctl dump-flows br0</div><div class=\"line\">NXST_FLOW reply (xid=0x4):</div><div class=\"line\"> cookie=0x0, duration=11.641s, table=0, n_packets=0, n_bytes=0, idle_age=11, priority,in_port=101 actions=NORMAL</div><div class=\"line\"> cookie=0x0, duration=61979.386s, table=0, n_packets=7766539, n_bytes=758342681, idle_age=0, priority=0 actions=NORMAL</div></pre></td></tr></table></figure>\n<p><code>ovs-ofctl dump-flows br0</code>命令是查看交换机br0中所有的流表条目。<br>上图中出现了两条规则，第二条是我们创建br0时自动生成的，没有任何特殊操作，目的是为了统计数据包信息。<br>第一条规则，是我们创建的：</p>\n<ul>\n<li>duration: 该规则存在的时间</li>\n<li>table: 属于第0号流表</li>\n<li>n_packets: 匹配成功的数据包数量</li>\n<li>n_bytes: 匹配成功的数据包总大小</li>\n<li>idle_age: 与该规则相关的规则最近一次修改到现在的时间<br>我们设置的流表条目没有做任何处理，意义仅仅是统计数据包信息。<br>因为p0是虚拟端口，很少流过数据包，所以n_packets的值几乎不变。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ping -I p0 www.baidu.com</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>指定p0端口去ping外网，一段时间后去执行<code>dump-flows</code>命令，可以看到n_packets的值剧烈增加。</p>\n<p>除了<code>in_port</code>之外还有其他的匹配模式，除了<code>normal</code>之外还有其他的匹配成功的操作，具体可参加上面提到的文章<a href=\"http://www.ibm.com/developerworks/cn/cloud/library/1401_zhaoyi_openswitch\" target=\"_blank\" rel=\"external\">《基于Open vSwitch的OpenFlow实践》</a>，还可以参考数据库<a href=\"http://openvswitch.org/support/dist-docs/ovs-vswitchd.conf.db.5.html\" target=\"_blank\" rel=\"external\">ovs-vswitchd.conf.db(5)</a>。</p>\n<p>其他相关命令还有：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#查看交换机br0中所有的流表</span></div><div class=\"line\">ovs-ofctl dump-tables br0</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#删除端口id为101的端口上所有的的流表条目</span></div><div class=\"line\">ovs-ofctl del-flows br0 in_port=101</div></pre></td></tr></table></figure></p>\n<p>关于OpenFlow的应用不再做更多介绍，可以参考上面列出的两篇文章。</p>\n<h2 id=\"Open-vSwitch的QOS\"><a href=\"#Open-vSwitch的QOS\" class=\"headerlink\" title=\"Open vSwitch的QOS\"></a>Open vSwitch的QOS</h2><p>Open vSwitch关于QOS的官方资料，主要在：</p>\n<ul>\n<li><a href=\"http://openvswitch.org/support/dist-docs/ovs-vsctl.8.html\" target=\"_blank\" rel=\"external\">ovs-vsctl(8)</a></li>\n<li><a href=\"http://openvswitch.org/support/dist-docs/ovs-vswitchd.conf.db.5.html\" target=\"_blank\" rel=\"external\">ovs-vswitchd.conf.db(5)</a></li>\n<li><a href=\"https://github.com/openvswitch/ovs/blob/master/Documentation/faq/qos.rst\" target=\"_blank\" rel=\"external\">Frequently Asked Questions: Quality of Service (QoS)</a></li>\n<li><a href=\"https://github.com/openvswitch/ovs/blob/master/Documentation/howto/qos.rst\" target=\"_blank\" rel=\"external\">《Quality of Service (QoS) Rate Limiting》</a></li>\n</ul>\n<p>Open vSwitch本身并不具备qos功能，是基于linux的”tc”功能实现的，是已经在linux内核中存在的功能。<br>而Open vSwitch所做的是对其部分支持的tc功能进行配置（因为Open vSwitch不是支持所有的tc功能）。<br>如果Open vSwitch不支持你需要的qos功能，那么可以直接使用linux的”tc”。</p>\n<h3 id=\"策略（Policing）\"><a href=\"#策略（Policing）\" class=\"headerlink\" title=\"策略（Policing）\"></a>策略（Policing）</h3><p>在linux的qos中，接收数据包使用的方法叫策略（policing），当速率超过了配置速率，就简单的把数据包丢弃。<br>不通过OpenFlow设置，直接在interface上设置。<br><a href=\"https://github.com/openvswitch/ovs/blob/master/Documentation/faq/qos.rst\" target=\"_blank\" rel=\"external\">Frequently Asked Questions: Quality of Service (QoS)</a> 中有一个例子：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ovs-vsctl <span class=\"built_in\">set</span> interface vif1.0 ingress_policing_rate=10000</div><div class=\"line\">ovs-vsctl <span class=\"built_in\">set</span> interface vif1.0 ingress_policing_burst=8000</div></pre></td></tr></table></figure></p>\n<p>上面两行命令，把虚拟端口vif1.0的最大接收速率设置为10000kbps，桶大小设置为8000kb。<br>策略使用了简单的令牌桶（token bucket）算法。<br>我们以一定的速度不断生成令牌，除非令牌桶装满。<br>每接收一个包，需要消耗一个令牌；如果没有令牌了，就会把新到达的包丢弃。<br>（这里用“到达”和“接收”来区别，到达节点的包和其中被接收转发的包。)<br>如果到达包的速度大于令牌的生成速度，那么令牌很快消耗干净，新到达的包只能丢弃，那么接收包的速度很快就降下来，和令牌的生成速度一致。<br>所以接收包的速度依赖于令牌的生成速度，换句话说，不能大于令牌的生成速度，也就是最大接收速率，即<code>ingree_policing_rate</code>的值，单位是kbps。<br>如果到达包的速度小于令牌的生成速度，那么令牌很快堆满令牌桶，这时到达包的速度突然增大，令牌桶中有足够的令牌。这一瞬间可供消耗的令牌有桶中的令牌，也有不断生成的令牌，导致接收包的速度也会突然增大，大于令牌的生成速度，也就是大于我们设置的最大接收速率，称为突发接收速率。<br>这时虽然突发接收速率大于最大接受速率，但是也是有限制的，最多增加的速率（最大突发接收速率减去最大接收速率）依赖于桶的大小，换句话说，增加的吞吐量不能大于桶的大小，毕竟桶中令牌只有这么多（多余的可供消耗的令牌），即<code>ingress_policing_burst</code>的值，单位是kb。<br>在上面的例子中，如果所有包的大小都是1kb，那么最多增加的速率达到8000kbps，最大突发接收速率达到18000kbps。</p>\n<p>注意：要实现ingress policing，内核必须支持NET_CLS_BASIC，NET_SCH_INGRESS，和NET_ACT_POLICE等模块，而NET_CLS_POLICE不需要，因为已经过时。</p>\n<h3 id=\"整形（Shaping）\"><a href=\"#整形（Shaping）\" class=\"headerlink\" title=\"整形（Shaping）\"></a>整形（Shaping）</h3><p>在linux的qos中，发送数据包使用的方法叫整形（shaping）。<br>与策略的不同之处在于，它使用了队列（queue)，除了丢弃数据包之后，还可以缓存数据包延迟发送，或者调度改变数据包的发送顺序。<br>比策略更加精确和有效。<br><a href=\"https://github.com/openvswitch/ovs/blob/master/Documentation/faq/qos.rst\" target=\"_blank\" rel=\"external\">Frequently Asked Questions: Quality of Service (QoS)</a> 中有一个例子：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">ovs-vsctl -- \\</div><div class=\"line\">  add-br br0 -- \\</div><div class=\"line\">  add-port br0 eth0 -- \\</div><div class=\"line\">  add-port br0 vif1.0 -- <span class=\"built_in\">set</span> interface vif1.0 ofport_request=5 -- \\</div><div class=\"line\">  add-port br0 vif2.0 -- <span class=\"built_in\">set</span> interface vif2.0 ofport_request=6 -- \\</div><div class=\"line\">  <span class=\"built_in\">set</span> port eth0 qos=@newqos -- \\</div><div class=\"line\">  --id=@newqos create qos <span class=\"built_in\">type</span>=linux-htb \\</div><div class=\"line\">      other-config:max-rate=1000000000 \\</div><div class=\"line\">      queues:123=@vif10queue \\</div><div class=\"line\">      queues:234=@vif20queue -- \\</div><div class=\"line\">  --id=@vif10queue create queue other-config:max-rate=10000000 -- \\</div><div class=\"line\">  --id=@vif20queue create queue other-config:max-rate=20000000</div><div class=\"line\"></div><div class=\"line\">ovs-ofctl add-flow br0 in_port=5,actions=set_queue:123,normal</div><div class=\"line\">ovs-ofctl add-flow br0 in_port=6,acitons=set_queue:234,normal</div></pre></td></tr></table></figure></p>\n<p>上面的命令，分别把虚拟端口vif1.0，vif2.0的最大发送速率设置为10000000bps和20000000bps。<br>第2行，建立了一个网桥br0。<br>这里的<code>--</code>指当前的命令，即<code>ovs-vsctl</code>，是一种省略写法，当然也可以拆开为<code>ovs-vsctl</code>的多条命令。后面接<code>--</code>，实际是接着下一行，使第3行形成一个完整的命令。<br>第3行，把物理网卡端口eth0加入到网桥br0中。<br>第4、5行，将虚拟端口vif1.0和vif2.0加入到网桥br0中，并分别设置OpenFlow端口id为5和6。<br>第6行，设置eth0的qos规则为”newqos”，这里的<code>@</code>可以理解为变量或者指针，”newqos”这时还没有创建，接下来几行是创建它。<br>第7行，用<code>--id=@</code>开头，表示创建这个变量或者指针，赋值给它的值是后面语句的返回值。<br>后面的<code>create qos</code>表示创建了qos规则，将这个qos规则赋值给”newqos”，相当于把这个qos规则命名为”newqos”。<br>这个qos规则的类型是”linux-htb”。</p>\n<p>qos规则有两个重要属性，分别是type和queues。<br>“tc”中，队列（queue）分为无类队列，有类队列。<br>无类队列只有一条队列，只有一种队列规则（qdisc）；而有类队列分为很多类（class），数据包到达时，根据不同的数据包类型，源目的ip，端口等等属性，被筛选器（filter）划分进不同的类中，不同的类可能有不同的队列规则，不同的类也可以继续划分，嵌套下去。<br>type就相当于不同的队列，具有不同的队列规则；queues就相当于有类队列的不同类。</p>\n<p>这里的type值设置为”linux-htb”。<br>linux-htb使用了”tc”的htb队列（hieratchical token bucket），分层次的令牌桶队列，属于有类队列。<br>在无类队列中，最简单的是pfifo_fast队列，采取先入先出的算法，只能延迟数据包发送或丢弃数据包，不能对数据包进行调度，即改变数据包发送顺序。<br>还有一种tbf队列（token bucket filter），采取上面提到的令牌桶的算法，而htb就是在tbf的基础上修改为了有类队列，其核心算法还是令牌桶算法。<br>Open vSwitch的qos规则除了提供linux-htb类型，还提供了linux-hfsc类型，对应了”tc”中的hsfc队列（hieratchical fair service curve），分层次的公平服务曲线队列，它同时除了针对带宽，还针对延迟对数据包进行调度，其原理参考<a href=\"http://linux-ip.net/articles/hfsc.en\" target=\"_blank\" rel=\"external\">http://linux-ip.net/articles/hfsc.en</a> 。</p>\n<p>第8行，设置了”newqos”的一个额外属性，max-rate，表示最大发送速率，和上面的最大接收速率类似，其值为1000000000bps。<br>第9、10行，在qos规则中建立了两个queue，分别为vif10queue和vif20queue，key分别为123和234。<br>同样使用了<code>@</code>，即在第11、12行，创建了queue，并设置了最大发送速率分别为10000000bps和20000000bps，命名为vif10queue和vif20queue。<br>这两个queue属于属性queues，可以理解成htb算法中不同的类，它们的队列规则不同之处在于最大发送速率不同。<br>第14、15行，为网桥br0添加OpenFlow规则，当数据包用OpenFlow端口id为5的端口（即vif1.0）传递时，使用队列123（即vif10queue）发送；数据包用OpenFlow端口id为6（即vif2.0）传递时，使用队列234（即vif20queue）发送。<br>前面的命令全是创建qos规则，但是并没有使用，这两句才是使用qos规则的命令。<br>如果没有这两句命令，数据包发送一直使用默认的queue，没有对发送速率的限制。</p>\n<p>linux-htb类型qos规则为queue提供了四种属性，上面只用到了max-rate，除此之外，还有min-rate，burst，priority。</p>\n<ul>\n<li>min-rate：最低发送速率，保障了最低带宽。</li>\n<li>burst：桶大小，和policing部分介绍的含义一样，和突峰发送速率相关。</li>\n<li>priority：优先级，数字越小，优先级越高，默认值为0。数据包发送时，发送优先级高的类里的数据包。</li>\n</ul>\n<blockquote>\n<p>注意：openflow规则的priority值越大，优先级越高；而queue的prority值越小，优先级越高。</p>\n</blockquote>\n<p>而linux-hfsc的queue只有max-rate和min-rate两种属性。</p>\n<p>同样在整形里面，实际的最大发送速率大于我们设置的最大发送速率，因为有突峰发送速率存在。桶大小和最大突峰发送速率的关系，参看上一节策略部分。</p>\n<p>Open vSwitch和qos功能相关的命令和属性并不多，所以如果无法满足需求，只能直接使用linux的”tc”功能。</p>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><p>现在来完成一个整形（shaping）的实践：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#创建网桥br0</span></div><div class=\"line\">vs-vsctl add-br br0</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#创建两个虚拟端口p0和p1</span></div><div class=\"line\">ovs-vsctl add-port br0 p0 -- <span class=\"built_in\">set</span> interface p0 <span class=\"built_in\">type</span>=internal -- <span class=\"built_in\">set</span> interface p0 ofport_request=10</div><div class=\"line\">ovs-vsctl add-port br0 p1 -- <span class=\"built_in\">set</span> interface p1 <span class=\"built_in\">type</span>=internal -- <span class=\"built_in\">set</span> interface p1 ofport_request=11</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#把以太网卡eth0加入到网桥br0中</span></div><div class=\"line\">ovs-vsctl add-port br0 eth0</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#设置ip、网关、路由信息等，使br0能连上外网</span></div><div class=\"line\">ifconfig eth0 0</div><div class=\"line\">ifconfig br0 10.18.129.162/16 up</div><div class=\"line\">route add default gw 10.18.0.254</div><div class=\"line\">route add -net 169.254.0.0 netmask 255.255.0.0 dev br</div><div class=\"line\"><span class=\"comment\">#ip地址10.18.129.162/16是eth0之前的ip地址，现在将其设置到br0上</span></div><div class=\"line\"><span class=\"comment\">#默认网关10.18.0.254和路由169.254.0.0也分别是eth0之前的信息，现在将其设置到br0上</span></div><div class=\"line\"><span class=\"comment\">#另外还要把br0的ip地址设为空，因为不能和br0的ip地址冲突</span></div><div class=\"line\"><span class=\"comment\">#如果该环境是单网卡服务器，最好使用脚本，因为在设置过程中会造成ssh连接断开</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#设置两个虚拟端口的ip分别为10.18.200.10/16和10.18.200.11/16</span></div><div class=\"line\">ifconfig p0 10.18.200.10/16 promisc up</div><div class=\"line\">ifconfig p1 10.18.200.11/16 promisc up</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#清楚现在eth0上qos规则，所有qos规则及queue信息</span></div><div class=\"line\"><span class=\"comment\">#如果是第一次运行，可以不运行这两句命令</span></div><div class=\"line\">ovs-vsctl clear port eth0 qos</div><div class=\"line\">ovs-vsctl -- --all destroy QoS -- --all destroy Queue</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#该qos规则创建两个queue，其最大发送速率为100mbps和200mbps，id为123和234</span></div><div class=\"line\">ovs-vsctl <span class=\"built_in\">set</span> port eth0 qos=@newqos -- \\</div><div class=\"line\">--id=@newqos create qos <span class=\"built_in\">type</span>=linux-htb \\</div><div class=\"line\">        other-config:max-rate=2000000000 \\</div><div class=\"line\">        queues:123=@p0queue \\</div><div class=\"line\">        queues:234=@p1queue -- \\</div><div class=\"line\">--id=@p0queue create queue other-config:max-rate=100000000 -- \\</div><div class=\"line\">--id=@p1queue create queue other-config:max-rate=200000000</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#清楚br0上所有用ip匹配的openflow规则</span></div><div class=\"line\"><span class=\"comment\">#如果之前没有类似规则，可以不运行这句命令</span></div><div class=\"line\">ovs-ofctl del-flows br0 ip</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#在br0上添加两条openflow规则，将源地址为10.18.200.10的ip数据包放入id为123的queue，将源地址为10.18.200.11的ip数据包放入id为234的queue</span></div><div class=\"line\">ovs-ofctl add-flow br0 priority=5,ip,nw_src=10.18.200.10,actions=set_queue:123,normal</div><div class=\"line\">ovs-ofctl add-flow br0 priority=5,ip,nw_src=10.18.200.11,actions=set_queue:234,normal</div><div class=\"line\"><span class=\"comment\">#注意：在nw_src/nw_dst/nw_proto等匹配规则前必须加上ip或者icmp关键字</span></div><div class=\"line\"><span class=\"comment\">#必须确认数据包的网络层协议类型才能使用网络层的源地址/目的地址/协议编号匹配，否则不生效</span></div><div class=\"line\"><span class=\"comment\">#同样，在tp_src/mod_tp_dst等匹配规则前也必须加上tcp/udp/sctp等关键字</span></div><div class=\"line\"><span class=\"comment\">#必须确认数据包的传输层协议类型才能使用传输层的源地址/目的地址匹配，否则不生效</span></div><div class=\"line\"><span class=\"comment\">#openflow规则不生效的很有可能的一种原因是其他规则的优先级更高，导致优先匹配了其他规则，即使不生效的规则匹配精度更高。</span></div></pre></td></tr></table></figure></p>\n<p>现在开始发包测试，利用发包测速工具<a href=\"iperf.fr\">iperf</a> 将数据包发往另一个节点（10.18.129.163）：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#10.18.129.163</span></div><div class=\"line\">iperf <span class=\"_\">-s</span> -p 12345 -i 1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#10.18.129.162</span></div><div class=\"line\">iperf -c 10.18.129.163 -p 12345 -i 1 -t 30 -B 10.18.200.10 &amp; \\</div><div class=\"line\">iperf -c 10.18.129.163 -p 12345 -i 1 -t 30 -B 10.18.200.11</div></pre></td></tr></table></figure></p>\n<p>10.18.129.163上显示：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\">------------------------------------------------------------</div><div class=\"line\">Server listening on TCP port 12345</div><div class=\"line\">TCP window size: 85.3 KByte (default)</div><div class=\"line\">------------------------------------------------------------</div><div class=\"line\">[  4] <span class=\"built_in\">local</span> 10.18.129.163 port 12345 connected with 10.18.200.10 port 12345</div><div class=\"line\">[  5] <span class=\"built_in\">local</span> 10.18.129.163 port 12345 connected with 10.18.200.11 port 12345</div><div class=\"line\">[ ID] Interval       Transfer     Bandwidth</div><div class=\"line\">[  4]  0.0- 1.0 sec  11.9 MBytes   100 Mbits/sec</div><div class=\"line\">[  5]  0.0- 1.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  4]  1.0- 2.0 sec  11.9 MBytes  99.6 Mbits/sec</div><div class=\"line\">[  5]  1.0- 2.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  4]  2.0- 3.0 sec  11.9 MBytes  99.8 Mbits/sec</div><div class=\"line\">[  5]  2.0- 3.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  5]  3.0- 4.0 sec  23.8 MBytes   199 Mbits/sec</div><div class=\"line\">[  4]  3.0- 4.0 sec  11.9 MBytes   100 Mbits/sec</div><div class=\"line\">[  4]  4.0- 5.0 sec  11.9 MBytes  99.6 Mbits/sec</div><div class=\"line\">[  5]  4.0- 5.0 sec  23.8 MBytes   199 Mbits/sec</div><div class=\"line\">[  4]  5.0- 6.0 sec  11.9 MBytes  99.6 Mbits/sec</div><div class=\"line\">[  5]  5.0- 6.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  4]  6.0- 7.0 sec  11.9 MBytes  99.9 Mbits/sec</div><div class=\"line\">[  5]  6.0- 7.0 sec  23.8 MBytes   199 Mbits/sec</div><div class=\"line\">[  4]  7.0- 8.0 sec  11.9 MBytes  99.8 Mbits/sec</div><div class=\"line\">[  5]  7.0- 8.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  4]  8.0- 9.0 sec  11.9 MBytes  99.6 Mbits/sec</div><div class=\"line\">[  5]  8.0- 9.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  4]  9.0-10.0 sec  11.9 MBytes  99.6 Mbits/sec</div><div class=\"line\">[  5]  9.0-10.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  5] 10.0-11.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  4] 10.0-11.0 sec  11.9 MBytes   100 Mbits/sec</div><div class=\"line\">[  4] 11.0-12.0 sec  11.9 MBytes  99.5 Mbits/sec</div><div class=\"line\">[  5] 11.0-12.0 sec  23.7 MBytes   199 Mbits/sec</div><div class=\"line\">[  4] 12.0-13.0 sec  11.9 MBytes  99.6 Mbits/sec</div><div class=\"line\">[  5] 12.0-13.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  4] 13.0-14.0 sec  11.9 MBytes  99.7 Mbits/sec</div><div class=\"line\">[  5] 13.0-14.0 sec  23.7 MBytes   199 Mbits/sec</div><div class=\"line\">[  5] 14.0-15.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  4] 14.0-15.0 sec  11.9 MBytes   100 Mbits/sec</div><div class=\"line\">[  4] 15.0-16.0 sec  11.9 MBytes  99.5 Mbits/sec</div><div class=\"line\">[  5] 15.0-16.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  4] 16.0-17.0 sec  11.9 MBytes  99.7 Mbits/sec</div><div class=\"line\">[  5] 16.0-17.0 sec  23.7 MBytes   199 Mbits/sec</div><div class=\"line\">[  4] 17.0-18.0 sec  11.9 MBytes   100 Mbits/sec</div><div class=\"line\">[  5] 17.0-18.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  5] 18.0-19.0 sec  23.8 MBytes   199 Mbits/sec</div><div class=\"line\">[  4] 18.0-19.0 sec  11.9 MBytes  99.6 Mbits/sec</div><div class=\"line\">[  4] 19.0-20.0 sec  11.9 MBytes  99.6 Mbits/sec</div><div class=\"line\">[  5] 19.0-20.0 sec  23.8 MBytes   199 Mbits/sec</div><div class=\"line\">[  4] 20.0-21.0 sec  11.9 MBytes  99.7 Mbits/sec</div><div class=\"line\">[  5] 20.0-21.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  4] 21.0-22.0 sec  11.9 MBytes  99.8 Mbits/sec</div><div class=\"line\">[  5] 21.0-22.0 sec  23.7 MBytes   199 Mbits/sec</div><div class=\"line\">[  4] 22.0-23.0 sec  11.9 MBytes  99.6 Mbits/sec</div><div class=\"line\">[  5] 22.0-23.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  4] 23.0-24.0 sec  11.9 MBytes   100 Mbits/sec</div><div class=\"line\">[  5] 23.0-24.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  4] 24.0-25.0 sec  11.9 MBytes  99.6 Mbits/sec</div><div class=\"line\">[  5] 24.0-25.0 sec  23.8 MBytes   199 Mbits/sec</div><div class=\"line\">[  4] 25.0-26.0 sec  11.9 MBytes  99.6 Mbits/sec</div><div class=\"line\">[  5] 25.0-26.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  4] 26.0-27.0 sec  11.9 MBytes   100 Mbits/sec</div><div class=\"line\">[  5] 26.0-27.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  4] 27.0-28.0 sec  11.9 MBytes  99.6 Mbits/sec</div><div class=\"line\">[  5] 27.0-28.0 sec  23.8 MBytes   199 Mbits/sec</div><div class=\"line\">[  4] 28.0-29.0 sec  11.9 MBytes  99.6 Mbits/sec</div><div class=\"line\">[  5] 28.0-29.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  4] 29.0-30.0 sec  11.9 MBytes  99.7 Mbits/sec</div><div class=\"line\">[  5] 29.0-30.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  5]  0.0-30.2 sec   718 MBytes   200 Mbits/sec</div><div class=\"line\">[  4]  0.0-30.3 sec   361 MBytes  99.7 Mbits/sec</div></pre></td></tr></table></figure></p>\n<p>可以看到最后的qos结果非常好。<br>节点10.18.129.162的两个进程使用两个不同的ip，占用两个不同的queue同时向节点10.18.129.163发包，接收方接收到数据包的带宽分别为200Mbps和99.7Mbps，符合之前发送方设置的200Mbps和100Mbps的最大发送速率。</p>\n<ul>\n<li>注：Open vSwitch官方文档的github地址在不断变动，上述超链接可能失效，请在<a href=\"http://openvswitch.org\" target=\"_blank\" rel=\"external\">http://openvswitch.org</a> 和<a href=\"https://github.com/openvswitch/ovs\" target=\"_blank\" rel=\"external\">https://github.com/openvswitch/ovs</a> 查找。</li>\n</ul>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>OpenFlow协议是一种网络通信协议，属于数据链路层，可以控制几换几或者路由器的转发平面（forwarding plane)，借此改变网络数据包所走的网络路径。<br>Open vSwitch支持OpenFlow协议，就可以控制数据包的走向，还可以修改源目的地址，支持QOS（Quality of Service）等。<br>本文主要介绍Open vSwitch配置OpenFlow协议以及对QOS的支持。</p>","more":"<p><strong>Title: <a href=\"https://aidaizyy.github.io/openvswitch-qos\" target=\"_blank\" rel=\"external\">Open vSwitch的OpenFlow和QOS</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#109;&#x61;&#105;&#x6c;&#116;&#x6f;&#58;&#x61;&#x69;&#100;&#x61;&#105;&#x7a;&#x79;&#121;&#64;&#x67;&#109;&#x61;&#x69;&#108;&#46;&#99;&#111;&#109;\">&#x61;&#x69;&#100;&#x61;&#105;&#x7a;&#x79;&#121;&#64;&#x67;&#109;&#x61;&#x69;&#108;&#46;&#99;&#111;&#109;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2016-12-26</a></strong></p>\n<h2 id=\"OpenFlow基本应用\"><a href=\"#OpenFlow基本应用\" class=\"headerlink\" title=\"OpenFlow基本应用\"></a>OpenFlow基本应用</h2><p>这里有两篇参考文章，已经写得非常详细了：</p>\n<ul>\n<li><a href=\"http://www.ibm.com/developerworks/cn/cloud/library/1401_zhaoyi_openswitch\" target=\"_blank\" rel=\"external\">《基于Open vSwitch的OpenFlow实践》</a></li>\n<li><a href=\"https://github.com/openvswitch/ovs/blob/master/Documentation/tutorials/ovs-advanced.rst\" target=\"_blank\" rel=\"external\">Open vSwitch Advanced Features</a></li>\n</ul>\n<p>交换机包括一个或多个流表，流表中的条目主要包括数据包要匹配的信息，匹配成功后要执行的操作和统计信息三部分。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ovs-vsctl add-br br0</div><div class=\"line\">ovs-vsctl add-port br0 p0 -- <span class=\"built_in\">set</span> interface p0 <span class=\"built_in\">type</span>=internal</div><div class=\"line\">ovs-vsctl add-port br0 eth0</div></pre></td></tr></table></figure>\n<p>创建网桥br0，并添加虚拟端口p0和以太网端口eth0。<br>再对br0进行网络配置，使其能上外网，并将p0 up。（参考上一篇博文<a href=\"http://aidaiz.com/openvswitch-build\">《Open vSwitch安装与使用》</a>。）</p>\n<p><code>ovs-ofctl</code>是OpenFlow相关命令，详细参考<code>man ovs-ofctl</code>。<br><code>ovs-ofctl show br0</code>命令是显示交换机br0的端口信息。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ovs-ofctl show br0</div><div class=\"line\">FPT_FEATURES_REPLY (xid=0x2): dpid:00000025909765b0</div><div class=\"line\">n_tables:254, n_buffers:256</div><div class=\"line\">capabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IP</div><div class=\"line\">actions: output enqueue set_vlan_vid set_vlan_pcp strip_vlan mod_dl_src mod_dl_dst mod_nw_src mod_nw_dst mod_nw_tos mod_tp_src mod_tp_dst</div><div class=\"line\"> 1(eth0): addr:00:25:90:97:65:b0</div><div class=\"line\">     config:     0</div><div class=\"line\">     state:      0</div><div class=\"line\">     current:    1GB-FD COPPER AUTO_NEG</div><div class=\"line\">     advertised: 10MB-HD 10MB-FD 100MB-HD 100MB-FD 1GB-FD COPPER AUTO_NEG AUTO_PAUSE</div><div class=\"line\">     supported:  10MB-HD 10MB-FD 100MB-HD 100MB-FD 1GB-FD COPPER AUTO_NEG</div><div class=\"line\">     speed: 1000 Mbps now, 1000 Mbps max</div><div class=\"line\"> 2(p0): addr:d2:ca:93:d4:d5:0b</div><div class=\"line\">     config:     0</div><div class=\"line\">     state:      0</div><div class=\"line\">     speed: 0 Mbps now, 0 Mbps max</div><div class=\"line\"> LOCAL(br0): addr:00:25:90:97:65:b0</div><div class=\"line\">     config:     0</div><div class=\"line\">     state:      0</div><div class=\"line\">     speed: 0 Mbps now, 0 Mbps max</div><div class=\"line\">OFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0</div></pre></td></tr></table></figure></p>\n<p>dpid后面的字符串表示交换机br0的datapath id。<br>eht0前面的0和p0前面的1表示端口eth0和端口p0的OpenFlow端口的id。<br>其他的还有端口名称，端口状态等。</p>\n<p>端口的OpenFlow id也可以修改，用<code>ovs-vsctl set interface p0 ofport_request=id</code>命令。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ovs-vsctl <span class=\"built_in\">set</span> interface eth0 ofport_request=100</div><div class=\"line\">$ ovs-vsctl <span class=\"built_in\">set</span> interface p0 ofport_request=101</div><div class=\"line\">$ ovs-ofctl show br0</div><div class=\"line\">OFPT_FEATURES_REPLY (xid=0x2): dpid:00000025909765b0</div><div class=\"line\">n_tables:254, n_buffers:256</div><div class=\"line\">capabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IP</div><div class=\"line\">actions: output enqueue set_vlan_vid set_vlan_pcp strip_vlan mod_dl_src mod_dl_dst mod_nw_src mod_nw_dst mod_nw_tos mod_tp_src mod_tp_dst</div><div class=\"line\"> 100(eth0): addr:00:25:90:97:65:b0</div><div class=\"line\">     config:     0</div><div class=\"line\">     state:      0</div><div class=\"line\">     current:    1GB-FD COPPER AUTO_NEG</div><div class=\"line\">     advertised: 10MB-HD 10MB-FD 100MB-HD 100MB-FD 1GB-FD COPPER AUTO_NEG AUTO_PAUSE</div><div class=\"line\">     supported:  10MB-HD 10MB-FD 100MB-HD 100MB-FD 1GB-FD COPPER AUTO_NEG</div><div class=\"line\">     speed: 1000 Mbps now, 1000 Mbps max</div><div class=\"line\"> 101(p0): addr:fe:07:57:d1:46:f7</div><div class=\"line\">     config:     PORT_DOWN</div><div class=\"line\">     state:      LINK_DOWN</div><div class=\"line\">     speed: 0 Mbps now, 0 Mbps max</div><div class=\"line\"> LOCAL(br0): addr:00:25:90:97:65:b0</div><div class=\"line\">     config:     0</div><div class=\"line\">     state:      0</div><div class=\"line\">     speed: 0 Mbps now, 0 Mbps max</div><div class=\"line\">OFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ovs-ofctl add-flow br0 priority,in_port=101,actions=normal</div></pre></td></tr></table></figure>\n<p>上面命令在br0上添加了一个流表条目，即一个OpenFlow规则，匹配内容是从端口id为101的端口出来的数据包，匹配成功后的操作为normal，即不做特殊处理。<br>prority表示优先级，prority值越高，优先级越高，其取值区间为0-65535，不显示指定的默认值为32768。<br>注意：OpenFlow规则语句中不能加空格；如果一定要加空格，整个规则语句必须要双引号括起来。比如：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ovs-ofctl add-flow br0 <span class=\"string\">\"priority=10, in_port=101, actions=normal\"</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ovs-ofctl add-flow br0 in_port=101,actions=normal</div><div class=\"line\">$ ovs-ofctl dump-flows br0</div><div class=\"line\">NXST_FLOW reply (xid=0x4):</div><div class=\"line\"> cookie=0x0, duration=11.641s, table=0, n_packets=0, n_bytes=0, idle_age=11, priority,in_port=101 actions=NORMAL</div><div class=\"line\"> cookie=0x0, duration=61979.386s, table=0, n_packets=7766539, n_bytes=758342681, idle_age=0, priority=0 actions=NORMAL</div></pre></td></tr></table></figure>\n<p><code>ovs-ofctl dump-flows br0</code>命令是查看交换机br0中所有的流表条目。<br>上图中出现了两条规则，第二条是我们创建br0时自动生成的，没有任何特殊操作，目的是为了统计数据包信息。<br>第一条规则，是我们创建的：</p>\n<ul>\n<li>duration: 该规则存在的时间</li>\n<li>table: 属于第0号流表</li>\n<li>n_packets: 匹配成功的数据包数量</li>\n<li>n_bytes: 匹配成功的数据包总大小</li>\n<li>idle_age: 与该规则相关的规则最近一次修改到现在的时间<br>我们设置的流表条目没有做任何处理，意义仅仅是统计数据包信息。<br>因为p0是虚拟端口，很少流过数据包，所以n_packets的值几乎不变。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ping -I p0 www.baidu.com</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>指定p0端口去ping外网，一段时间后去执行<code>dump-flows</code>命令，可以看到n_packets的值剧烈增加。</p>\n<p>除了<code>in_port</code>之外还有其他的匹配模式，除了<code>normal</code>之外还有其他的匹配成功的操作，具体可参加上面提到的文章<a href=\"http://www.ibm.com/developerworks/cn/cloud/library/1401_zhaoyi_openswitch\" target=\"_blank\" rel=\"external\">《基于Open vSwitch的OpenFlow实践》</a>，还可以参考数据库<a href=\"http://openvswitch.org/support/dist-docs/ovs-vswitchd.conf.db.5.html\" target=\"_blank\" rel=\"external\">ovs-vswitchd.conf.db(5)</a>。</p>\n<p>其他相关命令还有：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#查看交换机br0中所有的流表</span></div><div class=\"line\">ovs-ofctl dump-tables br0</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#删除端口id为101的端口上所有的的流表条目</span></div><div class=\"line\">ovs-ofctl del-flows br0 in_port=101</div></pre></td></tr></table></figure></p>\n<p>关于OpenFlow的应用不再做更多介绍，可以参考上面列出的两篇文章。</p>\n<h2 id=\"Open-vSwitch的QOS\"><a href=\"#Open-vSwitch的QOS\" class=\"headerlink\" title=\"Open vSwitch的QOS\"></a>Open vSwitch的QOS</h2><p>Open vSwitch关于QOS的官方资料，主要在：</p>\n<ul>\n<li><a href=\"http://openvswitch.org/support/dist-docs/ovs-vsctl.8.html\" target=\"_blank\" rel=\"external\">ovs-vsctl(8)</a></li>\n<li><a href=\"http://openvswitch.org/support/dist-docs/ovs-vswitchd.conf.db.5.html\" target=\"_blank\" rel=\"external\">ovs-vswitchd.conf.db(5)</a></li>\n<li><a href=\"https://github.com/openvswitch/ovs/blob/master/Documentation/faq/qos.rst\" target=\"_blank\" rel=\"external\">Frequently Asked Questions: Quality of Service (QoS)</a></li>\n<li><a href=\"https://github.com/openvswitch/ovs/blob/master/Documentation/howto/qos.rst\" target=\"_blank\" rel=\"external\">《Quality of Service (QoS) Rate Limiting》</a></li>\n</ul>\n<p>Open vSwitch本身并不具备qos功能，是基于linux的”tc”功能实现的，是已经在linux内核中存在的功能。<br>而Open vSwitch所做的是对其部分支持的tc功能进行配置（因为Open vSwitch不是支持所有的tc功能）。<br>如果Open vSwitch不支持你需要的qos功能，那么可以直接使用linux的”tc”。</p>\n<h3 id=\"策略（Policing）\"><a href=\"#策略（Policing）\" class=\"headerlink\" title=\"策略（Policing）\"></a>策略（Policing）</h3><p>在linux的qos中，接收数据包使用的方法叫策略（policing），当速率超过了配置速率，就简单的把数据包丢弃。<br>不通过OpenFlow设置，直接在interface上设置。<br><a href=\"https://github.com/openvswitch/ovs/blob/master/Documentation/faq/qos.rst\" target=\"_blank\" rel=\"external\">Frequently Asked Questions: Quality of Service (QoS)</a> 中有一个例子：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">ovs-vsctl <span class=\"built_in\">set</span> interface vif1.0 ingress_policing_rate=10000</div><div class=\"line\">ovs-vsctl <span class=\"built_in\">set</span> interface vif1.0 ingress_policing_burst=8000</div></pre></td></tr></table></figure></p>\n<p>上面两行命令，把虚拟端口vif1.0的最大接收速率设置为10000kbps，桶大小设置为8000kb。<br>策略使用了简单的令牌桶（token bucket）算法。<br>我们以一定的速度不断生成令牌，除非令牌桶装满。<br>每接收一个包，需要消耗一个令牌；如果没有令牌了，就会把新到达的包丢弃。<br>（这里用“到达”和“接收”来区别，到达节点的包和其中被接收转发的包。)<br>如果到达包的速度大于令牌的生成速度，那么令牌很快消耗干净，新到达的包只能丢弃，那么接收包的速度很快就降下来，和令牌的生成速度一致。<br>所以接收包的速度依赖于令牌的生成速度，换句话说，不能大于令牌的生成速度，也就是最大接收速率，即<code>ingree_policing_rate</code>的值，单位是kbps。<br>如果到达包的速度小于令牌的生成速度，那么令牌很快堆满令牌桶，这时到达包的速度突然增大，令牌桶中有足够的令牌。这一瞬间可供消耗的令牌有桶中的令牌，也有不断生成的令牌，导致接收包的速度也会突然增大，大于令牌的生成速度，也就是大于我们设置的最大接收速率，称为突发接收速率。<br>这时虽然突发接收速率大于最大接受速率，但是也是有限制的，最多增加的速率（最大突发接收速率减去最大接收速率）依赖于桶的大小，换句话说，增加的吞吐量不能大于桶的大小，毕竟桶中令牌只有这么多（多余的可供消耗的令牌），即<code>ingress_policing_burst</code>的值，单位是kb。<br>在上面的例子中，如果所有包的大小都是1kb，那么最多增加的速率达到8000kbps，最大突发接收速率达到18000kbps。</p>\n<p>注意：要实现ingress policing，内核必须支持NET_CLS_BASIC，NET_SCH_INGRESS，和NET_ACT_POLICE等模块，而NET_CLS_POLICE不需要，因为已经过时。</p>\n<h3 id=\"整形（Shaping）\"><a href=\"#整形（Shaping）\" class=\"headerlink\" title=\"整形（Shaping）\"></a>整形（Shaping）</h3><p>在linux的qos中，发送数据包使用的方法叫整形（shaping）。<br>与策略的不同之处在于，它使用了队列（queue)，除了丢弃数据包之后，还可以缓存数据包延迟发送，或者调度改变数据包的发送顺序。<br>比策略更加精确和有效。<br><a href=\"https://github.com/openvswitch/ovs/blob/master/Documentation/faq/qos.rst\" target=\"_blank\" rel=\"external\">Frequently Asked Questions: Quality of Service (QoS)</a> 中有一个例子：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">ovs-vsctl -- \\</div><div class=\"line\">  add-br br0 -- \\</div><div class=\"line\">  add-port br0 eth0 -- \\</div><div class=\"line\">  add-port br0 vif1.0 -- <span class=\"built_in\">set</span> interface vif1.0 ofport_request=5 -- \\</div><div class=\"line\">  add-port br0 vif2.0 -- <span class=\"built_in\">set</span> interface vif2.0 ofport_request=6 -- \\</div><div class=\"line\">  <span class=\"built_in\">set</span> port eth0 qos=@newqos -- \\</div><div class=\"line\">  --id=@newqos create qos <span class=\"built_in\">type</span>=linux-htb \\</div><div class=\"line\">      other-config:max-rate=1000000000 \\</div><div class=\"line\">      queues:123=@vif10queue \\</div><div class=\"line\">      queues:234=@vif20queue -- \\</div><div class=\"line\">  --id=@vif10queue create queue other-config:max-rate=10000000 -- \\</div><div class=\"line\">  --id=@vif20queue create queue other-config:max-rate=20000000</div><div class=\"line\"></div><div class=\"line\">ovs-ofctl add-flow br0 in_port=5,actions=set_queue:123,normal</div><div class=\"line\">ovs-ofctl add-flow br0 in_port=6,acitons=set_queue:234,normal</div></pre></td></tr></table></figure></p>\n<p>上面的命令，分别把虚拟端口vif1.0，vif2.0的最大发送速率设置为10000000bps和20000000bps。<br>第2行，建立了一个网桥br0。<br>这里的<code>--</code>指当前的命令，即<code>ovs-vsctl</code>，是一种省略写法，当然也可以拆开为<code>ovs-vsctl</code>的多条命令。后面接<code>--</code>，实际是接着下一行，使第3行形成一个完整的命令。<br>第3行，把物理网卡端口eth0加入到网桥br0中。<br>第4、5行，将虚拟端口vif1.0和vif2.0加入到网桥br0中，并分别设置OpenFlow端口id为5和6。<br>第6行，设置eth0的qos规则为”newqos”，这里的<code>@</code>可以理解为变量或者指针，”newqos”这时还没有创建，接下来几行是创建它。<br>第7行，用<code>--id=@</code>开头，表示创建这个变量或者指针，赋值给它的值是后面语句的返回值。<br>后面的<code>create qos</code>表示创建了qos规则，将这个qos规则赋值给”newqos”，相当于把这个qos规则命名为”newqos”。<br>这个qos规则的类型是”linux-htb”。</p>\n<p>qos规则有两个重要属性，分别是type和queues。<br>“tc”中，队列（queue）分为无类队列，有类队列。<br>无类队列只有一条队列，只有一种队列规则（qdisc）；而有类队列分为很多类（class），数据包到达时，根据不同的数据包类型，源目的ip，端口等等属性，被筛选器（filter）划分进不同的类中，不同的类可能有不同的队列规则，不同的类也可以继续划分，嵌套下去。<br>type就相当于不同的队列，具有不同的队列规则；queues就相当于有类队列的不同类。</p>\n<p>这里的type值设置为”linux-htb”。<br>linux-htb使用了”tc”的htb队列（hieratchical token bucket），分层次的令牌桶队列，属于有类队列。<br>在无类队列中，最简单的是pfifo_fast队列，采取先入先出的算法，只能延迟数据包发送或丢弃数据包，不能对数据包进行调度，即改变数据包发送顺序。<br>还有一种tbf队列（token bucket filter），采取上面提到的令牌桶的算法，而htb就是在tbf的基础上修改为了有类队列，其核心算法还是令牌桶算法。<br>Open vSwitch的qos规则除了提供linux-htb类型，还提供了linux-hfsc类型，对应了”tc”中的hsfc队列（hieratchical fair service curve），分层次的公平服务曲线队列，它同时除了针对带宽，还针对延迟对数据包进行调度，其原理参考<a href=\"http://linux-ip.net/articles/hfsc.en\" target=\"_blank\" rel=\"external\">http://linux-ip.net/articles/hfsc.en</a> 。</p>\n<p>第8行，设置了”newqos”的一个额外属性，max-rate，表示最大发送速率，和上面的最大接收速率类似，其值为1000000000bps。<br>第9、10行，在qos规则中建立了两个queue，分别为vif10queue和vif20queue，key分别为123和234。<br>同样使用了<code>@</code>，即在第11、12行，创建了queue，并设置了最大发送速率分别为10000000bps和20000000bps，命名为vif10queue和vif20queue。<br>这两个queue属于属性queues，可以理解成htb算法中不同的类，它们的队列规则不同之处在于最大发送速率不同。<br>第14、15行，为网桥br0添加OpenFlow规则，当数据包用OpenFlow端口id为5的端口（即vif1.0）传递时，使用队列123（即vif10queue）发送；数据包用OpenFlow端口id为6（即vif2.0）传递时，使用队列234（即vif20queue）发送。<br>前面的命令全是创建qos规则，但是并没有使用，这两句才是使用qos规则的命令。<br>如果没有这两句命令，数据包发送一直使用默认的queue，没有对发送速率的限制。</p>\n<p>linux-htb类型qos规则为queue提供了四种属性，上面只用到了max-rate，除此之外，还有min-rate，burst，priority。</p>\n<ul>\n<li>min-rate：最低发送速率，保障了最低带宽。</li>\n<li>burst：桶大小，和policing部分介绍的含义一样，和突峰发送速率相关。</li>\n<li>priority：优先级，数字越小，优先级越高，默认值为0。数据包发送时，发送优先级高的类里的数据包。</li>\n</ul>\n<blockquote>\n<p>注意：openflow规则的priority值越大，优先级越高；而queue的prority值越小，优先级越高。</p>\n</blockquote>\n<p>而linux-hfsc的queue只有max-rate和min-rate两种属性。</p>\n<p>同样在整形里面，实际的最大发送速率大于我们设置的最大发送速率，因为有突峰发送速率存在。桶大小和最大突峰发送速率的关系，参看上一节策略部分。</p>\n<p>Open vSwitch和qos功能相关的命令和属性并不多，所以如果无法满足需求，只能直接使用linux的”tc”功能。</p>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><p>现在来完成一个整形（shaping）的实践：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#创建网桥br0</span></div><div class=\"line\">vs-vsctl add-br br0</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#创建两个虚拟端口p0和p1</span></div><div class=\"line\">ovs-vsctl add-port br0 p0 -- <span class=\"built_in\">set</span> interface p0 <span class=\"built_in\">type</span>=internal -- <span class=\"built_in\">set</span> interface p0 ofport_request=10</div><div class=\"line\">ovs-vsctl add-port br0 p1 -- <span class=\"built_in\">set</span> interface p1 <span class=\"built_in\">type</span>=internal -- <span class=\"built_in\">set</span> interface p1 ofport_request=11</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#把以太网卡eth0加入到网桥br0中</span></div><div class=\"line\">ovs-vsctl add-port br0 eth0</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#设置ip、网关、路由信息等，使br0能连上外网</span></div><div class=\"line\">ifconfig eth0 0</div><div class=\"line\">ifconfig br0 10.18.129.162/16 up</div><div class=\"line\">route add default gw 10.18.0.254</div><div class=\"line\">route add -net 169.254.0.0 netmask 255.255.0.0 dev br</div><div class=\"line\"><span class=\"comment\">#ip地址10.18.129.162/16是eth0之前的ip地址，现在将其设置到br0上</span></div><div class=\"line\"><span class=\"comment\">#默认网关10.18.0.254和路由169.254.0.0也分别是eth0之前的信息，现在将其设置到br0上</span></div><div class=\"line\"><span class=\"comment\">#另外还要把br0的ip地址设为空，因为不能和br0的ip地址冲突</span></div><div class=\"line\"><span class=\"comment\">#如果该环境是单网卡服务器，最好使用脚本，因为在设置过程中会造成ssh连接断开</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#设置两个虚拟端口的ip分别为10.18.200.10/16和10.18.200.11/16</span></div><div class=\"line\">ifconfig p0 10.18.200.10/16 promisc up</div><div class=\"line\">ifconfig p1 10.18.200.11/16 promisc up</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#清楚现在eth0上qos规则，所有qos规则及queue信息</span></div><div class=\"line\"><span class=\"comment\">#如果是第一次运行，可以不运行这两句命令</span></div><div class=\"line\">ovs-vsctl clear port eth0 qos</div><div class=\"line\">ovs-vsctl -- --all destroy QoS -- --all destroy Queue</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#该qos规则创建两个queue，其最大发送速率为100mbps和200mbps，id为123和234</span></div><div class=\"line\">ovs-vsctl <span class=\"built_in\">set</span> port eth0 qos=@newqos -- \\</div><div class=\"line\">--id=@newqos create qos <span class=\"built_in\">type</span>=linux-htb \\</div><div class=\"line\">        other-config:max-rate=2000000000 \\</div><div class=\"line\">        queues:123=@p0queue \\</div><div class=\"line\">        queues:234=@p1queue -- \\</div><div class=\"line\">--id=@p0queue create queue other-config:max-rate=100000000 -- \\</div><div class=\"line\">--id=@p1queue create queue other-config:max-rate=200000000</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#清楚br0上所有用ip匹配的openflow规则</span></div><div class=\"line\"><span class=\"comment\">#如果之前没有类似规则，可以不运行这句命令</span></div><div class=\"line\">ovs-ofctl del-flows br0 ip</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#在br0上添加两条openflow规则，将源地址为10.18.200.10的ip数据包放入id为123的queue，将源地址为10.18.200.11的ip数据包放入id为234的queue</span></div><div class=\"line\">ovs-ofctl add-flow br0 priority=5,ip,nw_src=10.18.200.10,actions=set_queue:123,normal</div><div class=\"line\">ovs-ofctl add-flow br0 priority=5,ip,nw_src=10.18.200.11,actions=set_queue:234,normal</div><div class=\"line\"><span class=\"comment\">#注意：在nw_src/nw_dst/nw_proto等匹配规则前必须加上ip或者icmp关键字</span></div><div class=\"line\"><span class=\"comment\">#必须确认数据包的网络层协议类型才能使用网络层的源地址/目的地址/协议编号匹配，否则不生效</span></div><div class=\"line\"><span class=\"comment\">#同样，在tp_src/mod_tp_dst等匹配规则前也必须加上tcp/udp/sctp等关键字</span></div><div class=\"line\"><span class=\"comment\">#必须确认数据包的传输层协议类型才能使用传输层的源地址/目的地址匹配，否则不生效</span></div><div class=\"line\"><span class=\"comment\">#openflow规则不生效的很有可能的一种原因是其他规则的优先级更高，导致优先匹配了其他规则，即使不生效的规则匹配精度更高。</span></div></pre></td></tr></table></figure></p>\n<p>现在开始发包测试，利用发包测速工具<a href=\"iperf.fr\">iperf</a> 将数据包发往另一个节点（10.18.129.163）：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#10.18.129.163</span></div><div class=\"line\">iperf <span class=\"_\">-s</span> -p 12345 -i 1</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">#10.18.129.162</span></div><div class=\"line\">iperf -c 10.18.129.163 -p 12345 -i 1 -t 30 -B 10.18.200.10 &amp; \\</div><div class=\"line\">iperf -c 10.18.129.163 -p 12345 -i 1 -t 30 -B 10.18.200.11</div></pre></td></tr></table></figure></p>\n<p>10.18.129.163上显示：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div></pre></td><td class=\"code\"><pre><div class=\"line\">------------------------------------------------------------</div><div class=\"line\">Server listening on TCP port 12345</div><div class=\"line\">TCP window size: 85.3 KByte (default)</div><div class=\"line\">------------------------------------------------------------</div><div class=\"line\">[  4] <span class=\"built_in\">local</span> 10.18.129.163 port 12345 connected with 10.18.200.10 port 12345</div><div class=\"line\">[  5] <span class=\"built_in\">local</span> 10.18.129.163 port 12345 connected with 10.18.200.11 port 12345</div><div class=\"line\">[ ID] Interval       Transfer     Bandwidth</div><div class=\"line\">[  4]  0.0- 1.0 sec  11.9 MBytes   100 Mbits/sec</div><div class=\"line\">[  5]  0.0- 1.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  4]  1.0- 2.0 sec  11.9 MBytes  99.6 Mbits/sec</div><div class=\"line\">[  5]  1.0- 2.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  4]  2.0- 3.0 sec  11.9 MBytes  99.8 Mbits/sec</div><div class=\"line\">[  5]  2.0- 3.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  5]  3.0- 4.0 sec  23.8 MBytes   199 Mbits/sec</div><div class=\"line\">[  4]  3.0- 4.0 sec  11.9 MBytes   100 Mbits/sec</div><div class=\"line\">[  4]  4.0- 5.0 sec  11.9 MBytes  99.6 Mbits/sec</div><div class=\"line\">[  5]  4.0- 5.0 sec  23.8 MBytes   199 Mbits/sec</div><div class=\"line\">[  4]  5.0- 6.0 sec  11.9 MBytes  99.6 Mbits/sec</div><div class=\"line\">[  5]  5.0- 6.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  4]  6.0- 7.0 sec  11.9 MBytes  99.9 Mbits/sec</div><div class=\"line\">[  5]  6.0- 7.0 sec  23.8 MBytes   199 Mbits/sec</div><div class=\"line\">[  4]  7.0- 8.0 sec  11.9 MBytes  99.8 Mbits/sec</div><div class=\"line\">[  5]  7.0- 8.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  4]  8.0- 9.0 sec  11.9 MBytes  99.6 Mbits/sec</div><div class=\"line\">[  5]  8.0- 9.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  4]  9.0-10.0 sec  11.9 MBytes  99.6 Mbits/sec</div><div class=\"line\">[  5]  9.0-10.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  5] 10.0-11.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  4] 10.0-11.0 sec  11.9 MBytes   100 Mbits/sec</div><div class=\"line\">[  4] 11.0-12.0 sec  11.9 MBytes  99.5 Mbits/sec</div><div class=\"line\">[  5] 11.0-12.0 sec  23.7 MBytes   199 Mbits/sec</div><div class=\"line\">[  4] 12.0-13.0 sec  11.9 MBytes  99.6 Mbits/sec</div><div class=\"line\">[  5] 12.0-13.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  4] 13.0-14.0 sec  11.9 MBytes  99.7 Mbits/sec</div><div class=\"line\">[  5] 13.0-14.0 sec  23.7 MBytes   199 Mbits/sec</div><div class=\"line\">[  5] 14.0-15.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  4] 14.0-15.0 sec  11.9 MBytes   100 Mbits/sec</div><div class=\"line\">[  4] 15.0-16.0 sec  11.9 MBytes  99.5 Mbits/sec</div><div class=\"line\">[  5] 15.0-16.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  4] 16.0-17.0 sec  11.9 MBytes  99.7 Mbits/sec</div><div class=\"line\">[  5] 16.0-17.0 sec  23.7 MBytes   199 Mbits/sec</div><div class=\"line\">[  4] 17.0-18.0 sec  11.9 MBytes   100 Mbits/sec</div><div class=\"line\">[  5] 17.0-18.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  5] 18.0-19.0 sec  23.8 MBytes   199 Mbits/sec</div><div class=\"line\">[  4] 18.0-19.0 sec  11.9 MBytes  99.6 Mbits/sec</div><div class=\"line\">[  4] 19.0-20.0 sec  11.9 MBytes  99.6 Mbits/sec</div><div class=\"line\">[  5] 19.0-20.0 sec  23.8 MBytes   199 Mbits/sec</div><div class=\"line\">[  4] 20.0-21.0 sec  11.9 MBytes  99.7 Mbits/sec</div><div class=\"line\">[  5] 20.0-21.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  4] 21.0-22.0 sec  11.9 MBytes  99.8 Mbits/sec</div><div class=\"line\">[  5] 21.0-22.0 sec  23.7 MBytes   199 Mbits/sec</div><div class=\"line\">[  4] 22.0-23.0 sec  11.9 MBytes  99.6 Mbits/sec</div><div class=\"line\">[  5] 22.0-23.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  4] 23.0-24.0 sec  11.9 MBytes   100 Mbits/sec</div><div class=\"line\">[  5] 23.0-24.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  4] 24.0-25.0 sec  11.9 MBytes  99.6 Mbits/sec</div><div class=\"line\">[  5] 24.0-25.0 sec  23.8 MBytes   199 Mbits/sec</div><div class=\"line\">[  4] 25.0-26.0 sec  11.9 MBytes  99.6 Mbits/sec</div><div class=\"line\">[  5] 25.0-26.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  4] 26.0-27.0 sec  11.9 MBytes   100 Mbits/sec</div><div class=\"line\">[  5] 26.0-27.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  4] 27.0-28.0 sec  11.9 MBytes  99.6 Mbits/sec</div><div class=\"line\">[  5] 27.0-28.0 sec  23.8 MBytes   199 Mbits/sec</div><div class=\"line\">[  4] 28.0-29.0 sec  11.9 MBytes  99.6 Mbits/sec</div><div class=\"line\">[  5] 28.0-29.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  4] 29.0-30.0 sec  11.9 MBytes  99.7 Mbits/sec</div><div class=\"line\">[  5] 29.0-30.0 sec  23.8 MBytes   200 Mbits/sec</div><div class=\"line\">[  5]  0.0-30.2 sec   718 MBytes   200 Mbits/sec</div><div class=\"line\">[  4]  0.0-30.3 sec   361 MBytes  99.7 Mbits/sec</div></pre></td></tr></table></figure></p>\n<p>可以看到最后的qos结果非常好。<br>节点10.18.129.162的两个进程使用两个不同的ip，占用两个不同的queue同时向节点10.18.129.163发包，接收方接收到数据包的带宽分别为200Mbps和99.7Mbps，符合之前发送方设置的200Mbps和100Mbps的最大发送速率。</p>\n<ul>\n<li>注：Open vSwitch官方文档的github地址在不断变动，上述超链接可能失效，请在<a href=\"http://openvswitch.org\" target=\"_blank\" rel=\"external\">http://openvswitch.org</a> 和<a href=\"https://github.com/openvswitch/ovs\" target=\"_blank\" rel=\"external\">https://github.com/openvswitch/ovs</a> 查找。</li>\n</ul>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n\n</blockquote>"},{"title":"SPDK简介","date":"2016-08-15T15:02:27.000Z","toc":true,"_content":"\nSPDK（Storage Performance Development Kit）是Intel发布的存储性能开发工具集。\n> 原文：[《Introduction to the Storage Performance Development Kit (SPDK)》](https://software.intel.com/en-us/articles/introduction-to-the-storage-performance-development-kit-spdk)\n\n<!--more-->\n**Title: [SPDK简介](https://aidaizyy.github.io/spdk)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2016-08-16](http://aidaizyy.github.io)**\n\n\n## 简介\n固态存储媒介正在取代数据中心。目前这一代的闪存存储，比起传统的磁盘介质，在性能（performance）、功耗（power consumption）和机架密度（rack density）上具有显著的优势。这些优势将会继续增大，使闪存存储作为下一代媒介进入市场。\n\n用户使用现在的固态媒介，比如Intel® SSD DC P3700 Series Non-Volatile Memory Express（NVMe）驱动，面临一个主要的挑战：因为吞吐量和延迟性能比传统的磁盘好太多，现在总的处理时间中，存储软件占用了更大的比例。换句话说，存储软件栈的性能和效率在整个存储系统中越来越重要。随着存储媒介继续发展，它将面临远远超过正在使用的软件体系结构的风险（即存储媒介受制于相关软件的不足而不能发挥全部性能），在接下来的几年中，存储媒介将会继续发展到一个令人难以置信的地步。\n\n为了帮助存储OEM（设备代工厂）和ISV（独立软件开发商）整合硬件，Inte构造了一系列驱动，以及一个完善的、端对端的参考存储体系结构，被命名为Storage Performance Development Kit（SPDK）。SPDK的目标是通过同时使用Intel的网络技术，处理技术和存储技术来提高突出显著的效率和性能。通过运行为硬件设计的软件，SPDK已经证明很容易达到每秒钟数百万次I/O读取，通过使用许多处理器核心和许多NVMe驱动去存储，而不需要额外卸载硬件。Intel在[BSD license](https://github.com/spdk/spdk/blob/master/LICENSE)许可协议下通过[Github](https://github.com/spdk)分发提供其全部的Linux参考架构的源代码。博客、邮件列表和额外文档可以在[spdk.io](http://www.spdk.io)中找到。\n\n## 软件体系结构概览\nSPDK如何工作？达到这样的超高性能运用了两个关键技术：运行于用户态和轮询模式。让我们进一步了解这两个软件工程术语。\n\n首先，我们的设备驱动代码运行在用户态意味着，在定义上，驱动代码不会运行在内核中。避免内核上下文切换和中断将会节省大量的处理开销，允许更多的时钟周期被用来做实际的数据存储。无视复杂的存储算法（去冗，加密，压缩，空白块存储），更少浪费的时间周期意味着更好的性能。\n\n其次，轮询模式驱动（Polled Mode Drivers, PMDs）会持续工作，而不是被派遣工作。考虑在一个忙碌的周六晚上的市区打车，不断招手，一辆又一辆后座已经有乘客的计程车驶过。这样的等待是不可预测的，不可能说清楚花掉多少分钟之后能打到车。打车就像在传统的中断-派遣存储I/O驱动中等待一个包或一个数据块传输。另一方面，想象在机场打车的过程中，队首的计程车司机观察，只需要固定的几秒钟就可以载上乘客并驶向目的地。这就是PMDs怎么工作的，SPDK的所有组件怎么设计的。数据包和数据块被立即分派，因为等待花掉的时间变小，使得延迟更低，一致性延迟更多（抖动更少），吞吐量也得到提高。\n\nSPDK由数个子组件构成，相互连接并共享用户态和轮询模式的共有部分。当构造端对端SPDK体系结构时，每个组件被构造用于克服遭遇到的特定的性能瓶颈。然而，每个组件也可以被整合进非SPDK体系结构，允许用户使用SPDK影响经验和技术而加速他们自己的软件。举例来说，用户态网络服务（Userspace Network Services, UNS）库被构造用来克服Linux内核TCP/IP协议栈的性能限制。通过构造一个用户态，轮序模式的TCP/IP协议栈，SPDK可以通过更少的处理器时钟周期处理TCP/IP包排序和处理，获得地更高的IOPS性能。\n\n![SPDK Architecture](https://software.intel.com/sites/default/files/managed/a8/ff/introduction-to-the-storage-performance-development-kit-spdk-fig2.png)\n\n一共三种基本类型的子组件：网络前端，处理框架，后端。\n\n前端是由数据平面开发工具集（Data Plane Development Kit, DPDK）网卡驱动和UNS组成。DPDK提供一个高性能的在网卡中处理数据包的框架，提供一个从网卡到用户空间的数据到达的快速路径。然后UNS代码进行接管，破解TCP/IP数据包形成iSCSI命令。\n\n这时，处理框架得到数据包内容并翻译iSCSI命令为SCSI块级命令。然而，在它把这些命令发送到后端驱动之前，SPDK提供一个API框架增加用户特定的功能——“special sauce”，到SPDK框架中（上图绿色框内）。很多例子，包括缓存，数据的去冗和压缩，磁盘阵列（RAID），和纠删码计算。这些功能都包含在SPDK中，虽然这些功能只是为了帮助我们构建真实世界的用例，不应该和产品级实现混淆。\n\n最终，数据到达后端驱动，在这里与物理块设备交互发生，就是读或写。SPDK包括针对几种存储媒介的用户态PMDs；NVMe设备；Linux AIO设备，比如传统磁盘；基于块地址的内存应用的内存驱动（比如，RAMDISKS）；和可以用Intel I/O加速技术（Intel I/O Acceleration Technology，代号为Crystal Beach DMA，CBDMA）的设备。这套后端驱动涵盖了不同层次性能的存储设备，保证了几乎每种存储应用的相关性。\n\nSPDK不适应所有的存储体系结构。这里有一些问题可能会帮助用户决定SPDK组件是否适合他们的体系结构。\n\n**这个存储系统是否基于Linux？**\nSPDK现在只在Linux上测试和支持。\n\n**这个存储系统的高性能路径是否运行在用户态？**\nSPDK通过仅在用户态下运行从网卡到磁盘的高性能路径，提高性能和效率。\n\n**系统体系结构可以合并无锁的PMDs到它的线程模型吗？**\n因为PMD持续运行在它们的线程中（而不是睡眠或者不用时让出处理器），所以它们有特殊的线程模型需求\n\n**系统现在是否用DPDK处理网络数据包的工作负载**\nDPDK包含了SPDK的框架，所以现在使用DPDK的用户就会发现与SPDK紧密整合非常有用。\n\n**你们的许可模型可以使用非可再分发源吗？**\nSPDK的一部分是作为开源可获得的，BSD许可组件（比如NVMe和CBDMA用户态驱动）。而其他部分暂时是Intel许可下（UNS和用户态iSCSI对象），但是它肯定会改变，所有的SPDK源代码免费提供。\n\n**开发团队自己是否具有理解和解决问题的专业技能？**\nIntel没有为相关软件提供支持的义务。当Intel和围绕SPDK的开源社区将付出商业上合理的努力去调出未修改的发布版本软件的潜在错误，任何情况下Intel都没有任务义务为用户提供针对该软件任何形式的维护和支持。\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","source":"_posts/spdk.md","raw":"title: SPDK简介\ndate: 2016-08-15 23:02:27\ntags:\n- spdk\ncategories: spdk\ntoc: true\n---\n\nSPDK（Storage Performance Development Kit）是Intel发布的存储性能开发工具集。\n> 原文：[《Introduction to the Storage Performance Development Kit (SPDK)》](https://software.intel.com/en-us/articles/introduction-to-the-storage-performance-development-kit-spdk)\n\n<!--more-->\n**Title: [SPDK简介](https://aidaizyy.github.io/spdk)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2016-08-16](http://aidaizyy.github.io)**\n\n\n## 简介\n固态存储媒介正在取代数据中心。目前这一代的闪存存储，比起传统的磁盘介质，在性能（performance）、功耗（power consumption）和机架密度（rack density）上具有显著的优势。这些优势将会继续增大，使闪存存储作为下一代媒介进入市场。\n\n用户使用现在的固态媒介，比如Intel® SSD DC P3700 Series Non-Volatile Memory Express（NVMe）驱动，面临一个主要的挑战：因为吞吐量和延迟性能比传统的磁盘好太多，现在总的处理时间中，存储软件占用了更大的比例。换句话说，存储软件栈的性能和效率在整个存储系统中越来越重要。随着存储媒介继续发展，它将面临远远超过正在使用的软件体系结构的风险（即存储媒介受制于相关软件的不足而不能发挥全部性能），在接下来的几年中，存储媒介将会继续发展到一个令人难以置信的地步。\n\n为了帮助存储OEM（设备代工厂）和ISV（独立软件开发商）整合硬件，Inte构造了一系列驱动，以及一个完善的、端对端的参考存储体系结构，被命名为Storage Performance Development Kit（SPDK）。SPDK的目标是通过同时使用Intel的网络技术，处理技术和存储技术来提高突出显著的效率和性能。通过运行为硬件设计的软件，SPDK已经证明很容易达到每秒钟数百万次I/O读取，通过使用许多处理器核心和许多NVMe驱动去存储，而不需要额外卸载硬件。Intel在[BSD license](https://github.com/spdk/spdk/blob/master/LICENSE)许可协议下通过[Github](https://github.com/spdk)分发提供其全部的Linux参考架构的源代码。博客、邮件列表和额外文档可以在[spdk.io](http://www.spdk.io)中找到。\n\n## 软件体系结构概览\nSPDK如何工作？达到这样的超高性能运用了两个关键技术：运行于用户态和轮询模式。让我们进一步了解这两个软件工程术语。\n\n首先，我们的设备驱动代码运行在用户态意味着，在定义上，驱动代码不会运行在内核中。避免内核上下文切换和中断将会节省大量的处理开销，允许更多的时钟周期被用来做实际的数据存储。无视复杂的存储算法（去冗，加密，压缩，空白块存储），更少浪费的时间周期意味着更好的性能。\n\n其次，轮询模式驱动（Polled Mode Drivers, PMDs）会持续工作，而不是被派遣工作。考虑在一个忙碌的周六晚上的市区打车，不断招手，一辆又一辆后座已经有乘客的计程车驶过。这样的等待是不可预测的，不可能说清楚花掉多少分钟之后能打到车。打车就像在传统的中断-派遣存储I/O驱动中等待一个包或一个数据块传输。另一方面，想象在机场打车的过程中，队首的计程车司机观察，只需要固定的几秒钟就可以载上乘客并驶向目的地。这就是PMDs怎么工作的，SPDK的所有组件怎么设计的。数据包和数据块被立即分派，因为等待花掉的时间变小，使得延迟更低，一致性延迟更多（抖动更少），吞吐量也得到提高。\n\nSPDK由数个子组件构成，相互连接并共享用户态和轮询模式的共有部分。当构造端对端SPDK体系结构时，每个组件被构造用于克服遭遇到的特定的性能瓶颈。然而，每个组件也可以被整合进非SPDK体系结构，允许用户使用SPDK影响经验和技术而加速他们自己的软件。举例来说，用户态网络服务（Userspace Network Services, UNS）库被构造用来克服Linux内核TCP/IP协议栈的性能限制。通过构造一个用户态，轮序模式的TCP/IP协议栈，SPDK可以通过更少的处理器时钟周期处理TCP/IP包排序和处理，获得地更高的IOPS性能。\n\n![SPDK Architecture](https://software.intel.com/sites/default/files/managed/a8/ff/introduction-to-the-storage-performance-development-kit-spdk-fig2.png)\n\n一共三种基本类型的子组件：网络前端，处理框架，后端。\n\n前端是由数据平面开发工具集（Data Plane Development Kit, DPDK）网卡驱动和UNS组成。DPDK提供一个高性能的在网卡中处理数据包的框架，提供一个从网卡到用户空间的数据到达的快速路径。然后UNS代码进行接管，破解TCP/IP数据包形成iSCSI命令。\n\n这时，处理框架得到数据包内容并翻译iSCSI命令为SCSI块级命令。然而，在它把这些命令发送到后端驱动之前，SPDK提供一个API框架增加用户特定的功能——“special sauce”，到SPDK框架中（上图绿色框内）。很多例子，包括缓存，数据的去冗和压缩，磁盘阵列（RAID），和纠删码计算。这些功能都包含在SPDK中，虽然这些功能只是为了帮助我们构建真实世界的用例，不应该和产品级实现混淆。\n\n最终，数据到达后端驱动，在这里与物理块设备交互发生，就是读或写。SPDK包括针对几种存储媒介的用户态PMDs；NVMe设备；Linux AIO设备，比如传统磁盘；基于块地址的内存应用的内存驱动（比如，RAMDISKS）；和可以用Intel I/O加速技术（Intel I/O Acceleration Technology，代号为Crystal Beach DMA，CBDMA）的设备。这套后端驱动涵盖了不同层次性能的存储设备，保证了几乎每种存储应用的相关性。\n\nSPDK不适应所有的存储体系结构。这里有一些问题可能会帮助用户决定SPDK组件是否适合他们的体系结构。\n\n**这个存储系统是否基于Linux？**\nSPDK现在只在Linux上测试和支持。\n\n**这个存储系统的高性能路径是否运行在用户态？**\nSPDK通过仅在用户态下运行从网卡到磁盘的高性能路径，提高性能和效率。\n\n**系统体系结构可以合并无锁的PMDs到它的线程模型吗？**\n因为PMD持续运行在它们的线程中（而不是睡眠或者不用时让出处理器），所以它们有特殊的线程模型需求\n\n**系统现在是否用DPDK处理网络数据包的工作负载**\nDPDK包含了SPDK的框架，所以现在使用DPDK的用户就会发现与SPDK紧密整合非常有用。\n\n**你们的许可模型可以使用非可再分发源吗？**\nSPDK的一部分是作为开源可获得的，BSD许可组件（比如NVMe和CBDMA用户态驱动）。而其他部分暂时是Intel许可下（UNS和用户态iSCSI对象），但是它肯定会改变，所有的SPDK源代码免费提供。\n\n**开发团队自己是否具有理解和解决问题的专业技能？**\nIntel没有为相关软件提供支持的义务。当Intel和围绕SPDK的开源社区将付出商业上合理的努力去调出未修改的发布版本软件的潜在错误，任何情况下Intel都没有任务义务为用户提供针对该软件任何形式的维护和支持。\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","slug":"spdk","published":1,"updated":"2017-05-08T17:13:44.000Z","_id":"cj2gdu6jy000hv1o3x1kqhdbb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>SPDK（Storage Performance Development Kit）是Intel发布的存储性能开发工具集。</p>\n<blockquote>\n<p>原文：<a href=\"https://software.intel.com/en-us/articles/introduction-to-the-storage-performance-development-kit-spdk\" target=\"_blank\" rel=\"external\">《Introduction to the Storage Performance Development Kit (SPDK)》</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<p><strong>Title: <a href=\"https://aidaizyy.github.io/spdk\" target=\"_blank\" rel=\"external\">SPDK简介</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#109;&#97;&#105;&#108;&#x74;&#x6f;&#58;&#97;&#105;&#100;&#97;&#x69;&#122;&#121;&#121;&#x40;&#x67;&#109;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#109;\">&#97;&#105;&#100;&#97;&#x69;&#122;&#121;&#121;&#x40;&#x67;&#109;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#109;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2016-08-16</a></strong></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>固态存储媒介正在取代数据中心。目前这一代的闪存存储，比起传统的磁盘介质，在性能（performance）、功耗（power consumption）和机架密度（rack density）上具有显著的优势。这些优势将会继续增大，使闪存存储作为下一代媒介进入市场。</p>\n<p>用户使用现在的固态媒介，比如Intel® SSD DC P3700 Series Non-Volatile Memory Express（NVMe）驱动，面临一个主要的挑战：因为吞吐量和延迟性能比传统的磁盘好太多，现在总的处理时间中，存储软件占用了更大的比例。换句话说，存储软件栈的性能和效率在整个存储系统中越来越重要。随着存储媒介继续发展，它将面临远远超过正在使用的软件体系结构的风险（即存储媒介受制于相关软件的不足而不能发挥全部性能），在接下来的几年中，存储媒介将会继续发展到一个令人难以置信的地步。</p>\n<p>为了帮助存储OEM（设备代工厂）和ISV（独立软件开发商）整合硬件，Inte构造了一系列驱动，以及一个完善的、端对端的参考存储体系结构，被命名为Storage Performance Development Kit（SPDK）。SPDK的目标是通过同时使用Intel的网络技术，处理技术和存储技术来提高突出显著的效率和性能。通过运行为硬件设计的软件，SPDK已经证明很容易达到每秒钟数百万次I/O读取，通过使用许多处理器核心和许多NVMe驱动去存储，而不需要额外卸载硬件。Intel在<a href=\"https://github.com/spdk/spdk/blob/master/LICENSE\" target=\"_blank\" rel=\"external\">BSD license</a>许可协议下通过<a href=\"https://github.com/spdk\" target=\"_blank\" rel=\"external\">Github</a>分发提供其全部的Linux参考架构的源代码。博客、邮件列表和额外文档可以在<a href=\"http://www.spdk.io\" target=\"_blank\" rel=\"external\">spdk.io</a>中找到。</p>\n<h2 id=\"软件体系结构概览\"><a href=\"#软件体系结构概览\" class=\"headerlink\" title=\"软件体系结构概览\"></a>软件体系结构概览</h2><p>SPDK如何工作？达到这样的超高性能运用了两个关键技术：运行于用户态和轮询模式。让我们进一步了解这两个软件工程术语。</p>\n<p>首先，我们的设备驱动代码运行在用户态意味着，在定义上，驱动代码不会运行在内核中。避免内核上下文切换和中断将会节省大量的处理开销，允许更多的时钟周期被用来做实际的数据存储。无视复杂的存储算法（去冗，加密，压缩，空白块存储），更少浪费的时间周期意味着更好的性能。</p>\n<p>其次，轮询模式驱动（Polled Mode Drivers, PMDs）会持续工作，而不是被派遣工作。考虑在一个忙碌的周六晚上的市区打车，不断招手，一辆又一辆后座已经有乘客的计程车驶过。这样的等待是不可预测的，不可能说清楚花掉多少分钟之后能打到车。打车就像在传统的中断-派遣存储I/O驱动中等待一个包或一个数据块传输。另一方面，想象在机场打车的过程中，队首的计程车司机观察，只需要固定的几秒钟就可以载上乘客并驶向目的地。这就是PMDs怎么工作的，SPDK的所有组件怎么设计的。数据包和数据块被立即分派，因为等待花掉的时间变小，使得延迟更低，一致性延迟更多（抖动更少），吞吐量也得到提高。</p>\n<p>SPDK由数个子组件构成，相互连接并共享用户态和轮询模式的共有部分。当构造端对端SPDK体系结构时，每个组件被构造用于克服遭遇到的特定的性能瓶颈。然而，每个组件也可以被整合进非SPDK体系结构，允许用户使用SPDK影响经验和技术而加速他们自己的软件。举例来说，用户态网络服务（Userspace Network Services, UNS）库被构造用来克服Linux内核TCP/IP协议栈的性能限制。通过构造一个用户态，轮序模式的TCP/IP协议栈，SPDK可以通过更少的处理器时钟周期处理TCP/IP包排序和处理，获得地更高的IOPS性能。</p>\n<p><img src=\"https://software.intel.com/sites/default/files/managed/a8/ff/introduction-to-the-storage-performance-development-kit-spdk-fig2.png\" alt=\"SPDK Architecture\"></p>\n<p>一共三种基本类型的子组件：网络前端，处理框架，后端。</p>\n<p>前端是由数据平面开发工具集（Data Plane Development Kit, DPDK）网卡驱动和UNS组成。DPDK提供一个高性能的在网卡中处理数据包的框架，提供一个从网卡到用户空间的数据到达的快速路径。然后UNS代码进行接管，破解TCP/IP数据包形成iSCSI命令。</p>\n<p>这时，处理框架得到数据包内容并翻译iSCSI命令为SCSI块级命令。然而，在它把这些命令发送到后端驱动之前，SPDK提供一个API框架增加用户特定的功能——“special sauce”，到SPDK框架中（上图绿色框内）。很多例子，包括缓存，数据的去冗和压缩，磁盘阵列（RAID），和纠删码计算。这些功能都包含在SPDK中，虽然这些功能只是为了帮助我们构建真实世界的用例，不应该和产品级实现混淆。</p>\n<p>最终，数据到达后端驱动，在这里与物理块设备交互发生，就是读或写。SPDK包括针对几种存储媒介的用户态PMDs；NVMe设备；Linux AIO设备，比如传统磁盘；基于块地址的内存应用的内存驱动（比如，RAMDISKS）；和可以用Intel I/O加速技术（Intel I/O Acceleration Technology，代号为Crystal Beach DMA，CBDMA）的设备。这套后端驱动涵盖了不同层次性能的存储设备，保证了几乎每种存储应用的相关性。</p>\n<p>SPDK不适应所有的存储体系结构。这里有一些问题可能会帮助用户决定SPDK组件是否适合他们的体系结构。</p>\n<p><strong>这个存储系统是否基于Linux？</strong><br>SPDK现在只在Linux上测试和支持。</p>\n<p><strong>这个存储系统的高性能路径是否运行在用户态？</strong><br>SPDK通过仅在用户态下运行从网卡到磁盘的高性能路径，提高性能和效率。</p>\n<p><strong>系统体系结构可以合并无锁的PMDs到它的线程模型吗？</strong><br>因为PMD持续运行在它们的线程中（而不是睡眠或者不用时让出处理器），所以它们有特殊的线程模型需求</p>\n<p><strong>系统现在是否用DPDK处理网络数据包的工作负载</strong><br>DPDK包含了SPDK的框架，所以现在使用DPDK的用户就会发现与SPDK紧密整合非常有用。</p>\n<p><strong>你们的许可模型可以使用非可再分发源吗？</strong><br>SPDK的一部分是作为开源可获得的，BSD许可组件（比如NVMe和CBDMA用户态驱动）。而其他部分暂时是Intel许可下（UNS和用户态iSCSI对象），但是它肯定会改变，所有的SPDK源代码免费提供。</p>\n<p><strong>开发团队自己是否具有理解和解决问题的专业技能？</strong><br>Intel没有为相关软件提供支持的义务。当Intel和围绕SPDK的开源社区将付出商业上合理的努力去调出未修改的发布版本软件的潜在错误，任何情况下Intel都没有任务义务为用户提供针对该软件任何形式的维护和支持。</p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>SPDK（Storage Performance Development Kit）是Intel发布的存储性能开发工具集。</p>\n<blockquote>\n<p>原文：<a href=\"https://software.intel.com/en-us/articles/introduction-to-the-storage-performance-development-kit-spdk\" target=\"_blank\" rel=\"external\">《Introduction to the Storage Performance Development Kit (SPDK)》</a></p>\n</blockquote>","more":"<p><strong>Title: <a href=\"https://aidaizyy.github.io/spdk\" target=\"_blank\" rel=\"external\">SPDK简介</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#109;&#97;&#105;&#108;&#x74;&#x6f;&#58;&#97;&#105;&#100;&#97;&#x69;&#122;&#121;&#121;&#x40;&#x67;&#109;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#109;\">&#97;&#105;&#100;&#97;&#x69;&#122;&#121;&#121;&#x40;&#x67;&#109;&#97;&#x69;&#108;&#46;&#x63;&#x6f;&#109;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2016-08-16</a></strong></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>固态存储媒介正在取代数据中心。目前这一代的闪存存储，比起传统的磁盘介质，在性能（performance）、功耗（power consumption）和机架密度（rack density）上具有显著的优势。这些优势将会继续增大，使闪存存储作为下一代媒介进入市场。</p>\n<p>用户使用现在的固态媒介，比如Intel® SSD DC P3700 Series Non-Volatile Memory Express（NVMe）驱动，面临一个主要的挑战：因为吞吐量和延迟性能比传统的磁盘好太多，现在总的处理时间中，存储软件占用了更大的比例。换句话说，存储软件栈的性能和效率在整个存储系统中越来越重要。随着存储媒介继续发展，它将面临远远超过正在使用的软件体系结构的风险（即存储媒介受制于相关软件的不足而不能发挥全部性能），在接下来的几年中，存储媒介将会继续发展到一个令人难以置信的地步。</p>\n<p>为了帮助存储OEM（设备代工厂）和ISV（独立软件开发商）整合硬件，Inte构造了一系列驱动，以及一个完善的、端对端的参考存储体系结构，被命名为Storage Performance Development Kit（SPDK）。SPDK的目标是通过同时使用Intel的网络技术，处理技术和存储技术来提高突出显著的效率和性能。通过运行为硬件设计的软件，SPDK已经证明很容易达到每秒钟数百万次I/O读取，通过使用许多处理器核心和许多NVMe驱动去存储，而不需要额外卸载硬件。Intel在<a href=\"https://github.com/spdk/spdk/blob/master/LICENSE\" target=\"_blank\" rel=\"external\">BSD license</a>许可协议下通过<a href=\"https://github.com/spdk\" target=\"_blank\" rel=\"external\">Github</a>分发提供其全部的Linux参考架构的源代码。博客、邮件列表和额外文档可以在<a href=\"http://www.spdk.io\" target=\"_blank\" rel=\"external\">spdk.io</a>中找到。</p>\n<h2 id=\"软件体系结构概览\"><a href=\"#软件体系结构概览\" class=\"headerlink\" title=\"软件体系结构概览\"></a>软件体系结构概览</h2><p>SPDK如何工作？达到这样的超高性能运用了两个关键技术：运行于用户态和轮询模式。让我们进一步了解这两个软件工程术语。</p>\n<p>首先，我们的设备驱动代码运行在用户态意味着，在定义上，驱动代码不会运行在内核中。避免内核上下文切换和中断将会节省大量的处理开销，允许更多的时钟周期被用来做实际的数据存储。无视复杂的存储算法（去冗，加密，压缩，空白块存储），更少浪费的时间周期意味着更好的性能。</p>\n<p>其次，轮询模式驱动（Polled Mode Drivers, PMDs）会持续工作，而不是被派遣工作。考虑在一个忙碌的周六晚上的市区打车，不断招手，一辆又一辆后座已经有乘客的计程车驶过。这样的等待是不可预测的，不可能说清楚花掉多少分钟之后能打到车。打车就像在传统的中断-派遣存储I/O驱动中等待一个包或一个数据块传输。另一方面，想象在机场打车的过程中，队首的计程车司机观察，只需要固定的几秒钟就可以载上乘客并驶向目的地。这就是PMDs怎么工作的，SPDK的所有组件怎么设计的。数据包和数据块被立即分派，因为等待花掉的时间变小，使得延迟更低，一致性延迟更多（抖动更少），吞吐量也得到提高。</p>\n<p>SPDK由数个子组件构成，相互连接并共享用户态和轮询模式的共有部分。当构造端对端SPDK体系结构时，每个组件被构造用于克服遭遇到的特定的性能瓶颈。然而，每个组件也可以被整合进非SPDK体系结构，允许用户使用SPDK影响经验和技术而加速他们自己的软件。举例来说，用户态网络服务（Userspace Network Services, UNS）库被构造用来克服Linux内核TCP/IP协议栈的性能限制。通过构造一个用户态，轮序模式的TCP/IP协议栈，SPDK可以通过更少的处理器时钟周期处理TCP/IP包排序和处理，获得地更高的IOPS性能。</p>\n<p><img src=\"https://software.intel.com/sites/default/files/managed/a8/ff/introduction-to-the-storage-performance-development-kit-spdk-fig2.png\" alt=\"SPDK Architecture\"></p>\n<p>一共三种基本类型的子组件：网络前端，处理框架，后端。</p>\n<p>前端是由数据平面开发工具集（Data Plane Development Kit, DPDK）网卡驱动和UNS组成。DPDK提供一个高性能的在网卡中处理数据包的框架，提供一个从网卡到用户空间的数据到达的快速路径。然后UNS代码进行接管，破解TCP/IP数据包形成iSCSI命令。</p>\n<p>这时，处理框架得到数据包内容并翻译iSCSI命令为SCSI块级命令。然而，在它把这些命令发送到后端驱动之前，SPDK提供一个API框架增加用户特定的功能——“special sauce”，到SPDK框架中（上图绿色框内）。很多例子，包括缓存，数据的去冗和压缩，磁盘阵列（RAID），和纠删码计算。这些功能都包含在SPDK中，虽然这些功能只是为了帮助我们构建真实世界的用例，不应该和产品级实现混淆。</p>\n<p>最终，数据到达后端驱动，在这里与物理块设备交互发生，就是读或写。SPDK包括针对几种存储媒介的用户态PMDs；NVMe设备；Linux AIO设备，比如传统磁盘；基于块地址的内存应用的内存驱动（比如，RAMDISKS）；和可以用Intel I/O加速技术（Intel I/O Acceleration Technology，代号为Crystal Beach DMA，CBDMA）的设备。这套后端驱动涵盖了不同层次性能的存储设备，保证了几乎每种存储应用的相关性。</p>\n<p>SPDK不适应所有的存储体系结构。这里有一些问题可能会帮助用户决定SPDK组件是否适合他们的体系结构。</p>\n<p><strong>这个存储系统是否基于Linux？</strong><br>SPDK现在只在Linux上测试和支持。</p>\n<p><strong>这个存储系统的高性能路径是否运行在用户态？</strong><br>SPDK通过仅在用户态下运行从网卡到磁盘的高性能路径，提高性能和效率。</p>\n<p><strong>系统体系结构可以合并无锁的PMDs到它的线程模型吗？</strong><br>因为PMD持续运行在它们的线程中（而不是睡眠或者不用时让出处理器），所以它们有特殊的线程模型需求</p>\n<p><strong>系统现在是否用DPDK处理网络数据包的工作负载</strong><br>DPDK包含了SPDK的框架，所以现在使用DPDK的用户就会发现与SPDK紧密整合非常有用。</p>\n<p><strong>你们的许可模型可以使用非可再分发源吗？</strong><br>SPDK的一部分是作为开源可获得的，BSD许可组件（比如NVMe和CBDMA用户态驱动）。而其他部分暂时是Intel许可下（UNS和用户态iSCSI对象），但是它肯定会改变，所有的SPDK源代码免费提供。</p>\n<p><strong>开发团队自己是否具有理解和解决问题的专业技能？</strong><br>Intel没有为相关软件提供支持的义务。当Intel和围绕SPDK的开源社区将付出商业上合理的努力去调出未修改的发布版本软件的潜在错误，任何情况下Intel都没有任务义务为用户提供针对该软件任何形式的维护和支持。</p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>"},{"title":"SSH秘钥与SSHFS挂载","toc":true,"date":"2016-08-25T07:37:54.000Z","_content":"\nSSH通过秘钥（公钥与私钥）完成免密SSH连接。\nSSHFS挂载远程目录到本地，本地操作同步到远程目录。\n<!--more-->\n**Title: [SSH秘钥与SSHFS挂载](https://aidaizyy.github.io/ssh)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2016-08-25](http://aidaizyy.github.io)**\n\n## 查看已有的秘钥\n``` bash\ncd ~/.ssh\nls\n```\n以.pub结尾的文件就是公钥，而与.pub前字符串相同的文件就是与之对应的私钥。\n## 创建新的秘钥\n``` bash\nssh-keygen -t rsa -C “usr@email”\n```\n参数“rsa”是加密方式，其他可选的加密方式有dsa；\n参数“-C”后面接注释。\n创建过程中会要求输入存放的文件名，直接回车默认是id_rsa和id_rsa.pub或id_dsa和id_dsa.pub；\n还会要求输入密码，直接回车默认为空。\n## 机器A登录机器B\n在.ssh目录下有authorized_keys文件，把机器A生成的公钥拷贝到机器B的authorized_keys文件中，机器A就可以免密登录机器B；\n## 设置文件和目录权限\n一般依据默认权限，如果不小心删除了，新建文件和目录，就必须设置权限。\n``` bash\nchmod 600 authorized_keys\nchmod 700 -R .ssh\n```\n## 添加秘钥到SSH-AGENT\nssh-agent就是秘钥管理器，需要把私钥添加进去才可以使用ssh;\n先确保ssh-agent是否可用：\n``` bash\neval \"$(ssh-agent -s)\"\n-> Agent pid 59566\n```\n然后添加私钥：\n``` bash\nssh-add ~/.ssh/id_rsa\n```\n可以查看ssh-agent中已有的私钥：\n``` bash\nssh-add -l\n```\n## SSH连接服务器\n``` bash\nssh usrname@ipaddr\n```\nlogout：注销用户，exit：逐层退出控制台。\n## GitHub和Coding公钥添加\n在各自的设置页面，把公钥，也就是.pub文件中的内容拷贝到设置中指定的输入框即可生效；对应的私钥需要添加到ssh-agent中。\ngithub的ssh秘钥是否生效可以进行测试：\n``` bash\nssh git@github.com\n```\n## SSHFS挂载\n在配置ssh秘钥免密登录后，可以用sshfs把远程目录挂载到本地上，比如把服务器上的目录挂载过来，通过本地的编程环境（IDE、插件等）编辑代码文件。\nLinux系统直接通过apt-get或者yum安装sshfs。\nMac OS X系统需要安装osxfuse和其对应的sshfs：\n安装FUSE for OS X：https://osxfuse.github.io；\n安装SSHFS：https://github.com/osxfuse/sshfs/releases；\n两者都可以通过brew安装。\n``` bash\nsshfs -o allow_other user@host:dir localdir\n```\nuser指远程用户名，host指远程主机地址，dir指要挂载的远程目录，localdir指挂载到的本地目录。\n-o 后面接相关参数，比如：\n* -o reconnect：自动重连\n* -o allow_other：无视用户权限\n* -o cache=yes：支持cache\n\n卸载远程目录，使用卸载设备命令“umount”。\n``` bash\numount localdir\n```\n\n其他相关参数可以查阅资料或者通过`sshfs -h`了解。\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","source":"_posts/ssh.md","raw":"title: SSH秘钥与SSHFS挂载\ntoc: true\ndate: 2016-08-25 15:37:54\ntags:\ncategories: linux\n---\n\nSSH通过秘钥（公钥与私钥）完成免密SSH连接。\nSSHFS挂载远程目录到本地，本地操作同步到远程目录。\n<!--more-->\n**Title: [SSH秘钥与SSHFS挂载](https://aidaizyy.github.io/ssh)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2016-08-25](http://aidaizyy.github.io)**\n\n## 查看已有的秘钥\n``` bash\ncd ~/.ssh\nls\n```\n以.pub结尾的文件就是公钥，而与.pub前字符串相同的文件就是与之对应的私钥。\n## 创建新的秘钥\n``` bash\nssh-keygen -t rsa -C “usr@email”\n```\n参数“rsa”是加密方式，其他可选的加密方式有dsa；\n参数“-C”后面接注释。\n创建过程中会要求输入存放的文件名，直接回车默认是id_rsa和id_rsa.pub或id_dsa和id_dsa.pub；\n还会要求输入密码，直接回车默认为空。\n## 机器A登录机器B\n在.ssh目录下有authorized_keys文件，把机器A生成的公钥拷贝到机器B的authorized_keys文件中，机器A就可以免密登录机器B；\n## 设置文件和目录权限\n一般依据默认权限，如果不小心删除了，新建文件和目录，就必须设置权限。\n``` bash\nchmod 600 authorized_keys\nchmod 700 -R .ssh\n```\n## 添加秘钥到SSH-AGENT\nssh-agent就是秘钥管理器，需要把私钥添加进去才可以使用ssh;\n先确保ssh-agent是否可用：\n``` bash\neval \"$(ssh-agent -s)\"\n-> Agent pid 59566\n```\n然后添加私钥：\n``` bash\nssh-add ~/.ssh/id_rsa\n```\n可以查看ssh-agent中已有的私钥：\n``` bash\nssh-add -l\n```\n## SSH连接服务器\n``` bash\nssh usrname@ipaddr\n```\nlogout：注销用户，exit：逐层退出控制台。\n## GitHub和Coding公钥添加\n在各自的设置页面，把公钥，也就是.pub文件中的内容拷贝到设置中指定的输入框即可生效；对应的私钥需要添加到ssh-agent中。\ngithub的ssh秘钥是否生效可以进行测试：\n``` bash\nssh git@github.com\n```\n## SSHFS挂载\n在配置ssh秘钥免密登录后，可以用sshfs把远程目录挂载到本地上，比如把服务器上的目录挂载过来，通过本地的编程环境（IDE、插件等）编辑代码文件。\nLinux系统直接通过apt-get或者yum安装sshfs。\nMac OS X系统需要安装osxfuse和其对应的sshfs：\n安装FUSE for OS X：https://osxfuse.github.io；\n安装SSHFS：https://github.com/osxfuse/sshfs/releases；\n两者都可以通过brew安装。\n``` bash\nsshfs -o allow_other user@host:dir localdir\n```\nuser指远程用户名，host指远程主机地址，dir指要挂载的远程目录，localdir指挂载到的本地目录。\n-o 后面接相关参数，比如：\n* -o reconnect：自动重连\n* -o allow_other：无视用户权限\n* -o cache=yes：支持cache\n\n卸载远程目录，使用卸载设备命令“umount”。\n``` bash\numount localdir\n```\n\n其他相关参数可以查阅资料或者通过`sshfs -h`了解。\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","slug":"ssh","published":1,"updated":"2017-05-08T16:40:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2gdu6k0000jv1o3iiyfnmdt","content":"<p>SSH通过秘钥（公钥与私钥）完成免密SSH连接。<br>SSHFS挂载远程目录到本地，本地操作同步到远程目录。<br><a id=\"more\"></a><br><strong>Title: <a href=\"https://aidaizyy.github.io/ssh\" target=\"_blank\" rel=\"external\">SSH秘钥与SSHFS挂载</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#109;&#x61;&#105;&#x6c;&#x74;&#111;&#58;&#97;&#105;&#100;&#x61;&#105;&#x7a;&#121;&#x79;&#64;&#x67;&#x6d;&#x61;&#105;&#108;&#x2e;&#x63;&#111;&#109;\">&#97;&#105;&#100;&#x61;&#105;&#x7a;&#121;&#x79;&#64;&#x67;&#x6d;&#x61;&#105;&#108;&#x2e;&#x63;&#111;&#109;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2016-08-25</a></strong></p>\n<h2 id=\"查看已有的秘钥\"><a href=\"#查看已有的秘钥\" class=\"headerlink\" title=\"查看已有的秘钥\"></a>查看已有的秘钥</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> ~/.ssh</div><div class=\"line\">ls</div></pre></td></tr></table></figure>\n<p>以.pub结尾的文件就是公钥，而与.pub前字符串相同的文件就是与之对应的私钥。</p>\n<h2 id=\"创建新的秘钥\"><a href=\"#创建新的秘钥\" class=\"headerlink\" title=\"创建新的秘钥\"></a>创建新的秘钥</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen -t rsa -C “usr@email”</div></pre></td></tr></table></figure>\n<p>参数“rsa”是加密方式，其他可选的加密方式有dsa；<br>参数“-C”后面接注释。<br>创建过程中会要求输入存放的文件名，直接回车默认是id_rsa和id_rsa.pub或id_dsa和id_dsa.pub；<br>还会要求输入密码，直接回车默认为空。</p>\n<h2 id=\"机器A登录机器B\"><a href=\"#机器A登录机器B\" class=\"headerlink\" title=\"机器A登录机器B\"></a>机器A登录机器B</h2><p>在.ssh目录下有authorized_keys文件，把机器A生成的公钥拷贝到机器B的authorized_keys文件中，机器A就可以免密登录机器B；</p>\n<h2 id=\"设置文件和目录权限\"><a href=\"#设置文件和目录权限\" class=\"headerlink\" title=\"设置文件和目录权限\"></a>设置文件和目录权限</h2><p>一般依据默认权限，如果不小心删除了，新建文件和目录，就必须设置权限。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod 600 authorized_keys</div><div class=\"line\">chmod 700 -R .ssh</div></pre></td></tr></table></figure></p>\n<h2 id=\"添加秘钥到SSH-AGENT\"><a href=\"#添加秘钥到SSH-AGENT\" class=\"headerlink\" title=\"添加秘钥到SSH-AGENT\"></a>添加秘钥到SSH-AGENT</h2><p>ssh-agent就是秘钥管理器，需要把私钥添加进去才可以使用ssh;<br>先确保ssh-agent是否可用：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$(ssh-agent -s)</span>\"</span></div><div class=\"line\">-&gt; Agent pid 59566</div></pre></td></tr></table></figure></p>\n<p>然后添加私钥：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure></p>\n<p>可以查看ssh-agent中已有的私钥：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-add <span class=\"_\">-l</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"SSH连接服务器\"><a href=\"#SSH连接服务器\" class=\"headerlink\" title=\"SSH连接服务器\"></a>SSH连接服务器</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh usrname@ipaddr</div></pre></td></tr></table></figure>\n<p>logout：注销用户，exit：逐层退出控制台。</p>\n<h2 id=\"GitHub和Coding公钥添加\"><a href=\"#GitHub和Coding公钥添加\" class=\"headerlink\" title=\"GitHub和Coding公钥添加\"></a>GitHub和Coding公钥添加</h2><p>在各自的设置页面，把公钥，也就是.pub文件中的内容拷贝到设置中指定的输入框即可生效；对应的私钥需要添加到ssh-agent中。<br>github的ssh秘钥是否生效可以进行测试：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh git@github.com</div></pre></td></tr></table></figure></p>\n<h2 id=\"SSHFS挂载\"><a href=\"#SSHFS挂载\" class=\"headerlink\" title=\"SSHFS挂载\"></a>SSHFS挂载</h2><p>在配置ssh秘钥免密登录后，可以用sshfs把远程目录挂载到本地上，比如把服务器上的目录挂载过来，通过本地的编程环境（IDE、插件等）编辑代码文件。<br>Linux系统直接通过apt-get或者yum安装sshfs。<br>Mac OS X系统需要安装osxfuse和其对应的sshfs：<br>安装FUSE for OS X：<a href=\"https://osxfuse.github.io；\" target=\"_blank\" rel=\"external\">https://osxfuse.github.io；</a><br>安装SSHFS：<a href=\"https://github.com/osxfuse/sshfs/releases；\" target=\"_blank\" rel=\"external\">https://github.com/osxfuse/sshfs/releases；</a><br>两者都可以通过brew安装。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sshfs -o allow_other user@host:dir localdir</div></pre></td></tr></table></figure></p>\n<p>user指远程用户名，host指远程主机地址，dir指要挂载的远程目录，localdir指挂载到的本地目录。<br>-o 后面接相关参数，比如：</p>\n<ul>\n<li>-o reconnect：自动重连</li>\n<li>-o allow_other：无视用户权限</li>\n<li>-o cache=yes：支持cache</li>\n</ul>\n<p>卸载远程目录，使用卸载设备命令“umount”。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">umount localdir</div></pre></td></tr></table></figure></p>\n<p>其他相关参数可以查阅资料或者通过<code>sshfs -h</code>了解。</p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>SSH通过秘钥（公钥与私钥）完成免密SSH连接。<br>SSHFS挂载远程目录到本地，本地操作同步到远程目录。<br>","more":"<br><strong>Title: <a href=\"https://aidaizyy.github.io/ssh\" target=\"_blank\" rel=\"external\">SSH秘钥与SSHFS挂载</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#109;&#x61;&#105;&#x6c;&#x74;&#111;&#58;&#97;&#105;&#100;&#x61;&#105;&#x7a;&#121;&#x79;&#64;&#x67;&#x6d;&#x61;&#105;&#108;&#x2e;&#x63;&#111;&#109;\">&#97;&#105;&#100;&#x61;&#105;&#x7a;&#121;&#x79;&#64;&#x67;&#x6d;&#x61;&#105;&#108;&#x2e;&#x63;&#111;&#109;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2016-08-25</a></strong></p>\n<h2 id=\"查看已有的秘钥\"><a href=\"#查看已有的秘钥\" class=\"headerlink\" title=\"查看已有的秘钥\"></a>查看已有的秘钥</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> ~/.ssh</div><div class=\"line\">ls</div></pre></td></tr></table></figure>\n<p>以.pub结尾的文件就是公钥，而与.pub前字符串相同的文件就是与之对应的私钥。</p>\n<h2 id=\"创建新的秘钥\"><a href=\"#创建新的秘钥\" class=\"headerlink\" title=\"创建新的秘钥\"></a>创建新的秘钥</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-keygen -t rsa -C “usr@email”</div></pre></td></tr></table></figure>\n<p>参数“rsa”是加密方式，其他可选的加密方式有dsa；<br>参数“-C”后面接注释。<br>创建过程中会要求输入存放的文件名，直接回车默认是id_rsa和id_rsa.pub或id_dsa和id_dsa.pub；<br>还会要求输入密码，直接回车默认为空。</p>\n<h2 id=\"机器A登录机器B\"><a href=\"#机器A登录机器B\" class=\"headerlink\" title=\"机器A登录机器B\"></a>机器A登录机器B</h2><p>在.ssh目录下有authorized_keys文件，把机器A生成的公钥拷贝到机器B的authorized_keys文件中，机器A就可以免密登录机器B；</p>\n<h2 id=\"设置文件和目录权限\"><a href=\"#设置文件和目录权限\" class=\"headerlink\" title=\"设置文件和目录权限\"></a>设置文件和目录权限</h2><p>一般依据默认权限，如果不小心删除了，新建文件和目录，就必须设置权限。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod 600 authorized_keys</div><div class=\"line\">chmod 700 -R .ssh</div></pre></td></tr></table></figure></p>\n<h2 id=\"添加秘钥到SSH-AGENT\"><a href=\"#添加秘钥到SSH-AGENT\" class=\"headerlink\" title=\"添加秘钥到SSH-AGENT\"></a>添加秘钥到SSH-AGENT</h2><p>ssh-agent就是秘钥管理器，需要把私钥添加进去才可以使用ssh;<br>先确保ssh-agent是否可用：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">eval</span> <span class=\"string\">\"<span class=\"variable\">$(ssh-agent -s)</span>\"</span></div><div class=\"line\">-&gt; Agent pid 59566</div></pre></td></tr></table></figure></p>\n<p>然后添加私钥：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-add ~/.ssh/id_rsa</div></pre></td></tr></table></figure></p>\n<p>可以查看ssh-agent中已有的私钥：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh-add <span class=\"_\">-l</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"SSH连接服务器\"><a href=\"#SSH连接服务器\" class=\"headerlink\" title=\"SSH连接服务器\"></a>SSH连接服务器</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh usrname@ipaddr</div></pre></td></tr></table></figure>\n<p>logout：注销用户，exit：逐层退出控制台。</p>\n<h2 id=\"GitHub和Coding公钥添加\"><a href=\"#GitHub和Coding公钥添加\" class=\"headerlink\" title=\"GitHub和Coding公钥添加\"></a>GitHub和Coding公钥添加</h2><p>在各自的设置页面，把公钥，也就是.pub文件中的内容拷贝到设置中指定的输入框即可生效；对应的私钥需要添加到ssh-agent中。<br>github的ssh秘钥是否生效可以进行测试：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ssh git@github.com</div></pre></td></tr></table></figure></p>\n<h2 id=\"SSHFS挂载\"><a href=\"#SSHFS挂载\" class=\"headerlink\" title=\"SSHFS挂载\"></a>SSHFS挂载</h2><p>在配置ssh秘钥免密登录后，可以用sshfs把远程目录挂载到本地上，比如把服务器上的目录挂载过来，通过本地的编程环境（IDE、插件等）编辑代码文件。<br>Linux系统直接通过apt-get或者yum安装sshfs。<br>Mac OS X系统需要安装osxfuse和其对应的sshfs：<br>安装FUSE for OS X：<a href=\"https://osxfuse.github.io；\" target=\"_blank\" rel=\"external\">https://osxfuse.github.io；</a><br>安装SSHFS：<a href=\"https://github.com/osxfuse/sshfs/releases；\" target=\"_blank\" rel=\"external\">https://github.com/osxfuse/sshfs/releases；</a><br>两者都可以通过brew安装。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">sshfs -o allow_other user@host:dir localdir</div></pre></td></tr></table></figure></p>\n<p>user指远程用户名，host指远程主机地址，dir指要挂载的远程目录，localdir指挂载到的本地目录。<br>-o 后面接相关参数，比如：</p>\n<ul>\n<li>-o reconnect：自动重连</li>\n<li>-o allow_other：无视用户权限</li>\n<li>-o cache=yes：支持cache</li>\n</ul>\n<p>卸载远程目录，使用卸载设备命令“umount”。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">umount localdir</div></pre></td></tr></table></figure></p>\n<p>其他相关参数可以查阅资料或者通过<code>sshfs -h</code>了解。</p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>"},{"title":"Swift基础入门(1)：常量变量，基本数据类型和基本运算符","date":"2015-07-14T07:23:13.000Z","toc":true,"_content":"\nSwift是苹果公司于2014年推出的用于iOS，OS X和watchOS应用开发的新语言。\n基于Swift 1.2。\n本篇介绍Swift的基础知识：常量变量，基本数据类型和基本运算符。\n\n<!--more-->\n**Title: [Swift基础入门(1)：常量变量，基本数据类型和基本运算符](https://aidaizyy.github.io/swift_1)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-07-15](http://aidaizyy.github.io)**\n\n## 概要\n\nSwift结合了C和Objectiv-C的特点，基于Cocoa和Cocoa Touch框架。\n本文主要讲述Swift的基本语法。\n\n## 常量变量\n\n### 命名\n\n常量变量命名不能包括数学符号，箭头，保留的Unicode码位，连线和制表符，不能以数字开头。\n\n### 声明\n\n声明常量使用`let`关键字，声明变量使用`var`关键字。\n一般可省略数据类型，通过赋予的第一个值来自动确定数据类型。\n``` swift\nlet maxNumber = 20\nvar currentNumber = 0, item = 0.1\n```\n在swift中，语句结束不需要加分号。（添加分号也没有问题）\n上面两句，声明了常量`maxNumber`，并赋值为20，这个值不能被改变。声明时可以不赋值，但之后只能赋值一次。\n声明了变量`currentNumber`和`item`，并赋值为0和0.1，可赋值多次。\n在一行中可声明多个常量或变量，用逗号隔开。\n`maxNumber`和`currentNumber`第一次赋值了整数，被确定为整数类型`Int`；`item`第一次赋值了小数，被确定为浮点数类型`Double`（未指定数据类型时，小数一定会被确定为`Double`而不是`Float`）。\n\n> 基本数据类型：\n- Int\n- Double\n- Float\n- Bool\n- String\n- Character\n\n声明常量变量时，也可以指定数据类型，通过在常量变量名称后接冒号再接数据类型名称来实现。\n``` swift\nvar currentNumer: Double = 5\nprintln(currentNumber)\t//输出currentNumber的值\n```\n上面两句输出结果为`5.0`，因为`currentNumber`指定为`Double`类型，即使给它赋值了整数5。\n\n### 输出\n\n`println`和`print`函数都是输出函数，区别在于前者在输出末尾加上了换行符。\n\n输出常量变量：\n``` swift\nvar currentNumer: Double = 5\nprintln(\"The current number is \\(currentNumber)\")\n```\n上面两句输出结果为`The current number is 0.5`。\n通过`\\(常量变量)`将常量变量转换为字符串并在`println`语句中输出。\n\n### 注释\n\n和C语言类似，注释分为单行注释`//`和多行注释`/*  */`\n``` swift\nvar single\t//单行注释\n\n/* 多行注释 */\n```\n不一样的地方在于，swift的`/* */`可以嵌套。\n\n## 基本数据类型\n\n### 整数\n\n整数分为`Int8`，`UInt8`，`Int16`，`UInt16`，`Int32`，`UInt32`，`Int64`，`UInt64`，分别对应8，16，32，64位的有符号整数类型和无符号整数类型。\n一般`Int`指`Int32`（32位电脑）或`Int64`（64位电脑）。\n整数类型都有`min`和`max`两个方法。\n``` swift\nvar tmp = Int.max\nprintln(tmp)\n```\n结果为`9223372036854775807`（64位电脑）。\n\n``` swift\nlet decimalInteger = 17\t\t//十进制表示17\nlet binaryInteger = 0b1001\t//二进制表示17\nlet octalInteger = 0o21\t\t//八进制表示17\nlet hexadecimalInteger = 0x11\t//十六进制表示17\n```\n二进制，八进制和十六进制分别加前缀`0b`，`0o`，`0x`表示。\n\n### 浮点数\n\n- Double：64位浮点数，至少15位数字\n- Float：32位浮点数，最少6位数字\n\n``` swift\nlet decimalDouble = 12.1875\t//十进制表示12.1875\nlet exponentDouble = 1.21875e1\t//十进制指数表示12.1875\nlet hexadecimalDouble = 0xC.3p0\t//十六进制指数表示12.1875\n```\n浮点数字面量可以用十进制和十六进制表示，指数分别用`e`和`p`表示。\n\n数值型字面量都可以加0或_，不影响数值，比如`000_1_000.000_000_1`等于`1000.0000001`。\n\n### 布尔值\n\n`Bool`有两个值`true`和`false`。\n\n### 可选类型\n\n>可选类型（_optionals)用来表示值可能丢失的情况：\n- 有值且等于x\n- 没有值\n\n- 有无值判断\n可以通过条件语句判断，`if optional != nil`，结果为`ture`即表示有值，否则表示无值。\n\n- 强制解析\n在名字后面加`!`强制获取可选类型的值，但必须在有值的情况下，否则会报错，`optional!`。\n\n- 可选绑定\n``` swift\nlet optionalValue: Int? = 123\nif let actualValue = optionalValue {\n} else {\n}\n```\n`Int?`在数据类型后面加`?`表示包含该数据类型的可选类型，`optionalValue`表示包含`123`的可选类型，如果包含值，则赋值给`actualValue`，并返回`true`，否则返回`false`。\n\n- 无值：nil\n``` swift\nvar optionalInt: Int? = 123\noptionalInt = nil\n\nvar optionalStr: String?\n```\n可选类型可以被赋值为nil，即表示无值，这表示一个确定的值。\n如果可选类型声明时没有赋值，则自动赋值为nil。\n\n- 隐式解析\n声明时将数据类型后面的`?`改为`!`，表示一个隐式解析可选类型，即每次自动解析，使用时可直接用常量变量名称。\n\n### 断言\n可选类型无值可能会影响程序运行，在某些特定情况下，需要终止程序，我们使用断言。\n断言类似于条件判断语句，不同点在于，结果为`false`时直接终止程序。\n``` swift\nlet age = -3\nassert(age >= 0, \"age cannot be less than zero\")\n```\n`assert`的第二个参数描述信息可以省略。\n\n### 元组\n\n元组（_tuples_）把多个数据类型组合成一个复合的数据类型。\n``` swift\nlet httpStatus1 = (statusCode: 200, description: \"OK\")\nprintln(httpStatus1.statusCode, httpStatus1.description)\n//输出“200OK”\n\nlet httpStatus2 = (200, \"OK\")\nprintln(httpStatus2.0, httpStatus2.1)\n//输出“200OK”\n\nlet (statusCode, statusMessage) = httpStatus2\nprintln(statusCode, statusMessage)\n//输出“200OK”\n\nlet (statusCode, _) = httpStatus2\nprintln(statusCode)\n//输出“200”\n```\n元组用括号`(Int, String)`表示一个整数和一个字符串组合，可以给元组的单个元素命名，比如第1行的`statusCode`和`description`，调用时直接用`httpStatus1.statusCode`和`httpStatus2.description`表示；如果不命名，则用`.0`和`.1`表示。\n也可以把元组内容分解，比如第9行，分别用`statusCode`和`statusMessage`存储元组`httpStatus2`对应的元素。分解过程中忽略的部分可用`_`表示，比如第13行，只使`statusCode`存储元组`httpStatus2`的第一个元素，忽略第二个元素。\n\n### 类型别名\n\n``` swift\ntypealias tmpType = Int\nlet tmpValue: tmpType = 4\n```\n通过`typealias`关键字，给现有的数据类型再起一个新的名字，可替代使用。\n常量`tmpValue`的数据类型就是`Int`。\n\n### 类型转换\n\n- Int，Double，Float：\n`Int16`与`Int8`不能直接相加，需要通过`Int16(Int8)`转换。\n同样，`Double`与`Int`也不能相加，也需要通过`Double(Int)`转换，如果只需要整数部分，也可以通过`Int(Double)`转换。\n\n- String，Int：\nString->Int：`String.toInt()`函数可以把`String`转换成可选类型`Int?`，因为`String`中不一定能转换成`Int`，所以得到可选类型。\nInt->String：`String(Int)`函数可以把`Int`转换成`String`。\n\n## 基本运算符\n\n### 普通运算符\n\n大部分基本运算符和主流语言一致：\n- +：加\n- -：减\n- *：乘\n- /：除\n- =：赋值\n        - 不返回值，将`if a == b`误写成`if a = b`会出现编译错误。\n        - 元组赋值，`let (x, y) = (1, 2)`，表示`x = 1`且`y = 2`。\n- %：求余\n        - 除了整数，也可以对浮点数求余，`8 % 2.5`等于`Double`值`0.5`。\n- ++：自增\n- --：自减\n        - 除了整数，浮点数也可以自增和自减。\n- -：负号\n- +：正号\n- +=, -=, *=, /=, %=：复合赋值\n- ==：等于\n- !=: 不等于\n- \\>, <, >=, <=：比较运算符\n- ===, !===：是否引用同一个对象实例\n- ? : ：三目运算符\n- &&：与\n- ||：或\n- !：非\n- ()：括号，确定运算先后顺序\n\n### 空合运算符（Nil Coalescing Operator）\n\n`a ?? b`：其中`a`必须是可选（_Optional_）类型，`b`的类型与a存储的值的类型一致。\n如果a包含一个值，就返回`a`包含的值；否则返回默认值`b`，等同于`a != nil ? a! : b`。\n\n### 区间运算符（Range Operator）\n\n`a..<b`，闭区间运算符，表示`a`到`b`的区间，包含`a`，不包含`b`；\n`a...b`，半开区间运算符，表示`a`到`b`的区间，包含`a`和`b`。\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","source":"_posts/swift_1.md","raw":"title: \"Swift基础入门(1)：常量变量，基本数据类型和基本运算符\"\ndate: 2015-07-14 15:23:13\ntags:\n- swift\ncategories: swift \ntoc: true\n---\n\nSwift是苹果公司于2014年推出的用于iOS，OS X和watchOS应用开发的新语言。\n基于Swift 1.2。\n本篇介绍Swift的基础知识：常量变量，基本数据类型和基本运算符。\n\n<!--more-->\n**Title: [Swift基础入门(1)：常量变量，基本数据类型和基本运算符](https://aidaizyy.github.io/swift_1)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-07-15](http://aidaizyy.github.io)**\n\n## 概要\n\nSwift结合了C和Objectiv-C的特点，基于Cocoa和Cocoa Touch框架。\n本文主要讲述Swift的基本语法。\n\n## 常量变量\n\n### 命名\n\n常量变量命名不能包括数学符号，箭头，保留的Unicode码位，连线和制表符，不能以数字开头。\n\n### 声明\n\n声明常量使用`let`关键字，声明变量使用`var`关键字。\n一般可省略数据类型，通过赋予的第一个值来自动确定数据类型。\n``` swift\nlet maxNumber = 20\nvar currentNumber = 0, item = 0.1\n```\n在swift中，语句结束不需要加分号。（添加分号也没有问题）\n上面两句，声明了常量`maxNumber`，并赋值为20，这个值不能被改变。声明时可以不赋值，但之后只能赋值一次。\n声明了变量`currentNumber`和`item`，并赋值为0和0.1，可赋值多次。\n在一行中可声明多个常量或变量，用逗号隔开。\n`maxNumber`和`currentNumber`第一次赋值了整数，被确定为整数类型`Int`；`item`第一次赋值了小数，被确定为浮点数类型`Double`（未指定数据类型时，小数一定会被确定为`Double`而不是`Float`）。\n\n> 基本数据类型：\n- Int\n- Double\n- Float\n- Bool\n- String\n- Character\n\n声明常量变量时，也可以指定数据类型，通过在常量变量名称后接冒号再接数据类型名称来实现。\n``` swift\nvar currentNumer: Double = 5\nprintln(currentNumber)\t//输出currentNumber的值\n```\n上面两句输出结果为`5.0`，因为`currentNumber`指定为`Double`类型，即使给它赋值了整数5。\n\n### 输出\n\n`println`和`print`函数都是输出函数，区别在于前者在输出末尾加上了换行符。\n\n输出常量变量：\n``` swift\nvar currentNumer: Double = 5\nprintln(\"The current number is \\(currentNumber)\")\n```\n上面两句输出结果为`The current number is 0.5`。\n通过`\\(常量变量)`将常量变量转换为字符串并在`println`语句中输出。\n\n### 注释\n\n和C语言类似，注释分为单行注释`//`和多行注释`/*  */`\n``` swift\nvar single\t//单行注释\n\n/* 多行注释 */\n```\n不一样的地方在于，swift的`/* */`可以嵌套。\n\n## 基本数据类型\n\n### 整数\n\n整数分为`Int8`，`UInt8`，`Int16`，`UInt16`，`Int32`，`UInt32`，`Int64`，`UInt64`，分别对应8，16，32，64位的有符号整数类型和无符号整数类型。\n一般`Int`指`Int32`（32位电脑）或`Int64`（64位电脑）。\n整数类型都有`min`和`max`两个方法。\n``` swift\nvar tmp = Int.max\nprintln(tmp)\n```\n结果为`9223372036854775807`（64位电脑）。\n\n``` swift\nlet decimalInteger = 17\t\t//十进制表示17\nlet binaryInteger = 0b1001\t//二进制表示17\nlet octalInteger = 0o21\t\t//八进制表示17\nlet hexadecimalInteger = 0x11\t//十六进制表示17\n```\n二进制，八进制和十六进制分别加前缀`0b`，`0o`，`0x`表示。\n\n### 浮点数\n\n- Double：64位浮点数，至少15位数字\n- Float：32位浮点数，最少6位数字\n\n``` swift\nlet decimalDouble = 12.1875\t//十进制表示12.1875\nlet exponentDouble = 1.21875e1\t//十进制指数表示12.1875\nlet hexadecimalDouble = 0xC.3p0\t//十六进制指数表示12.1875\n```\n浮点数字面量可以用十进制和十六进制表示，指数分别用`e`和`p`表示。\n\n数值型字面量都可以加0或_，不影响数值，比如`000_1_000.000_000_1`等于`1000.0000001`。\n\n### 布尔值\n\n`Bool`有两个值`true`和`false`。\n\n### 可选类型\n\n>可选类型（_optionals)用来表示值可能丢失的情况：\n- 有值且等于x\n- 没有值\n\n- 有无值判断\n可以通过条件语句判断，`if optional != nil`，结果为`ture`即表示有值，否则表示无值。\n\n- 强制解析\n在名字后面加`!`强制获取可选类型的值，但必须在有值的情况下，否则会报错，`optional!`。\n\n- 可选绑定\n``` swift\nlet optionalValue: Int? = 123\nif let actualValue = optionalValue {\n} else {\n}\n```\n`Int?`在数据类型后面加`?`表示包含该数据类型的可选类型，`optionalValue`表示包含`123`的可选类型，如果包含值，则赋值给`actualValue`，并返回`true`，否则返回`false`。\n\n- 无值：nil\n``` swift\nvar optionalInt: Int? = 123\noptionalInt = nil\n\nvar optionalStr: String?\n```\n可选类型可以被赋值为nil，即表示无值，这表示一个确定的值。\n如果可选类型声明时没有赋值，则自动赋值为nil。\n\n- 隐式解析\n声明时将数据类型后面的`?`改为`!`，表示一个隐式解析可选类型，即每次自动解析，使用时可直接用常量变量名称。\n\n### 断言\n可选类型无值可能会影响程序运行，在某些特定情况下，需要终止程序，我们使用断言。\n断言类似于条件判断语句，不同点在于，结果为`false`时直接终止程序。\n``` swift\nlet age = -3\nassert(age >= 0, \"age cannot be less than zero\")\n```\n`assert`的第二个参数描述信息可以省略。\n\n### 元组\n\n元组（_tuples_）把多个数据类型组合成一个复合的数据类型。\n``` swift\nlet httpStatus1 = (statusCode: 200, description: \"OK\")\nprintln(httpStatus1.statusCode, httpStatus1.description)\n//输出“200OK”\n\nlet httpStatus2 = (200, \"OK\")\nprintln(httpStatus2.0, httpStatus2.1)\n//输出“200OK”\n\nlet (statusCode, statusMessage) = httpStatus2\nprintln(statusCode, statusMessage)\n//输出“200OK”\n\nlet (statusCode, _) = httpStatus2\nprintln(statusCode)\n//输出“200”\n```\n元组用括号`(Int, String)`表示一个整数和一个字符串组合，可以给元组的单个元素命名，比如第1行的`statusCode`和`description`，调用时直接用`httpStatus1.statusCode`和`httpStatus2.description`表示；如果不命名，则用`.0`和`.1`表示。\n也可以把元组内容分解，比如第9行，分别用`statusCode`和`statusMessage`存储元组`httpStatus2`对应的元素。分解过程中忽略的部分可用`_`表示，比如第13行，只使`statusCode`存储元组`httpStatus2`的第一个元素，忽略第二个元素。\n\n### 类型别名\n\n``` swift\ntypealias tmpType = Int\nlet tmpValue: tmpType = 4\n```\n通过`typealias`关键字，给现有的数据类型再起一个新的名字，可替代使用。\n常量`tmpValue`的数据类型就是`Int`。\n\n### 类型转换\n\n- Int，Double，Float：\n`Int16`与`Int8`不能直接相加，需要通过`Int16(Int8)`转换。\n同样，`Double`与`Int`也不能相加，也需要通过`Double(Int)`转换，如果只需要整数部分，也可以通过`Int(Double)`转换。\n\n- String，Int：\nString->Int：`String.toInt()`函数可以把`String`转换成可选类型`Int?`，因为`String`中不一定能转换成`Int`，所以得到可选类型。\nInt->String：`String(Int)`函数可以把`Int`转换成`String`。\n\n## 基本运算符\n\n### 普通运算符\n\n大部分基本运算符和主流语言一致：\n- +：加\n- -：减\n- *：乘\n- /：除\n- =：赋值\n        - 不返回值，将`if a == b`误写成`if a = b`会出现编译错误。\n        - 元组赋值，`let (x, y) = (1, 2)`，表示`x = 1`且`y = 2`。\n- %：求余\n        - 除了整数，也可以对浮点数求余，`8 % 2.5`等于`Double`值`0.5`。\n- ++：自增\n- --：自减\n        - 除了整数，浮点数也可以自增和自减。\n- -：负号\n- +：正号\n- +=, -=, *=, /=, %=：复合赋值\n- ==：等于\n- !=: 不等于\n- \\>, <, >=, <=：比较运算符\n- ===, !===：是否引用同一个对象实例\n- ? : ：三目运算符\n- &&：与\n- ||：或\n- !：非\n- ()：括号，确定运算先后顺序\n\n### 空合运算符（Nil Coalescing Operator）\n\n`a ?? b`：其中`a`必须是可选（_Optional_）类型，`b`的类型与a存储的值的类型一致。\n如果a包含一个值，就返回`a`包含的值；否则返回默认值`b`，等同于`a != nil ? a! : b`。\n\n### 区间运算符（Range Operator）\n\n`a..<b`，闭区间运算符，表示`a`到`b`的区间，包含`a`，不包含`b`；\n`a...b`，半开区间运算符，表示`a`到`b`的区间，包含`a`和`b`。\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","slug":"swift_1","published":1,"updated":"2017-05-08T16:40:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2gdu6k3000ov1o3sv1msred","content":"<p>Swift是苹果公司于2014年推出的用于iOS，OS X和watchOS应用开发的新语言。<br>基于Swift 1.2。<br>本篇介绍Swift的基础知识：常量变量，基本数据类型和基本运算符。</p>\n<a id=\"more\"></a>\n<p><strong>Title: <a href=\"https://aidaizyy.github.io/swift_1\" target=\"_blank\" rel=\"external\">Swift基础入门(1)：常量变量，基本数据类型和基本运算符</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#x6d;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#58;&#x61;&#x69;&#x64;&#97;&#105;&#x7a;&#x79;&#x79;&#x40;&#103;&#x6d;&#97;&#105;&#108;&#46;&#x63;&#111;&#x6d;\">&#x61;&#x69;&#x64;&#97;&#105;&#x7a;&#x79;&#x79;&#x40;&#103;&#x6d;&#97;&#105;&#108;&#46;&#x63;&#111;&#x6d;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-07-15</a></strong></p>\n<h2 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h2><p>Swift结合了C和Objectiv-C的特点，基于Cocoa和Cocoa Touch框架。<br>本文主要讲述Swift的基本语法。</p>\n<h2 id=\"常量变量\"><a href=\"#常量变量\" class=\"headerlink\" title=\"常量变量\"></a>常量变量</h2><h3 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h3><p>常量变量命名不能包括数学符号，箭头，保留的Unicode码位，连线和制表符，不能以数字开头。</p>\n<h3 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h3><p>声明常量使用<code>let</code>关键字，声明变量使用<code>var</code>关键字。<br>一般可省略数据类型，通过赋予的第一个值来自动确定数据类型。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> maxNumber = <span class=\"number\">20</span></div><div class=\"line\"><span class=\"keyword\">var</span> currentNumber = <span class=\"number\">0</span>, item = <span class=\"number\">0.1</span></div></pre></td></tr></table></figure></p>\n<p>在swift中，语句结束不需要加分号。（添加分号也没有问题）<br>上面两句，声明了常量<code>maxNumber</code>，并赋值为20，这个值不能被改变。声明时可以不赋值，但之后只能赋值一次。<br>声明了变量<code>currentNumber</code>和<code>item</code>，并赋值为0和0.1，可赋值多次。<br>在一行中可声明多个常量或变量，用逗号隔开。<br><code>maxNumber</code>和<code>currentNumber</code>第一次赋值了整数，被确定为整数类型<code>Int</code>；<code>item</code>第一次赋值了小数，被确定为浮点数类型<code>Double</code>（未指定数据类型时，小数一定会被确定为<code>Double</code>而不是<code>Float</code>）。</p>\n<blockquote>\n<p>基本数据类型：</p>\n<ul>\n<li>Int</li>\n<li>Double</li>\n<li>Float</li>\n<li>Bool</li>\n<li>String</li>\n<li>Character</li>\n</ul>\n</blockquote>\n<p>声明常量变量时，也可以指定数据类型，通过在常量变量名称后接冒号再接数据类型名称来实现。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> currentNumer: <span class=\"type\">Double</span> = <span class=\"number\">5</span></div><div class=\"line\"><span class=\"built_in\">println</span>(currentNumber)\t<span class=\"comment\">//输出currentNumber的值</span></div></pre></td></tr></table></figure></p>\n<p>上面两句输出结果为<code>5.0</code>，因为<code>currentNumber</code>指定为<code>Double</code>类型，即使给它赋值了整数5。</p>\n<h3 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h3><p><code>println</code>和<code>print</code>函数都是输出函数，区别在于前者在输出末尾加上了换行符。</p>\n<p>输出常量变量：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> currentNumer: <span class=\"type\">Double</span> = <span class=\"number\">5</span></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"The current number is \\(currentNumber)\"</span>)</div></pre></td></tr></table></figure></p>\n<p>上面两句输出结果为<code>The current number is 0.5</code>。<br>通过<code>\\(常量变量)</code>将常量变量转换为字符串并在<code>println</code>语句中输出。</p>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>和C语言类似，注释分为单行注释<code>//</code>和多行注释<code>/*  */</code><br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> single\t<span class=\"comment\">//单行注释</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 多行注释 */</span></div></pre></td></tr></table></figure></p>\n<p>不一样的地方在于，swift的<code>/* */</code>可以嵌套。</p>\n<h2 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h2><h3 id=\"整数\"><a href=\"#整数\" class=\"headerlink\" title=\"整数\"></a>整数</h3><p>整数分为<code>Int8</code>，<code>UInt8</code>，<code>Int16</code>，<code>UInt16</code>，<code>Int32</code>，<code>UInt32</code>，<code>Int64</code>，<code>UInt64</code>，分别对应8，16，32，64位的有符号整数类型和无符号整数类型。<br>一般<code>Int</code>指<code>Int32</code>（32位电脑）或<code>Int64</code>（64位电脑）。<br>整数类型都有<code>min</code>和<code>max</code>两个方法。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"type\">Int</span>.<span class=\"built_in\">max</span></div><div class=\"line\"><span class=\"built_in\">println</span>(tmp)</div></pre></td></tr></table></figure></p>\n<p>结果为<code>9223372036854775807</code>（64位电脑）。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> decimalInteger = <span class=\"number\">17</span>\t\t<span class=\"comment\">//十进制表示17</span></div><div class=\"line\"><span class=\"keyword\">let</span> binaryInteger = <span class=\"number\">0b1001</span>\t<span class=\"comment\">//二进制表示17</span></div><div class=\"line\"><span class=\"keyword\">let</span> octalInteger = <span class=\"number\">0o21</span>\t\t<span class=\"comment\">//八进制表示17</span></div><div class=\"line\"><span class=\"keyword\">let</span> hexadecimalInteger = <span class=\"number\">0x11</span>\t<span class=\"comment\">//十六进制表示17</span></div></pre></td></tr></table></figure>\n<p>二进制，八进制和十六进制分别加前缀<code>0b</code>，<code>0o</code>，<code>0x</code>表示。</p>\n<h3 id=\"浮点数\"><a href=\"#浮点数\" class=\"headerlink\" title=\"浮点数\"></a>浮点数</h3><ul>\n<li>Double：64位浮点数，至少15位数字</li>\n<li>Float：32位浮点数，最少6位数字</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> decimalDouble = <span class=\"number\">12.1875</span>\t<span class=\"comment\">//十进制表示12.1875</span></div><div class=\"line\"><span class=\"keyword\">let</span> exponentDouble = <span class=\"number\">1.21875e1</span>\t<span class=\"comment\">//十进制指数表示12.1875</span></div><div class=\"line\"><span class=\"keyword\">let</span> hexadecimalDouble = <span class=\"number\">0xC.3p0</span>\t<span class=\"comment\">//十六进制指数表示12.1875</span></div></pre></td></tr></table></figure>\n<p>浮点数字面量可以用十进制和十六进制表示，指数分别用<code>e</code>和<code>p</code>表示。</p>\n<p>数值型字面量都可以加0或_，不影响数值，比如<code>000_1_000.000_000_1</code>等于<code>1000.0000001</code>。</p>\n<h3 id=\"布尔值\"><a href=\"#布尔值\" class=\"headerlink\" title=\"布尔值\"></a>布尔值</h3><p><code>Bool</code>有两个值<code>true</code>和<code>false</code>。</p>\n<h3 id=\"可选类型\"><a href=\"#可选类型\" class=\"headerlink\" title=\"可选类型\"></a>可选类型</h3><blockquote>\n<p>可选类型（_optionals)用来表示值可能丢失的情况：</p>\n<ul>\n<li>有值且等于x</li>\n<li>没有值</li>\n</ul>\n</blockquote>\n<ul>\n<li><p>有无值判断<br>可以通过条件语句判断，<code>if optional != nil</code>，结果为<code>ture</code>即表示有值，否则表示无值。</p>\n</li>\n<li><p>强制解析<br>在名字后面加<code>!</code>强制获取可选类型的值，但必须在有值的情况下，否则会报错，<code>optional!</code>。</p>\n</li>\n<li><p>可选绑定</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> optionalValue: <span class=\"type\">Int</span>? = <span class=\"number\">123</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> actualValue = optionalValue &#123;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><code>Int?</code>在数据类型后面加<code>?</code>表示包含该数据类型的可选类型，<code>optionalValue</code>表示包含<code>123</code>的可选类型，如果包含值，则赋值给<code>actualValue</code>，并返回<code>true</code>，否则返回<code>false</code>。</p>\n<ul>\n<li>无值：nil<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> optionalInt: <span class=\"type\">Int</span>? = <span class=\"number\">123</span></div><div class=\"line\">optionalInt = <span class=\"literal\">nil</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> optionalStr: <span class=\"type\">String</span>?</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>可选类型可以被赋值为nil，即表示无值，这表示一个确定的值。<br>如果可选类型声明时没有赋值，则自动赋值为nil。</p>\n<ul>\n<li>隐式解析<br>声明时将数据类型后面的<code>?</code>改为<code>!</code>，表示一个隐式解析可选类型，即每次自动解析，使用时可直接用常量变量名称。</li>\n</ul>\n<h3 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h3><p>可选类型无值可能会影响程序运行，在某些特定情况下，需要终止程序，我们使用断言。<br>断言类似于条件判断语句，不同点在于，结果为<code>false</code>时直接终止程序。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> age = -<span class=\"number\">3</span></div><div class=\"line\"><span class=\"built_in\">assert</span>(age &gt;= <span class=\"number\">0</span>, <span class=\"string\">\"age cannot be less than zero\"</span>)</div></pre></td></tr></table></figure></p>\n<p><code>assert</code>的第二个参数描述信息可以省略。</p>\n<h3 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h3><p>元组（<em>tuples</em>）把多个数据类型组合成一个复合的数据类型。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> httpStatus1 = (statusCode: <span class=\"number\">200</span>, description: <span class=\"string\">\"OK\"</span>)</div><div class=\"line\"><span class=\"built_in\">println</span>(httpStatus1.statusCode, httpStatus1.description)</div><div class=\"line\"><span class=\"comment\">//输出“200OK”</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> httpStatus2 = (<span class=\"number\">200</span>, <span class=\"string\">\"OK\"</span>)</div><div class=\"line\"><span class=\"built_in\">println</span>(httpStatus2.<span class=\"number\">0</span>, httpStatus2.<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"comment\">//输出“200OK”</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> (statusCode, statusMessage) = httpStatus2</div><div class=\"line\"><span class=\"built_in\">println</span>(statusCode, statusMessage)</div><div class=\"line\"><span class=\"comment\">//输出“200OK”</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> (statusCode, <span class=\"number\">_</span>) = httpStatus2</div><div class=\"line\"><span class=\"built_in\">println</span>(statusCode)</div><div class=\"line\"><span class=\"comment\">//输出“200”</span></div></pre></td></tr></table></figure></p>\n<p>元组用括号<code>(Int, String)</code>表示一个整数和一个字符串组合，可以给元组的单个元素命名，比如第1行的<code>statusCode</code>和<code>description</code>，调用时直接用<code>httpStatus1.statusCode</code>和<code>httpStatus2.description</code>表示；如果不命名，则用<code>.0</code>和<code>.1</code>表示。<br>也可以把元组内容分解，比如第9行，分别用<code>statusCode</code>和<code>statusMessage</code>存储元组<code>httpStatus2</code>对应的元素。分解过程中忽略的部分可用<code>_</code>表示，比如第13行，只使<code>statusCode</code>存储元组<code>httpStatus2</code>的第一个元素，忽略第二个元素。</p>\n<h3 id=\"类型别名\"><a href=\"#类型别名\" class=\"headerlink\" title=\"类型别名\"></a>类型别名</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typealias</span> tmpType = <span class=\"type\">Int</span></div><div class=\"line\"><span class=\"keyword\">let</span> tmpValue: tmpType = <span class=\"number\">4</span></div></pre></td></tr></table></figure>\n<p>通过<code>typealias</code>关键字，给现有的数据类型再起一个新的名字，可替代使用。<br>常量<code>tmpValue</code>的数据类型就是<code>Int</code>。</p>\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><ul>\n<li><p>Int，Double，Float：<br><code>Int16</code>与<code>Int8</code>不能直接相加，需要通过<code>Int16(Int8)</code>转换。<br>同样，<code>Double</code>与<code>Int</code>也不能相加，也需要通过<code>Double(Int)</code>转换，如果只需要整数部分，也可以通过<code>Int(Double)</code>转换。</p>\n</li>\n<li><p>String，Int：<br>String-&gt;Int：<code>String.toInt()</code>函数可以把<code>String</code>转换成可选类型<code>Int?</code>，因为<code>String</code>中不一定能转换成<code>Int</code>，所以得到可选类型。<br>Int-&gt;String：<code>String(Int)</code>函数可以把<code>Int</code>转换成<code>String</code>。</p>\n</li>\n</ul>\n<h2 id=\"基本运算符\"><a href=\"#基本运算符\" class=\"headerlink\" title=\"基本运算符\"></a>基本运算符</h2><h3 id=\"普通运算符\"><a href=\"#普通运算符\" class=\"headerlink\" title=\"普通运算符\"></a>普通运算符</h3><p>大部分基本运算符和主流语言一致：</p>\n<ul>\n<li>+：加</li>\n<li>-：减</li>\n<li>*：乘</li>\n<li>/：除</li>\n<li>=：赋值<pre><code>- 不返回值，将`if a == b`误写成`if a = b`会出现编译错误。\n- 元组赋值，`let (x, y) = (1, 2)`，表示`x = 1`且`y = 2`。\n</code></pre></li>\n<li>%：求余<pre><code>- 除了整数，也可以对浮点数求余，`8 % 2.5`等于`Double`值`0.5`。\n</code></pre></li>\n<li>++：自增</li>\n<li>–：自减<pre><code>- 除了整数，浮点数也可以自增和自减。\n</code></pre></li>\n<li>-：负号</li>\n<li>+：正号</li>\n<li>+=, -=, *=, /=, %=：复合赋值</li>\n<li>==：等于</li>\n<li>!=: 不等于</li>\n<li>>, &lt;, &gt;=, &lt;=：比较运算符</li>\n<li>===, !===：是否引用同一个对象实例</li>\n<li>? : ：三目运算符</li>\n<li>&amp;&amp;：与</li>\n<li>||：或</li>\n<li>!：非</li>\n<li>()：括号，确定运算先后顺序</li>\n</ul>\n<h3 id=\"空合运算符（Nil-Coalescing-Operator）\"><a href=\"#空合运算符（Nil-Coalescing-Operator）\" class=\"headerlink\" title=\"空合运算符（Nil Coalescing Operator）\"></a>空合运算符（Nil Coalescing Operator）</h3><p><code>a ?? b</code>：其中<code>a</code>必须是可选（<em>Optional</em>）类型，<code>b</code>的类型与a存储的值的类型一致。<br>如果a包含一个值，就返回<code>a</code>包含的值；否则返回默认值<code>b</code>，等同于<code>a != nil ? a! : b</code>。</p>\n<h3 id=\"区间运算符（Range-Operator）\"><a href=\"#区间运算符（Range-Operator）\" class=\"headerlink\" title=\"区间运算符（Range Operator）\"></a>区间运算符（Range Operator）</h3><p><code>a..&lt;b</code>，闭区间运算符，表示<code>a</code>到<code>b</code>的区间，包含<code>a</code>，不包含<code>b</code>；<br><code>a...b</code>，半开区间运算符，表示<code>a</code>到<code>b</code>的区间，包含<code>a</code>和<code>b</code>。</p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>Swift是苹果公司于2014年推出的用于iOS，OS X和watchOS应用开发的新语言。<br>基于Swift 1.2。<br>本篇介绍Swift的基础知识：常量变量，基本数据类型和基本运算符。</p>","more":"<p><strong>Title: <a href=\"https://aidaizyy.github.io/swift_1\" target=\"_blank\" rel=\"external\">Swift基础入门(1)：常量变量，基本数据类型和基本运算符</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#x6d;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#58;&#x61;&#x69;&#x64;&#97;&#105;&#x7a;&#x79;&#x79;&#x40;&#103;&#x6d;&#97;&#105;&#108;&#46;&#x63;&#111;&#x6d;\">&#x61;&#x69;&#x64;&#97;&#105;&#x7a;&#x79;&#x79;&#x40;&#103;&#x6d;&#97;&#105;&#108;&#46;&#x63;&#111;&#x6d;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-07-15</a></strong></p>\n<h2 id=\"概要\"><a href=\"#概要\" class=\"headerlink\" title=\"概要\"></a>概要</h2><p>Swift结合了C和Objectiv-C的特点，基于Cocoa和Cocoa Touch框架。<br>本文主要讲述Swift的基本语法。</p>\n<h2 id=\"常量变量\"><a href=\"#常量变量\" class=\"headerlink\" title=\"常量变量\"></a>常量变量</h2><h3 id=\"命名\"><a href=\"#命名\" class=\"headerlink\" title=\"命名\"></a>命名</h3><p>常量变量命名不能包括数学符号，箭头，保留的Unicode码位，连线和制表符，不能以数字开头。</p>\n<h3 id=\"声明\"><a href=\"#声明\" class=\"headerlink\" title=\"声明\"></a>声明</h3><p>声明常量使用<code>let</code>关键字，声明变量使用<code>var</code>关键字。<br>一般可省略数据类型，通过赋予的第一个值来自动确定数据类型。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> maxNumber = <span class=\"number\">20</span></div><div class=\"line\"><span class=\"keyword\">var</span> currentNumber = <span class=\"number\">0</span>, item = <span class=\"number\">0.1</span></div></pre></td></tr></table></figure></p>\n<p>在swift中，语句结束不需要加分号。（添加分号也没有问题）<br>上面两句，声明了常量<code>maxNumber</code>，并赋值为20，这个值不能被改变。声明时可以不赋值，但之后只能赋值一次。<br>声明了变量<code>currentNumber</code>和<code>item</code>，并赋值为0和0.1，可赋值多次。<br>在一行中可声明多个常量或变量，用逗号隔开。<br><code>maxNumber</code>和<code>currentNumber</code>第一次赋值了整数，被确定为整数类型<code>Int</code>；<code>item</code>第一次赋值了小数，被确定为浮点数类型<code>Double</code>（未指定数据类型时，小数一定会被确定为<code>Double</code>而不是<code>Float</code>）。</p>\n<blockquote>\n<p>基本数据类型：</p>\n<ul>\n<li>Int</li>\n<li>Double</li>\n<li>Float</li>\n<li>Bool</li>\n<li>String</li>\n<li>Character</li>\n</ul>\n</blockquote>\n<p>声明常量变量时，也可以指定数据类型，通过在常量变量名称后接冒号再接数据类型名称来实现。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> currentNumer: <span class=\"type\">Double</span> = <span class=\"number\">5</span></div><div class=\"line\"><span class=\"built_in\">println</span>(currentNumber)\t<span class=\"comment\">//输出currentNumber的值</span></div></pre></td></tr></table></figure></p>\n<p>上面两句输出结果为<code>5.0</code>，因为<code>currentNumber</code>指定为<code>Double</code>类型，即使给它赋值了整数5。</p>\n<h3 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h3><p><code>println</code>和<code>print</code>函数都是输出函数，区别在于前者在输出末尾加上了换行符。</p>\n<p>输出常量变量：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> currentNumer: <span class=\"type\">Double</span> = <span class=\"number\">5</span></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"The current number is \\(currentNumber)\"</span>)</div></pre></td></tr></table></figure></p>\n<p>上面两句输出结果为<code>The current number is 0.5</code>。<br>通过<code>\\(常量变量)</code>将常量变量转换为字符串并在<code>println</code>语句中输出。</p>\n<h3 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h3><p>和C语言类似，注释分为单行注释<code>//</code>和多行注释<code>/*  */</code><br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> single\t<span class=\"comment\">//单行注释</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* 多行注释 */</span></div></pre></td></tr></table></figure></p>\n<p>不一样的地方在于，swift的<code>/* */</code>可以嵌套。</p>\n<h2 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h2><h3 id=\"整数\"><a href=\"#整数\" class=\"headerlink\" title=\"整数\"></a>整数</h3><p>整数分为<code>Int8</code>，<code>UInt8</code>，<code>Int16</code>，<code>UInt16</code>，<code>Int32</code>，<code>UInt32</code>，<code>Int64</code>，<code>UInt64</code>，分别对应8，16，32，64位的有符号整数类型和无符号整数类型。<br>一般<code>Int</code>指<code>Int32</code>（32位电脑）或<code>Int64</code>（64位电脑）。<br>整数类型都有<code>min</code>和<code>max</code>两个方法。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> tmp = <span class=\"type\">Int</span>.<span class=\"built_in\">max</span></div><div class=\"line\"><span class=\"built_in\">println</span>(tmp)</div></pre></td></tr></table></figure></p>\n<p>结果为<code>9223372036854775807</code>（64位电脑）。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> decimalInteger = <span class=\"number\">17</span>\t\t<span class=\"comment\">//十进制表示17</span></div><div class=\"line\"><span class=\"keyword\">let</span> binaryInteger = <span class=\"number\">0b1001</span>\t<span class=\"comment\">//二进制表示17</span></div><div class=\"line\"><span class=\"keyword\">let</span> octalInteger = <span class=\"number\">0o21</span>\t\t<span class=\"comment\">//八进制表示17</span></div><div class=\"line\"><span class=\"keyword\">let</span> hexadecimalInteger = <span class=\"number\">0x11</span>\t<span class=\"comment\">//十六进制表示17</span></div></pre></td></tr></table></figure>\n<p>二进制，八进制和十六进制分别加前缀<code>0b</code>，<code>0o</code>，<code>0x</code>表示。</p>\n<h3 id=\"浮点数\"><a href=\"#浮点数\" class=\"headerlink\" title=\"浮点数\"></a>浮点数</h3><ul>\n<li>Double：64位浮点数，至少15位数字</li>\n<li>Float：32位浮点数，最少6位数字</li>\n</ul>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> decimalDouble = <span class=\"number\">12.1875</span>\t<span class=\"comment\">//十进制表示12.1875</span></div><div class=\"line\"><span class=\"keyword\">let</span> exponentDouble = <span class=\"number\">1.21875e1</span>\t<span class=\"comment\">//十进制指数表示12.1875</span></div><div class=\"line\"><span class=\"keyword\">let</span> hexadecimalDouble = <span class=\"number\">0xC.3p0</span>\t<span class=\"comment\">//十六进制指数表示12.1875</span></div></pre></td></tr></table></figure>\n<p>浮点数字面量可以用十进制和十六进制表示，指数分别用<code>e</code>和<code>p</code>表示。</p>\n<p>数值型字面量都可以加0或_，不影响数值，比如<code>000_1_000.000_000_1</code>等于<code>1000.0000001</code>。</p>\n<h3 id=\"布尔值\"><a href=\"#布尔值\" class=\"headerlink\" title=\"布尔值\"></a>布尔值</h3><p><code>Bool</code>有两个值<code>true</code>和<code>false</code>。</p>\n<h3 id=\"可选类型\"><a href=\"#可选类型\" class=\"headerlink\" title=\"可选类型\"></a>可选类型</h3><blockquote>\n<p>可选类型（_optionals)用来表示值可能丢失的情况：</p>\n<ul>\n<li>有值且等于x</li>\n<li>没有值</li>\n</ul>\n</blockquote>\n<ul>\n<li><p>有无值判断<br>可以通过条件语句判断，<code>if optional != nil</code>，结果为<code>ture</code>即表示有值，否则表示无值。</p>\n</li>\n<li><p>强制解析<br>在名字后面加<code>!</code>强制获取可选类型的值，但必须在有值的情况下，否则会报错，<code>optional!</code>。</p>\n</li>\n<li><p>可选绑定</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> optionalValue: <span class=\"type\">Int</span>? = <span class=\"number\">123</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> actualValue = optionalValue &#123;</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><code>Int?</code>在数据类型后面加<code>?</code>表示包含该数据类型的可选类型，<code>optionalValue</code>表示包含<code>123</code>的可选类型，如果包含值，则赋值给<code>actualValue</code>，并返回<code>true</code>，否则返回<code>false</code>。</p>\n<ul>\n<li>无值：nil<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> optionalInt: <span class=\"type\">Int</span>? = <span class=\"number\">123</span></div><div class=\"line\">optionalInt = <span class=\"literal\">nil</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> optionalStr: <span class=\"type\">String</span>?</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>可选类型可以被赋值为nil，即表示无值，这表示一个确定的值。<br>如果可选类型声明时没有赋值，则自动赋值为nil。</p>\n<ul>\n<li>隐式解析<br>声明时将数据类型后面的<code>?</code>改为<code>!</code>，表示一个隐式解析可选类型，即每次自动解析，使用时可直接用常量变量名称。</li>\n</ul>\n<h3 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h3><p>可选类型无值可能会影响程序运行，在某些特定情况下，需要终止程序，我们使用断言。<br>断言类似于条件判断语句，不同点在于，结果为<code>false</code>时直接终止程序。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> age = -<span class=\"number\">3</span></div><div class=\"line\"><span class=\"built_in\">assert</span>(age &gt;= <span class=\"number\">0</span>, <span class=\"string\">\"age cannot be less than zero\"</span>)</div></pre></td></tr></table></figure></p>\n<p><code>assert</code>的第二个参数描述信息可以省略。</p>\n<h3 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h3><p>元组（<em>tuples</em>）把多个数据类型组合成一个复合的数据类型。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> httpStatus1 = (statusCode: <span class=\"number\">200</span>, description: <span class=\"string\">\"OK\"</span>)</div><div class=\"line\"><span class=\"built_in\">println</span>(httpStatus1.statusCode, httpStatus1.description)</div><div class=\"line\"><span class=\"comment\">//输出“200OK”</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> httpStatus2 = (<span class=\"number\">200</span>, <span class=\"string\">\"OK\"</span>)</div><div class=\"line\"><span class=\"built_in\">println</span>(httpStatus2.<span class=\"number\">0</span>, httpStatus2.<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"comment\">//输出“200OK”</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> (statusCode, statusMessage) = httpStatus2</div><div class=\"line\"><span class=\"built_in\">println</span>(statusCode, statusMessage)</div><div class=\"line\"><span class=\"comment\">//输出“200OK”</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> (statusCode, <span class=\"number\">_</span>) = httpStatus2</div><div class=\"line\"><span class=\"built_in\">println</span>(statusCode)</div><div class=\"line\"><span class=\"comment\">//输出“200”</span></div></pre></td></tr></table></figure></p>\n<p>元组用括号<code>(Int, String)</code>表示一个整数和一个字符串组合，可以给元组的单个元素命名，比如第1行的<code>statusCode</code>和<code>description</code>，调用时直接用<code>httpStatus1.statusCode</code>和<code>httpStatus2.description</code>表示；如果不命名，则用<code>.0</code>和<code>.1</code>表示。<br>也可以把元组内容分解，比如第9行，分别用<code>statusCode</code>和<code>statusMessage</code>存储元组<code>httpStatus2</code>对应的元素。分解过程中忽略的部分可用<code>_</code>表示，比如第13行，只使<code>statusCode</code>存储元组<code>httpStatus2</code>的第一个元素，忽略第二个元素。</p>\n<h3 id=\"类型别名\"><a href=\"#类型别名\" class=\"headerlink\" title=\"类型别名\"></a>类型别名</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">typealias</span> tmpType = <span class=\"type\">Int</span></div><div class=\"line\"><span class=\"keyword\">let</span> tmpValue: tmpType = <span class=\"number\">4</span></div></pre></td></tr></table></figure>\n<p>通过<code>typealias</code>关键字，给现有的数据类型再起一个新的名字，可替代使用。<br>常量<code>tmpValue</code>的数据类型就是<code>Int</code>。</p>\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><ul>\n<li><p>Int，Double，Float：<br><code>Int16</code>与<code>Int8</code>不能直接相加，需要通过<code>Int16(Int8)</code>转换。<br>同样，<code>Double</code>与<code>Int</code>也不能相加，也需要通过<code>Double(Int)</code>转换，如果只需要整数部分，也可以通过<code>Int(Double)</code>转换。</p>\n</li>\n<li><p>String，Int：<br>String-&gt;Int：<code>String.toInt()</code>函数可以把<code>String</code>转换成可选类型<code>Int?</code>，因为<code>String</code>中不一定能转换成<code>Int</code>，所以得到可选类型。<br>Int-&gt;String：<code>String(Int)</code>函数可以把<code>Int</code>转换成<code>String</code>。</p>\n</li>\n</ul>\n<h2 id=\"基本运算符\"><a href=\"#基本运算符\" class=\"headerlink\" title=\"基本运算符\"></a>基本运算符</h2><h3 id=\"普通运算符\"><a href=\"#普通运算符\" class=\"headerlink\" title=\"普通运算符\"></a>普通运算符</h3><p>大部分基本运算符和主流语言一致：</p>\n<ul>\n<li>+：加</li>\n<li>-：减</li>\n<li>*：乘</li>\n<li>/：除</li>\n<li>=：赋值<pre><code>- 不返回值，将`if a == b`误写成`if a = b`会出现编译错误。\n- 元组赋值，`let (x, y) = (1, 2)`，表示`x = 1`且`y = 2`。\n</code></pre></li>\n<li>%：求余<pre><code>- 除了整数，也可以对浮点数求余，`8 % 2.5`等于`Double`值`0.5`。\n</code></pre></li>\n<li>++：自增</li>\n<li>–：自减<pre><code>- 除了整数，浮点数也可以自增和自减。\n</code></pre></li>\n<li>-：负号</li>\n<li>+：正号</li>\n<li>+=, -=, *=, /=, %=：复合赋值</li>\n<li>==：等于</li>\n<li>!=: 不等于</li>\n<li>>, &lt;, &gt;=, &lt;=：比较运算符</li>\n<li>===, !===：是否引用同一个对象实例</li>\n<li>? : ：三目运算符</li>\n<li>&amp;&amp;：与</li>\n<li>||：或</li>\n<li>!：非</li>\n<li>()：括号，确定运算先后顺序</li>\n</ul>\n<h3 id=\"空合运算符（Nil-Coalescing-Operator）\"><a href=\"#空合运算符（Nil-Coalescing-Operator）\" class=\"headerlink\" title=\"空合运算符（Nil Coalescing Operator）\"></a>空合运算符（Nil Coalescing Operator）</h3><p><code>a ?? b</code>：其中<code>a</code>必须是可选（<em>Optional</em>）类型，<code>b</code>的类型与a存储的值的类型一致。<br>如果a包含一个值，就返回<code>a</code>包含的值；否则返回默认值<code>b</code>，等同于<code>a != nil ? a! : b</code>。</p>\n<h3 id=\"区间运算符（Range-Operator）\"><a href=\"#区间运算符（Range-Operator）\" class=\"headerlink\" title=\"区间运算符（Range Operator）\"></a>区间运算符（Range Operator）</h3><p><code>a..&lt;b</code>，闭区间运算符，表示<code>a</code>到<code>b</code>的区间，包含<code>a</code>，不包含<code>b</code>；<br><code>a...b</code>，半开区间运算符，表示<code>a</code>到<code>b</code>的区间，包含<code>a</code>和<code>b</code>。</p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>"},{"title":"Swift基础入门(10)：类型转换","date":"2015-07-24T07:23:06.000Z","toc":true,"_content":"\n本篇介绍Swift的基础知识：类型的检查和转换。\n\n<!--more-->\n**Title: [Swift基础入门(10)：类型转换](https://aidaizyy.github.io/swift_10)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-07-24](http://aidaizyy.github.io)**\n\n# 类型转换\n\n## 数值型类型转换\n- Int，Double，Float：\n`Int16`与`Int8`不能直接相加，需要通过`Int16(Int8)`转换。同样，`Int8`，`UInt8`，`Int16`，`UInt16`，`Int32`，`UInt32`，`Int64`，`UInt64`都可以互相转换。\n`Double`与`Int`也不能相加，也需要通过`Double(Int)`转换，如果只需要整数部分，也可以通过`Int(Double)`转换。同样，`Float(Int)`，`Int(Float)`，`Double(Float)`，`Float(Double)`都可以互相转换\n\n- String，Int：\nString->Int：`String.toInt()`函数可以把`String`转换成可选类型`Int?`，因为`String`中不一定能转换成`Int`，所以得到可选类型。\nInt->String：`String(Int)`函数可以把`Int`转换成`String`。\n\n## 类型检查和向下转换\n类型检查用`is`操作符检查一个实例是否属于特定类型，返回`true`或者`false`。\n基类类型用`as?`或者`as!`操作符转换成子类类型。因为转换可能失败，所以使用`as?`返回可选类型的子类类型；如果确定转换一定成功，可以使用`as!`强制返回非可选类型的子类类型。\n``` swift\nclass MediaItem {\n    var name: String\n    init(name: String) {\n        self.name = name\n    }\n}\n\nclass Movie: MediaItem {\n    var director: String\n    init(name: String, director: String) {\n        self.director = director\n        super.init(name: name)\n    }\n}\n\nclass Song: MediaItem {\n    var artist: String\n    init(name: String, artist: String) {\n        self.artist = artist\n        super.init(name: name)\n    }\n}\n\nlet library = [\n    Movie(name: \"Casablanca\", director: \"Michael Curtiz\"),\n    Song(name: \"Blue Suede Shoes\", artist: \"Elvis Presley\"),\n    Movie(name: \"Citizen Kane\", director: \"Orson Welles\"),\n    Song(name: \"The One And Only\", artist: \"Chesney Hawkes\"),\n    Song(name: \"Never Gonna Give You Up\", artist: \"Rick Astley\")\n]\n// the type of \"library\" is inferred to be [MediaItem]\n\nvar movieCount = 0\nvar songCount = 0\nfor item in library {\n    if item is Movie {\n        ++movieCount\n    } else if item is Song {\n        ++songCount\n    }\n}\nprintln(\"Media library contains \\(movieCount) movies and \\(songCount) songs\")\n// prints \"Media library contains 2 movies and 3 songs\"\n\nfor item in library {\n    if let movie = item as? Movie {\n        println(\"Movie: '\\(movie.name)', dir. \\(movie.director)\")\n    } else if let song = item as? Song {\n        println(\"Song: '\\(song.name)', by \\(song.artist)\")\n    }\n}\n// Movie: 'Casablanca', dir. Michael Curtiz\n// Song: 'Blue Suede Shoes', by Elvis Presley\n// Movie: 'Citizen Kane', dir. Orson Welles\n// Song: 'The One And Only', by Chesney Hawkes\n// Song: 'Never Gonna Give You Up', by Rick Astley\n```\n类`Movie`和类`Song`都是继承自类`MediaItem`。\n数组`Libray`自动判断类型为`MediaItem`，存入了两个`Movie`实例和三个`Song`实例。在`for-in`循环中遍历出来的都是基类类型，但它实际上存储的是子类类型。\n第33-43行：`item is Movie`和`item is Song`判断`item`实际存储的值是不是子类类型，是的话在相应数量的记录上加1，最后输出各子类类型的数组元素的个数。\n第45-56行：`item as? Movie`和`item as? Song`将`item`强制转换成子类类型，如果实际存储的不相符返回`nil`，实际存储的相符返回相应的子类类型，并打印相应信息。\n\n## Any和AnyObject类型转换\n- Any：任意类型，包括方法类型。\n- AnyObject：任意class类型。\n``` swift\nlet someObjects: [AnyObject] = [\n    Movie(name: \"2001: A Space Odyssey\", director: \"Stanley Kubrick\"),\n    Movie(name: \"Moon\", director: \"Duncan Jones\"),\n    Movie(name: \"Alien\", director: \"Ridley Scott\")\n]\n\nvar things = [Any]()\nthings.append(0)\nthings.append(0.0)\nthings.append(\"hello\")\n```\n`someObject`是一个很多class类型组成的混合class类型数组，所以用`AnyObject`。\n`things`是一个很多类型组成的混合类型数组，所以用`Any`。\n它们的访问都可以通过遍历，然后使用`is`判断或者`as`转换。\n\n> 在`switch`的`case`语句中，使用`as`而不是`as?`。因为`case`语句中类型的检查和转换总是安全的。\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","source":"_posts/swift_10.md","raw":"title: \"Swift基础入门(10)：类型转换\"\ndate: 2015-07-24 15:23:06\ntags:\n- swift\ncategories: swift\ntoc: true\n---\n\n本篇介绍Swift的基础知识：类型的检查和转换。\n\n<!--more-->\n**Title: [Swift基础入门(10)：类型转换](https://aidaizyy.github.io/swift_10)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-07-24](http://aidaizyy.github.io)**\n\n# 类型转换\n\n## 数值型类型转换\n- Int，Double，Float：\n`Int16`与`Int8`不能直接相加，需要通过`Int16(Int8)`转换。同样，`Int8`，`UInt8`，`Int16`，`UInt16`，`Int32`，`UInt32`，`Int64`，`UInt64`都可以互相转换。\n`Double`与`Int`也不能相加，也需要通过`Double(Int)`转换，如果只需要整数部分，也可以通过`Int(Double)`转换。同样，`Float(Int)`，`Int(Float)`，`Double(Float)`，`Float(Double)`都可以互相转换\n\n- String，Int：\nString->Int：`String.toInt()`函数可以把`String`转换成可选类型`Int?`，因为`String`中不一定能转换成`Int`，所以得到可选类型。\nInt->String：`String(Int)`函数可以把`Int`转换成`String`。\n\n## 类型检查和向下转换\n类型检查用`is`操作符检查一个实例是否属于特定类型，返回`true`或者`false`。\n基类类型用`as?`或者`as!`操作符转换成子类类型。因为转换可能失败，所以使用`as?`返回可选类型的子类类型；如果确定转换一定成功，可以使用`as!`强制返回非可选类型的子类类型。\n``` swift\nclass MediaItem {\n    var name: String\n    init(name: String) {\n        self.name = name\n    }\n}\n\nclass Movie: MediaItem {\n    var director: String\n    init(name: String, director: String) {\n        self.director = director\n        super.init(name: name)\n    }\n}\n\nclass Song: MediaItem {\n    var artist: String\n    init(name: String, artist: String) {\n        self.artist = artist\n        super.init(name: name)\n    }\n}\n\nlet library = [\n    Movie(name: \"Casablanca\", director: \"Michael Curtiz\"),\n    Song(name: \"Blue Suede Shoes\", artist: \"Elvis Presley\"),\n    Movie(name: \"Citizen Kane\", director: \"Orson Welles\"),\n    Song(name: \"The One And Only\", artist: \"Chesney Hawkes\"),\n    Song(name: \"Never Gonna Give You Up\", artist: \"Rick Astley\")\n]\n// the type of \"library\" is inferred to be [MediaItem]\n\nvar movieCount = 0\nvar songCount = 0\nfor item in library {\n    if item is Movie {\n        ++movieCount\n    } else if item is Song {\n        ++songCount\n    }\n}\nprintln(\"Media library contains \\(movieCount) movies and \\(songCount) songs\")\n// prints \"Media library contains 2 movies and 3 songs\"\n\nfor item in library {\n    if let movie = item as? Movie {\n        println(\"Movie: '\\(movie.name)', dir. \\(movie.director)\")\n    } else if let song = item as? Song {\n        println(\"Song: '\\(song.name)', by \\(song.artist)\")\n    }\n}\n// Movie: 'Casablanca', dir. Michael Curtiz\n// Song: 'Blue Suede Shoes', by Elvis Presley\n// Movie: 'Citizen Kane', dir. Orson Welles\n// Song: 'The One And Only', by Chesney Hawkes\n// Song: 'Never Gonna Give You Up', by Rick Astley\n```\n类`Movie`和类`Song`都是继承自类`MediaItem`。\n数组`Libray`自动判断类型为`MediaItem`，存入了两个`Movie`实例和三个`Song`实例。在`for-in`循环中遍历出来的都是基类类型，但它实际上存储的是子类类型。\n第33-43行：`item is Movie`和`item is Song`判断`item`实际存储的值是不是子类类型，是的话在相应数量的记录上加1，最后输出各子类类型的数组元素的个数。\n第45-56行：`item as? Movie`和`item as? Song`将`item`强制转换成子类类型，如果实际存储的不相符返回`nil`，实际存储的相符返回相应的子类类型，并打印相应信息。\n\n## Any和AnyObject类型转换\n- Any：任意类型，包括方法类型。\n- AnyObject：任意class类型。\n``` swift\nlet someObjects: [AnyObject] = [\n    Movie(name: \"2001: A Space Odyssey\", director: \"Stanley Kubrick\"),\n    Movie(name: \"Moon\", director: \"Duncan Jones\"),\n    Movie(name: \"Alien\", director: \"Ridley Scott\")\n]\n\nvar things = [Any]()\nthings.append(0)\nthings.append(0.0)\nthings.append(\"hello\")\n```\n`someObject`是一个很多class类型组成的混合class类型数组，所以用`AnyObject`。\n`things`是一个很多类型组成的混合类型数组，所以用`Any`。\n它们的访问都可以通过遍历，然后使用`is`判断或者`as`转换。\n\n> 在`switch`的`case`语句中，使用`as`而不是`as?`。因为`case`语句中类型的检查和转换总是安全的。\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","slug":"swift_10","published":1,"updated":"2017-05-08T16:40:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2gdu6k6000pv1o3gcn3x18w","content":"<p>本篇介绍Swift的基础知识：类型的检查和转换。</p>\n<a id=\"more\"></a>\n<p><strong>Title: <a href=\"https://aidaizyy.github.io/swift_10\" target=\"_blank\" rel=\"external\">Swift基础入门(10)：类型转换</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#x6d;&#97;&#x69;&#108;&#x74;&#x6f;&#x3a;&#97;&#x69;&#100;&#97;&#105;&#x7a;&#121;&#121;&#x40;&#103;&#x6d;&#97;&#105;&#108;&#46;&#x63;&#x6f;&#109;\">&#97;&#x69;&#100;&#97;&#105;&#x7a;&#121;&#121;&#x40;&#103;&#x6d;&#97;&#105;&#108;&#46;&#x63;&#x6f;&#109;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-07-24</a></strong></p>\n<h1 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h1><h2 id=\"数值型类型转换\"><a href=\"#数值型类型转换\" class=\"headerlink\" title=\"数值型类型转换\"></a>数值型类型转换</h2><ul>\n<li><p>Int，Double，Float：<br><code>Int16</code>与<code>Int8</code>不能直接相加，需要通过<code>Int16(Int8)</code>转换。同样，<code>Int8</code>，<code>UInt8</code>，<code>Int16</code>，<code>UInt16</code>，<code>Int32</code>，<code>UInt32</code>，<code>Int64</code>，<code>UInt64</code>都可以互相转换。<br><code>Double</code>与<code>Int</code>也不能相加，也需要通过<code>Double(Int)</code>转换，如果只需要整数部分，也可以通过<code>Int(Double)</code>转换。同样，<code>Float(Int)</code>，<code>Int(Float)</code>，<code>Double(Float)</code>，<code>Float(Double)</code>都可以互相转换</p>\n</li>\n<li><p>String，Int：<br>String-&gt;Int：<code>String.toInt()</code>函数可以把<code>String</code>转换成可选类型<code>Int?</code>，因为<code>String</code>中不一定能转换成<code>Int</code>，所以得到可选类型。<br>Int-&gt;String：<code>String(Int)</code>函数可以把<code>Int</code>转换成<code>String</code>。</p>\n</li>\n</ul>\n<h2 id=\"类型检查和向下转换\"><a href=\"#类型检查和向下转换\" class=\"headerlink\" title=\"类型检查和向下转换\"></a>类型检查和向下转换</h2><p>类型检查用<code>is</code>操作符检查一个实例是否属于特定类型，返回<code>true</code>或者<code>false</code>。<br>基类类型用<code>as?</code>或者<code>as!</code>操作符转换成子类类型。因为转换可能失败，所以使用<code>as?</code>返回可选类型的子类类型；如果确定转换一定成功，可以使用<code>as!</code>强制返回非可选类型的子类类型。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MediaItem</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Movie</span>: <span class=\"title\">MediaItem</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> director: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>, director: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.director = director</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(name: name)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Song</span>: <span class=\"title\">MediaItem</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> artist: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>, artist: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.artist = artist</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(name: name)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> library = [</div><div class=\"line\">    <span class=\"type\">Movie</span>(name: <span class=\"string\">\"Casablanca\"</span>, director: <span class=\"string\">\"Michael Curtiz\"</span>),</div><div class=\"line\">    <span class=\"type\">Song</span>(name: <span class=\"string\">\"Blue Suede Shoes\"</span>, artist: <span class=\"string\">\"Elvis Presley\"</span>),</div><div class=\"line\">    <span class=\"type\">Movie</span>(name: <span class=\"string\">\"Citizen Kane\"</span>, director: <span class=\"string\">\"Orson Welles\"</span>),</div><div class=\"line\">    <span class=\"type\">Song</span>(name: <span class=\"string\">\"The One And Only\"</span>, artist: <span class=\"string\">\"Chesney Hawkes\"</span>),</div><div class=\"line\">    <span class=\"type\">Song</span>(name: <span class=\"string\">\"Never Gonna Give You Up\"</span>, artist: <span class=\"string\">\"Rick Astley\"</span>)</div><div class=\"line\">]</div><div class=\"line\"><span class=\"comment\">// the type of \"library\" is inferred to be [MediaItem]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> movieCount = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">var</span> songCount = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> library &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> item <span class=\"keyword\">is</span> <span class=\"type\">Movie</span> &#123;</div><div class=\"line\">        ++movieCount</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> item <span class=\"keyword\">is</span> <span class=\"type\">Song</span> &#123;</div><div class=\"line\">        ++songCount</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"Media library contains \\(movieCount) movies and \\(songCount) songs\"</span>)</div><div class=\"line\"><span class=\"comment\">// prints \"Media library contains 2 movies and 3 songs\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> library &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> movie = item <span class=\"keyword\">as</span>? <span class=\"type\">Movie</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">println</span>(<span class=\"string\">\"Movie: '\\(movie.name)', dir. \\(movie.director)\"</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> song = item <span class=\"keyword\">as</span>? <span class=\"type\">Song</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">println</span>(<span class=\"string\">\"Song: '\\(song.name)', by \\(song.artist)\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Movie: 'Casablanca', dir. Michael Curtiz</span></div><div class=\"line\"><span class=\"comment\">// Song: 'Blue Suede Shoes', by Elvis Presley</span></div><div class=\"line\"><span class=\"comment\">// Movie: 'Citizen Kane', dir. Orson Welles</span></div><div class=\"line\"><span class=\"comment\">// Song: 'The One And Only', by Chesney Hawkes</span></div><div class=\"line\"><span class=\"comment\">// Song: 'Never Gonna Give You Up', by Rick Astley</span></div></pre></td></tr></table></figure></p>\n<p>类<code>Movie</code>和类<code>Song</code>都是继承自类<code>MediaItem</code>。<br>数组<code>Libray</code>自动判断类型为<code>MediaItem</code>，存入了两个<code>Movie</code>实例和三个<code>Song</code>实例。在<code>for-in</code>循环中遍历出来的都是基类类型，但它实际上存储的是子类类型。<br>第33-43行：<code>item is Movie</code>和<code>item is Song</code>判断<code>item</code>实际存储的值是不是子类类型，是的话在相应数量的记录上加1，最后输出各子类类型的数组元素的个数。<br>第45-56行：<code>item as? Movie</code>和<code>item as? Song</code>将<code>item</code>强制转换成子类类型，如果实际存储的不相符返回<code>nil</code>，实际存储的相符返回相应的子类类型，并打印相应信息。</p>\n<h2 id=\"Any和AnyObject类型转换\"><a href=\"#Any和AnyObject类型转换\" class=\"headerlink\" title=\"Any和AnyObject类型转换\"></a>Any和AnyObject类型转换</h2><ul>\n<li>Any：任意类型，包括方法类型。</li>\n<li>AnyObject：任意class类型。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> someObjects: [<span class=\"type\">AnyObject</span>] = [</div><div class=\"line\">    <span class=\"type\">Movie</span>(name: <span class=\"string\">\"2001: A Space Odyssey\"</span>, director: <span class=\"string\">\"Stanley Kubrick\"</span>),</div><div class=\"line\">    <span class=\"type\">Movie</span>(name: <span class=\"string\">\"Moon\"</span>, director: <span class=\"string\">\"Duncan Jones\"</span>),</div><div class=\"line\">    <span class=\"type\">Movie</span>(name: <span class=\"string\">\"Alien\"</span>, director: <span class=\"string\">\"Ridley Scott\"</span>)</div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> things = [<span class=\"type\">Any</span>]()</div><div class=\"line\">things.append(<span class=\"number\">0</span>)</div><div class=\"line\">things.append(<span class=\"number\">0.0</span>)</div><div class=\"line\">things.append(<span class=\"string\">\"hello\"</span>)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><code>someObject</code>是一个很多class类型组成的混合class类型数组，所以用<code>AnyObject</code>。<br><code>things</code>是一个很多类型组成的混合类型数组，所以用<code>Any</code>。<br>它们的访问都可以通过遍历，然后使用<code>is</code>判断或者<code>as</code>转换。</p>\n<blockquote>\n<p>在<code>switch</code>的<code>case</code>语句中，使用<code>as</code>而不是<code>as?</code>。因为<code>case</code>语句中类型的检查和转换总是安全的。</p>\n</blockquote>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>本篇介绍Swift的基础知识：类型的检查和转换。</p>","more":"<p><strong>Title: <a href=\"https://aidaizyy.github.io/swift_10\" target=\"_blank\" rel=\"external\">Swift基础入门(10)：类型转换</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#x6d;&#97;&#x69;&#108;&#x74;&#x6f;&#x3a;&#97;&#x69;&#100;&#97;&#105;&#x7a;&#121;&#121;&#x40;&#103;&#x6d;&#97;&#105;&#108;&#46;&#x63;&#x6f;&#109;\">&#97;&#x69;&#100;&#97;&#105;&#x7a;&#121;&#121;&#x40;&#103;&#x6d;&#97;&#105;&#108;&#46;&#x63;&#x6f;&#109;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-07-24</a></strong></p>\n<h1 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h1><h2 id=\"数值型类型转换\"><a href=\"#数值型类型转换\" class=\"headerlink\" title=\"数值型类型转换\"></a>数值型类型转换</h2><ul>\n<li><p>Int，Double，Float：<br><code>Int16</code>与<code>Int8</code>不能直接相加，需要通过<code>Int16(Int8)</code>转换。同样，<code>Int8</code>，<code>UInt8</code>，<code>Int16</code>，<code>UInt16</code>，<code>Int32</code>，<code>UInt32</code>，<code>Int64</code>，<code>UInt64</code>都可以互相转换。<br><code>Double</code>与<code>Int</code>也不能相加，也需要通过<code>Double(Int)</code>转换，如果只需要整数部分，也可以通过<code>Int(Double)</code>转换。同样，<code>Float(Int)</code>，<code>Int(Float)</code>，<code>Double(Float)</code>，<code>Float(Double)</code>都可以互相转换</p>\n</li>\n<li><p>String，Int：<br>String-&gt;Int：<code>String.toInt()</code>函数可以把<code>String</code>转换成可选类型<code>Int?</code>，因为<code>String</code>中不一定能转换成<code>Int</code>，所以得到可选类型。<br>Int-&gt;String：<code>String(Int)</code>函数可以把<code>Int</code>转换成<code>String</code>。</p>\n</li>\n</ul>\n<h2 id=\"类型检查和向下转换\"><a href=\"#类型检查和向下转换\" class=\"headerlink\" title=\"类型检查和向下转换\"></a>类型检查和向下转换</h2><p>类型检查用<code>is</code>操作符检查一个实例是否属于特定类型，返回<code>true</code>或者<code>false</code>。<br>基类类型用<code>as?</code>或者<code>as!</code>操作符转换成子类类型。因为转换可能失败，所以使用<code>as?</code>返回可选类型的子类类型；如果确定转换一定成功，可以使用<code>as!</code>强制返回非可选类型的子类类型。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MediaItem</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Movie</span>: <span class=\"title\">MediaItem</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> director: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>, director: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.director = director</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(name: name)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Song</span>: <span class=\"title\">MediaItem</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> artist: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>, artist: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.artist = artist</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(name: name)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> library = [</div><div class=\"line\">    <span class=\"type\">Movie</span>(name: <span class=\"string\">\"Casablanca\"</span>, director: <span class=\"string\">\"Michael Curtiz\"</span>),</div><div class=\"line\">    <span class=\"type\">Song</span>(name: <span class=\"string\">\"Blue Suede Shoes\"</span>, artist: <span class=\"string\">\"Elvis Presley\"</span>),</div><div class=\"line\">    <span class=\"type\">Movie</span>(name: <span class=\"string\">\"Citizen Kane\"</span>, director: <span class=\"string\">\"Orson Welles\"</span>),</div><div class=\"line\">    <span class=\"type\">Song</span>(name: <span class=\"string\">\"The One And Only\"</span>, artist: <span class=\"string\">\"Chesney Hawkes\"</span>),</div><div class=\"line\">    <span class=\"type\">Song</span>(name: <span class=\"string\">\"Never Gonna Give You Up\"</span>, artist: <span class=\"string\">\"Rick Astley\"</span>)</div><div class=\"line\">]</div><div class=\"line\"><span class=\"comment\">// the type of \"library\" is inferred to be [MediaItem]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> movieCount = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">var</span> songCount = <span class=\"number\">0</span></div><div class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> library &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> item <span class=\"keyword\">is</span> <span class=\"type\">Movie</span> &#123;</div><div class=\"line\">        ++movieCount</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> item <span class=\"keyword\">is</span> <span class=\"type\">Song</span> &#123;</div><div class=\"line\">        ++songCount</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"Media library contains \\(movieCount) movies and \\(songCount) songs\"</span>)</div><div class=\"line\"><span class=\"comment\">// prints \"Media library contains 2 movies and 3 songs\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> library &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> movie = item <span class=\"keyword\">as</span>? <span class=\"type\">Movie</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">println</span>(<span class=\"string\">\"Movie: '\\(movie.name)', dir. \\(movie.director)\"</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> song = item <span class=\"keyword\">as</span>? <span class=\"type\">Song</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">println</span>(<span class=\"string\">\"Song: '\\(song.name)', by \\(song.artist)\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Movie: 'Casablanca', dir. Michael Curtiz</span></div><div class=\"line\"><span class=\"comment\">// Song: 'Blue Suede Shoes', by Elvis Presley</span></div><div class=\"line\"><span class=\"comment\">// Movie: 'Citizen Kane', dir. Orson Welles</span></div><div class=\"line\"><span class=\"comment\">// Song: 'The One And Only', by Chesney Hawkes</span></div><div class=\"line\"><span class=\"comment\">// Song: 'Never Gonna Give You Up', by Rick Astley</span></div></pre></td></tr></table></figure></p>\n<p>类<code>Movie</code>和类<code>Song</code>都是继承自类<code>MediaItem</code>。<br>数组<code>Libray</code>自动判断类型为<code>MediaItem</code>，存入了两个<code>Movie</code>实例和三个<code>Song</code>实例。在<code>for-in</code>循环中遍历出来的都是基类类型，但它实际上存储的是子类类型。<br>第33-43行：<code>item is Movie</code>和<code>item is Song</code>判断<code>item</code>实际存储的值是不是子类类型，是的话在相应数量的记录上加1，最后输出各子类类型的数组元素的个数。<br>第45-56行：<code>item as? Movie</code>和<code>item as? Song</code>将<code>item</code>强制转换成子类类型，如果实际存储的不相符返回<code>nil</code>，实际存储的相符返回相应的子类类型，并打印相应信息。</p>\n<h2 id=\"Any和AnyObject类型转换\"><a href=\"#Any和AnyObject类型转换\" class=\"headerlink\" title=\"Any和AnyObject类型转换\"></a>Any和AnyObject类型转换</h2><ul>\n<li>Any：任意类型，包括方法类型。</li>\n<li>AnyObject：任意class类型。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> someObjects: [<span class=\"type\">AnyObject</span>] = [</div><div class=\"line\">    <span class=\"type\">Movie</span>(name: <span class=\"string\">\"2001: A Space Odyssey\"</span>, director: <span class=\"string\">\"Stanley Kubrick\"</span>),</div><div class=\"line\">    <span class=\"type\">Movie</span>(name: <span class=\"string\">\"Moon\"</span>, director: <span class=\"string\">\"Duncan Jones\"</span>),</div><div class=\"line\">    <span class=\"type\">Movie</span>(name: <span class=\"string\">\"Alien\"</span>, director: <span class=\"string\">\"Ridley Scott\"</span>)</div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> things = [<span class=\"type\">Any</span>]()</div><div class=\"line\">things.append(<span class=\"number\">0</span>)</div><div class=\"line\">things.append(<span class=\"number\">0.0</span>)</div><div class=\"line\">things.append(<span class=\"string\">\"hello\"</span>)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><code>someObject</code>是一个很多class类型组成的混合class类型数组，所以用<code>AnyObject</code>。<br><code>things</code>是一个很多类型组成的混合类型数组，所以用<code>Any</code>。<br>它们的访问都可以通过遍历，然后使用<code>is</code>判断或者<code>as</code>转换。</p>\n<blockquote>\n<p>在<code>switch</code>的<code>case</code>语句中，使用<code>as</code>而不是<code>as?</code>。因为<code>case</code>语句中类型的检查和转换总是安全的。</p>\n</blockquote>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>"},{"title":"Swift基础入门(12)：泛型","date":"2015-07-28T02:34:05.000Z","toc":true,"_content":"\n本篇介绍Swift的基础知识：泛型，适合任何类型的函数和类型。\n\n<!--more-->\n**Title: [Swift基础入门(12)：泛型](https://aidaizyy.github.io/swift_12)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-07-28](http://aidaizyy.github.io)**\n\n# 泛型\n泛型（_generic_）类似于C++中的模板，可以写出适合任何类型的函数和类型。为函数或者类型指定了模板类型，可以传入任何类型去替代模板类型。\n\n## 泛型函数\n``` swift\nfunc swapTwoValues<T>(inout a: T, inout b: T) {\n    let temporaryA = a\n    a = b\n    b = temporaryA\n}\n\nvar someInt = 3\nvar anotherInt = 107\nswapTwoValues(&someInt, &anotherInt)\n// someInt is now 107, and anotherInt is now 3\n\nvar someString = \"hello\"\nvar anotherString = \"world\"\nswapTwoValues(&someString, &anotherString)\n// someString is now \"world\", and anotherString is now \"hello\"\n```\n函数`swapTwoValues`后面接尖括号和占位符`T`替代任何类型，函数的两个参数`a`和`b`的类型都指定为`T`，代表这两个参数类型是一样的，但是没有被确定，适合任何类型。\n第7-10行，传入了两个整数，可以调用函数；第12-15行，传入了两个字符串，可以调用函数。\n\n## 泛型类型\n``` swift\nstruct Stack<T> {\n    var items = [T]()\n    mutating func push(item: T) {\n        items.append(item)\n    }\n    mutating func pop() -> T {\n        return items.removeLast()\n    }\n}\n\nvar stackOfStrings = Stack<String>()\nstackOfStrings.push(\"uno\")\nstackOfStrings.push(\"dos\")\nstackOfStrings.push(\"tres\")\nstackOfStrings.push(\"cuatro\")\n// 现在栈已经有4个string了\n```\n结构体`Stack`被定义为泛型类型，传入参数T表示类型，比如`Stack<String>`。\n\n## 类型约束\n类型参数可以有多个，在尖括号中用逗号隔开。\n类型参数的命名可以自由命名，以大写字母开头。\n类型参数也可以定义类型约束。\n``` swift\nfunc someFunction<T: SomeClass, U: SomeProtocol>(someT: T, someU: U) {\n    // function body goes here\n}\n```\n比如上面代码中，类型`T`必须是类`SomeClass`的子类，类型`U`必须遵循协议`SomeProtocol`。\n再来一个例子。\n``` swift\nfunc findIndex<T: Equatable>(array: T[], valueToFind: T) -> Int? {\n    for (index, value) in enumerate(array) {\n        if value == valueToFind {\n            return index\n        }\n    }\n    return nil\n}\n```\n`Equatable`是Swift自带的协议，表示可以用`==`和`!=`进行比较，所有的标准类型都支持这个协议。因为后面的函数体中出现了`==`比较，所以必须要求类型`T`遵循`Equatable`类型。\n\n## 关联类型\n关联类型（_associated type_）声明在协议中，表示一个类型，但协议被实现前不需要指定具体类型。\n下面的例子声明了一个协议`Container`，表示容器，并定义了`append`方法，`count`属性和下标。`append`方法需要传入一个参数，为了使协议能支持任何类型，传入的参数类型不确定，因此用关联类型`ItemType`替代，使用关键字`typealias`，这里不是别名的意思。\n``` swift\nprotocol Container {\n    typealias ItemType\n    mutating func append(item: ItemType)\n    var count: Int { get }\n    subscript(i: Int) -> ItemType { get }\n}\n```\n声明协议之后，实现这个协议。\n把关联类型声明成`Int`：\n``` swift\nstruct IntStack: Container {\n    // IntStack的原始实现\n    var items = [Int]()\n    // 遵循Container协议的实现\n    typealias ItemType = Int\n    mutating func append(item: Int) {\n        self.push(item)\n    }\n    ……\n}\n```\n也可以把关联类型声明成泛型类型：\n``` swift\nstruct Stack<T>: Container {\n    // original Stack<T> implementation\n    var items = [T]()\n    // conformance to the Container protocol\n    mutating func append(item: T) {\n        self.push(item)\n    }\n}\n```\n这里没有定义`typealias ItemType`的类型，因为通过`append()`传入的参数就可以判断`ItemType`的类型，可以省略定义。\n\n- 参数约束\n通常对关联类型定义约束，使用`where`语句定义参数的约束，紧跟在类型参数列表后面。\n下面一个例子。\n``` swift\nfunc allItemsMatch<\n    C1: Container, C2: Container\n    where C1.ItemType == C2.ItemType, C1.ItemType: Equatable>\n    (someContainer: C1, anotherContainer: C2) -> Bool {\n\n        // 检查两个Container的元素个数是否相同\n        if someContainer.count != anotherContainer.count {\n            return false\n        }\n\n        // 检查两个Container相应位置的元素彼此是否相等\n        for i in 0..<someContainer.count {\n            if someContainer[i] != anotherContainer[i] {\n                return false\n            }\n        }\n\n        // 如果所有元素检查都相同则返回true\n        return true\n\n}\n```\n两个类型参数`C1`和`C2`都遵循协议`Container`，紧跟`where`语句，表示`C1`的参数和`C2`的参数必须是同一个类型，且可以使用`==`或者`=!`符号。\n``` swift\nvar stackOfStrings = Stack<String>()\nstackOfStrings.push(\"uno\")\nstackOfStrings.push(\"dos\")\nstackOfStrings.push(\"tres\")\n\nvar arrayOfStrings = [\"uno\", \"dos\", \"tres\"]\n\nif allItemsMatch(stackOfStrings, arrayOfStrings) {\n    println(\"All items match.\")\n} else {\n    println(\"Not all items match.\")\n}\n// 输出 \"All items match.\"\n```\n这个函数的作用是比较两个容器的元素是否完全一样。\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","source":"_posts/swift_12.md","raw":"title: \"Swift基础入门(12)：泛型\"\ndate: 2015-07-28 10:34:05\ntags:\n- swift\ncategories: swift\ntoc: true\n---\n\n本篇介绍Swift的基础知识：泛型，适合任何类型的函数和类型。\n\n<!--more-->\n**Title: [Swift基础入门(12)：泛型](https://aidaizyy.github.io/swift_12)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-07-28](http://aidaizyy.github.io)**\n\n# 泛型\n泛型（_generic_）类似于C++中的模板，可以写出适合任何类型的函数和类型。为函数或者类型指定了模板类型，可以传入任何类型去替代模板类型。\n\n## 泛型函数\n``` swift\nfunc swapTwoValues<T>(inout a: T, inout b: T) {\n    let temporaryA = a\n    a = b\n    b = temporaryA\n}\n\nvar someInt = 3\nvar anotherInt = 107\nswapTwoValues(&someInt, &anotherInt)\n// someInt is now 107, and anotherInt is now 3\n\nvar someString = \"hello\"\nvar anotherString = \"world\"\nswapTwoValues(&someString, &anotherString)\n// someString is now \"world\", and anotherString is now \"hello\"\n```\n函数`swapTwoValues`后面接尖括号和占位符`T`替代任何类型，函数的两个参数`a`和`b`的类型都指定为`T`，代表这两个参数类型是一样的，但是没有被确定，适合任何类型。\n第7-10行，传入了两个整数，可以调用函数；第12-15行，传入了两个字符串，可以调用函数。\n\n## 泛型类型\n``` swift\nstruct Stack<T> {\n    var items = [T]()\n    mutating func push(item: T) {\n        items.append(item)\n    }\n    mutating func pop() -> T {\n        return items.removeLast()\n    }\n}\n\nvar stackOfStrings = Stack<String>()\nstackOfStrings.push(\"uno\")\nstackOfStrings.push(\"dos\")\nstackOfStrings.push(\"tres\")\nstackOfStrings.push(\"cuatro\")\n// 现在栈已经有4个string了\n```\n结构体`Stack`被定义为泛型类型，传入参数T表示类型，比如`Stack<String>`。\n\n## 类型约束\n类型参数可以有多个，在尖括号中用逗号隔开。\n类型参数的命名可以自由命名，以大写字母开头。\n类型参数也可以定义类型约束。\n``` swift\nfunc someFunction<T: SomeClass, U: SomeProtocol>(someT: T, someU: U) {\n    // function body goes here\n}\n```\n比如上面代码中，类型`T`必须是类`SomeClass`的子类，类型`U`必须遵循协议`SomeProtocol`。\n再来一个例子。\n``` swift\nfunc findIndex<T: Equatable>(array: T[], valueToFind: T) -> Int? {\n    for (index, value) in enumerate(array) {\n        if value == valueToFind {\n            return index\n        }\n    }\n    return nil\n}\n```\n`Equatable`是Swift自带的协议，表示可以用`==`和`!=`进行比较，所有的标准类型都支持这个协议。因为后面的函数体中出现了`==`比较，所以必须要求类型`T`遵循`Equatable`类型。\n\n## 关联类型\n关联类型（_associated type_）声明在协议中，表示一个类型，但协议被实现前不需要指定具体类型。\n下面的例子声明了一个协议`Container`，表示容器，并定义了`append`方法，`count`属性和下标。`append`方法需要传入一个参数，为了使协议能支持任何类型，传入的参数类型不确定，因此用关联类型`ItemType`替代，使用关键字`typealias`，这里不是别名的意思。\n``` swift\nprotocol Container {\n    typealias ItemType\n    mutating func append(item: ItemType)\n    var count: Int { get }\n    subscript(i: Int) -> ItemType { get }\n}\n```\n声明协议之后，实现这个协议。\n把关联类型声明成`Int`：\n``` swift\nstruct IntStack: Container {\n    // IntStack的原始实现\n    var items = [Int]()\n    // 遵循Container协议的实现\n    typealias ItemType = Int\n    mutating func append(item: Int) {\n        self.push(item)\n    }\n    ……\n}\n```\n也可以把关联类型声明成泛型类型：\n``` swift\nstruct Stack<T>: Container {\n    // original Stack<T> implementation\n    var items = [T]()\n    // conformance to the Container protocol\n    mutating func append(item: T) {\n        self.push(item)\n    }\n}\n```\n这里没有定义`typealias ItemType`的类型，因为通过`append()`传入的参数就可以判断`ItemType`的类型，可以省略定义。\n\n- 参数约束\n通常对关联类型定义约束，使用`where`语句定义参数的约束，紧跟在类型参数列表后面。\n下面一个例子。\n``` swift\nfunc allItemsMatch<\n    C1: Container, C2: Container\n    where C1.ItemType == C2.ItemType, C1.ItemType: Equatable>\n    (someContainer: C1, anotherContainer: C2) -> Bool {\n\n        // 检查两个Container的元素个数是否相同\n        if someContainer.count != anotherContainer.count {\n            return false\n        }\n\n        // 检查两个Container相应位置的元素彼此是否相等\n        for i in 0..<someContainer.count {\n            if someContainer[i] != anotherContainer[i] {\n                return false\n            }\n        }\n\n        // 如果所有元素检查都相同则返回true\n        return true\n\n}\n```\n两个类型参数`C1`和`C2`都遵循协议`Container`，紧跟`where`语句，表示`C1`的参数和`C2`的参数必须是同一个类型，且可以使用`==`或者`=!`符号。\n``` swift\nvar stackOfStrings = Stack<String>()\nstackOfStrings.push(\"uno\")\nstackOfStrings.push(\"dos\")\nstackOfStrings.push(\"tres\")\n\nvar arrayOfStrings = [\"uno\", \"dos\", \"tres\"]\n\nif allItemsMatch(stackOfStrings, arrayOfStrings) {\n    println(\"All items match.\")\n} else {\n    println(\"Not all items match.\")\n}\n// 输出 \"All items match.\"\n```\n这个函数的作用是比较两个容器的元素是否完全一样。\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","slug":"swift_12","published":1,"updated":"2017-05-08T16:40:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2gdu6k9000tv1o37txn4wts","content":"<p>本篇介绍Swift的基础知识：泛型，适合任何类型的函数和类型。</p>\n<a id=\"more\"></a>\n<p><strong>Title: <a href=\"https://aidaizyy.github.io/swift_12\" target=\"_blank\" rel=\"external\">Swift基础入门(12)：泛型</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#x6d;&#97;&#x69;&#x6c;&#x74;&#111;&#x3a;&#97;&#x69;&#100;&#x61;&#x69;&#122;&#x79;&#x79;&#64;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;\">&#97;&#x69;&#100;&#x61;&#x69;&#122;&#x79;&#x79;&#64;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-07-28</a></strong></p>\n<h1 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h1><p>泛型（<em>generic</em>）类似于C++中的模板，可以写出适合任何类型的函数和类型。为函数或者类型指定了模板类型，可以传入任何类型去替代模板类型。</p>\n<h2 id=\"泛型函数\"><a href=\"#泛型函数\" class=\"headerlink\" title=\"泛型函数\"></a>泛型函数</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">swapTwoValues</span>&lt;T&gt;<span class=\"params\">(<span class=\"keyword\">inout</span> a: T, <span class=\"keyword\">inout</span> b: T)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> temporaryA = a</div><div class=\"line\">    a = b</div><div class=\"line\">    b = temporaryA</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> someInt = <span class=\"number\">3</span></div><div class=\"line\"><span class=\"keyword\">var</span> anotherInt = <span class=\"number\">107</span></div><div class=\"line\">swapTwoValues(&amp;someInt, &amp;anotherInt)</div><div class=\"line\"><span class=\"comment\">// someInt is now 107, and anotherInt is now 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> someString = <span class=\"string\">\"hello\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> anotherString = <span class=\"string\">\"world\"</span></div><div class=\"line\">swapTwoValues(&amp;someString, &amp;anotherString)</div><div class=\"line\"><span class=\"comment\">// someString is now \"world\", and anotherString is now \"hello\"</span></div></pre></td></tr></table></figure>\n<p>函数<code>swapTwoValues</code>后面接尖括号和占位符<code>T</code>替代任何类型，函数的两个参数<code>a</code>和<code>b</code>的类型都指定为<code>T</code>，代表这两个参数类型是一样的，但是没有被确定，适合任何类型。<br>第7-10行，传入了两个整数，可以调用函数；第12-15行，传入了两个字符串，可以调用函数。</p>\n<h2 id=\"泛型类型\"><a href=\"#泛型类型\" class=\"headerlink\" title=\"泛型类型\"></a>泛型类型</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Stack</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> items = [<span class=\"type\">T</span>]()</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">push</span><span class=\"params\">(item: T)</span></span> &#123;</div><div class=\"line\">        items.append(item)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">T</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> items.removeLast()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> stackOfStrings = <span class=\"type\">Stack</span>&lt;<span class=\"type\">String</span>&gt;()</div><div class=\"line\">stackOfStrings.push(<span class=\"string\">\"uno\"</span>)</div><div class=\"line\">stackOfStrings.push(<span class=\"string\">\"dos\"</span>)</div><div class=\"line\">stackOfStrings.push(<span class=\"string\">\"tres\"</span>)</div><div class=\"line\">stackOfStrings.push(<span class=\"string\">\"cuatro\"</span>)</div><div class=\"line\"><span class=\"comment\">// 现在栈已经有4个string了</span></div></pre></td></tr></table></figure>\n<p>结构体<code>Stack</code>被定义为泛型类型，传入参数T表示类型，比如<code>Stack&lt;String&gt;</code>。</p>\n<h2 id=\"类型约束\"><a href=\"#类型约束\" class=\"headerlink\" title=\"类型约束\"></a>类型约束</h2><p>类型参数可以有多个，在尖括号中用逗号隔开。<br>类型参数的命名可以自由命名，以大写字母开头。<br>类型参数也可以定义类型约束。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFunction</span>&lt;T: SomeClass, U: SomeProtocol&gt;<span class=\"params\">(someT: T, someU: U)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// function body goes here</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>比如上面代码中，类型<code>T</code>必须是类<code>SomeClass</code>的子类，类型<code>U</code>必须遵循协议<code>SomeProtocol</code>。<br>再来一个例子。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">findIndex</span>&lt;T: Equatable&gt;<span class=\"params\">(array: T[], valueToFind: T)</span></span> -&gt; <span class=\"type\">Int</span>? &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (index, value) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(array) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> value == valueToFind &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> index</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>Equatable</code>是Swift自带的协议，表示可以用<code>==</code>和<code>!=</code>进行比较，所有的标准类型都支持这个协议。因为后面的函数体中出现了<code>==</code>比较，所以必须要求类型<code>T</code>遵循<code>Equatable</code>类型。</p>\n<h2 id=\"关联类型\"><a href=\"#关联类型\" class=\"headerlink\" title=\"关联类型\"></a>关联类型</h2><p>关联类型（<em>associated type</em>）声明在协议中，表示一个类型，但协议被实现前不需要指定具体类型。<br>下面的例子声明了一个协议<code>Container</code>，表示容器，并定义了<code>append</code>方法，<code>count</code>属性和下标。<code>append</code>方法需要传入一个参数，为了使协议能支持任何类型，传入的参数类型不确定，因此用关联类型<code>ItemType</code>替代，使用关键字<code>typealias</code>，这里不是别名的意思。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Container</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">typealias</span> <span class=\"type\">ItemType</span></div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">append</span><span class=\"params\">(item: ItemType)</span></span></div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">count</span>: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> &#125;</div><div class=\"line\">    <span class=\"keyword\">subscript</span>(i: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">ItemType</span> &#123; <span class=\"keyword\">get</span> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>声明协议之后，实现这个协议。<br>把关联类型声明成<code>Int</code>：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">IntStack</span>: <span class=\"title\">Container</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// IntStack的原始实现</span></div><div class=\"line\">    <span class=\"keyword\">var</span> items = [<span class=\"type\">Int</span>]()</div><div class=\"line\">    <span class=\"comment\">// 遵循Container协议的实现</span></div><div class=\"line\">    <span class=\"keyword\">typealias</span> <span class=\"type\">ItemType</span> = <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">append</span><span class=\"params\">(item: Int)</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.push(item)</div><div class=\"line\">    &#125;</div><div class=\"line\">    ……</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>也可以把关联类型声明成泛型类型：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Stack</span>&lt;<span class=\"title\">T</span>&gt;: <span class=\"title\">Container</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// original Stack&lt;T&gt; implementation</span></div><div class=\"line\">    <span class=\"keyword\">var</span> items = [<span class=\"type\">T</span>]()</div><div class=\"line\">    <span class=\"comment\">// conformance to the Container protocol</span></div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">append</span><span class=\"params\">(item: T)</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.push(item)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里没有定义<code>typealias ItemType</code>的类型，因为通过<code>append()</code>传入的参数就可以判断<code>ItemType</code>的类型，可以省略定义。</p>\n<ul>\n<li>参数约束<br>通常对关联类型定义约束，使用<code>where</code>语句定义参数的约束，紧跟在类型参数列表后面。<br>下面一个例子。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">allItemsMatch</span>&lt;</span></div><div class=\"line\">    C1: Container, C2: Container</div><div class=\"line\">    where C1.ItemType == C2.ItemType, C1.ItemType: Equatable&gt;</div><div class=\"line\">    <span class=\"params\">(someContainer: C1, anotherContainer: C2)</span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 检查两个Container的元素个数是否相同</span></div><div class=\"line\">        <span class=\"keyword\">if</span> someContainer.<span class=\"built_in\">count</span> != anotherContainer.<span class=\"built_in\">count</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 检查两个Container相应位置的元素彼此是否相等</span></div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span>..&lt;someContainer.<span class=\"built_in\">count</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> someContainer[i] != anotherContainer[i] &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 如果所有元素检查都相同则返回true</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>两个类型参数<code>C1</code>和<code>C2</code>都遵循协议<code>Container</code>，紧跟<code>where</code>语句，表示<code>C1</code>的参数和<code>C2</code>的参数必须是同一个类型，且可以使用<code>==</code>或者<code>=!</code>符号。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> stackOfStrings = <span class=\"type\">Stack</span>&lt;<span class=\"type\">String</span>&gt;()</div><div class=\"line\">stackOfStrings.push(<span class=\"string\">\"uno\"</span>)</div><div class=\"line\">stackOfStrings.push(<span class=\"string\">\"dos\"</span>)</div><div class=\"line\">stackOfStrings.push(<span class=\"string\">\"tres\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arrayOfStrings = [<span class=\"string\">\"uno\"</span>, <span class=\"string\">\"dos\"</span>, <span class=\"string\">\"tres\"</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> allItemsMatch(stackOfStrings, arrayOfStrings) &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"All items match.\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Not all items match.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"All items match.\"</span></div></pre></td></tr></table></figure></p>\n<p>这个函数的作用是比较两个容器的元素是否完全一样。</p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>本篇介绍Swift的基础知识：泛型，适合任何类型的函数和类型。</p>","more":"<p><strong>Title: <a href=\"https://aidaizyy.github.io/swift_12\" target=\"_blank\" rel=\"external\">Swift基础入门(12)：泛型</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#x6d;&#97;&#x69;&#x6c;&#x74;&#111;&#x3a;&#97;&#x69;&#100;&#x61;&#x69;&#122;&#x79;&#x79;&#64;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;\">&#97;&#x69;&#100;&#x61;&#x69;&#122;&#x79;&#x79;&#64;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-07-28</a></strong></p>\n<h1 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h1><p>泛型（<em>generic</em>）类似于C++中的模板，可以写出适合任何类型的函数和类型。为函数或者类型指定了模板类型，可以传入任何类型去替代模板类型。</p>\n<h2 id=\"泛型函数\"><a href=\"#泛型函数\" class=\"headerlink\" title=\"泛型函数\"></a>泛型函数</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">swapTwoValues</span>&lt;T&gt;<span class=\"params\">(<span class=\"keyword\">inout</span> a: T, <span class=\"keyword\">inout</span> b: T)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> temporaryA = a</div><div class=\"line\">    a = b</div><div class=\"line\">    b = temporaryA</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> someInt = <span class=\"number\">3</span></div><div class=\"line\"><span class=\"keyword\">var</span> anotherInt = <span class=\"number\">107</span></div><div class=\"line\">swapTwoValues(&amp;someInt, &amp;anotherInt)</div><div class=\"line\"><span class=\"comment\">// someInt is now 107, and anotherInt is now 3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> someString = <span class=\"string\">\"hello\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> anotherString = <span class=\"string\">\"world\"</span></div><div class=\"line\">swapTwoValues(&amp;someString, &amp;anotherString)</div><div class=\"line\"><span class=\"comment\">// someString is now \"world\", and anotherString is now \"hello\"</span></div></pre></td></tr></table></figure>\n<p>函数<code>swapTwoValues</code>后面接尖括号和占位符<code>T</code>替代任何类型，函数的两个参数<code>a</code>和<code>b</code>的类型都指定为<code>T</code>，代表这两个参数类型是一样的，但是没有被确定，适合任何类型。<br>第7-10行，传入了两个整数，可以调用函数；第12-15行，传入了两个字符串，可以调用函数。</p>\n<h2 id=\"泛型类型\"><a href=\"#泛型类型\" class=\"headerlink\" title=\"泛型类型\"></a>泛型类型</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Stack</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> items = [<span class=\"type\">T</span>]()</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">push</span><span class=\"params\">(item: T)</span></span> &#123;</div><div class=\"line\">        items.append(item)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pop</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">T</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> items.removeLast()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> stackOfStrings = <span class=\"type\">Stack</span>&lt;<span class=\"type\">String</span>&gt;()</div><div class=\"line\">stackOfStrings.push(<span class=\"string\">\"uno\"</span>)</div><div class=\"line\">stackOfStrings.push(<span class=\"string\">\"dos\"</span>)</div><div class=\"line\">stackOfStrings.push(<span class=\"string\">\"tres\"</span>)</div><div class=\"line\">stackOfStrings.push(<span class=\"string\">\"cuatro\"</span>)</div><div class=\"line\"><span class=\"comment\">// 现在栈已经有4个string了</span></div></pre></td></tr></table></figure>\n<p>结构体<code>Stack</code>被定义为泛型类型，传入参数T表示类型，比如<code>Stack&lt;String&gt;</code>。</p>\n<h2 id=\"类型约束\"><a href=\"#类型约束\" class=\"headerlink\" title=\"类型约束\"></a>类型约束</h2><p>类型参数可以有多个，在尖括号中用逗号隔开。<br>类型参数的命名可以自由命名，以大写字母开头。<br>类型参数也可以定义类型约束。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">someFunction</span>&lt;T: SomeClass, U: SomeProtocol&gt;<span class=\"params\">(someT: T, someU: U)</span></span> &#123;</div><div class=\"line\">    <span class=\"comment\">// function body goes here</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>比如上面代码中，类型<code>T</code>必须是类<code>SomeClass</code>的子类，类型<code>U</code>必须遵循协议<code>SomeProtocol</code>。<br>再来一个例子。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">findIndex</span>&lt;T: Equatable&gt;<span class=\"params\">(array: T[], valueToFind: T)</span></span> -&gt; <span class=\"type\">Int</span>? &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> (index, value) <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(array) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> value == valueToFind &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> index</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>Equatable</code>是Swift自带的协议，表示可以用<code>==</code>和<code>!=</code>进行比较，所有的标准类型都支持这个协议。因为后面的函数体中出现了<code>==</code>比较，所以必须要求类型<code>T</code>遵循<code>Equatable</code>类型。</p>\n<h2 id=\"关联类型\"><a href=\"#关联类型\" class=\"headerlink\" title=\"关联类型\"></a>关联类型</h2><p>关联类型（<em>associated type</em>）声明在协议中，表示一个类型，但协议被实现前不需要指定具体类型。<br>下面的例子声明了一个协议<code>Container</code>，表示容器，并定义了<code>append</code>方法，<code>count</code>属性和下标。<code>append</code>方法需要传入一个参数，为了使协议能支持任何类型，传入的参数类型不确定，因此用关联类型<code>ItemType</code>替代，使用关键字<code>typealias</code>，这里不是别名的意思。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Container</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">typealias</span> <span class=\"type\">ItemType</span></div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">append</span><span class=\"params\">(item: ItemType)</span></span></div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">count</span>: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> &#125;</div><div class=\"line\">    <span class=\"keyword\">subscript</span>(i: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">ItemType</span> &#123; <span class=\"keyword\">get</span> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>声明协议之后，实现这个协议。<br>把关联类型声明成<code>Int</code>：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">IntStack</span>: <span class=\"title\">Container</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// IntStack的原始实现</span></div><div class=\"line\">    <span class=\"keyword\">var</span> items = [<span class=\"type\">Int</span>]()</div><div class=\"line\">    <span class=\"comment\">// 遵循Container协议的实现</span></div><div class=\"line\">    <span class=\"keyword\">typealias</span> <span class=\"type\">ItemType</span> = <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">append</span><span class=\"params\">(item: Int)</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.push(item)</div><div class=\"line\">    &#125;</div><div class=\"line\">    ……</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>也可以把关联类型声明成泛型类型：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Stack</span>&lt;<span class=\"title\">T</span>&gt;: <span class=\"title\">Container</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// original Stack&lt;T&gt; implementation</span></div><div class=\"line\">    <span class=\"keyword\">var</span> items = [<span class=\"type\">T</span>]()</div><div class=\"line\">    <span class=\"comment\">// conformance to the Container protocol</span></div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">append</span><span class=\"params\">(item: T)</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.push(item)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>这里没有定义<code>typealias ItemType</code>的类型，因为通过<code>append()</code>传入的参数就可以判断<code>ItemType</code>的类型，可以省略定义。</p>\n<ul>\n<li>参数约束<br>通常对关联类型定义约束，使用<code>where</code>语句定义参数的约束，紧跟在类型参数列表后面。<br>下面一个例子。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">allItemsMatch</span>&lt;</span></div><div class=\"line\">    C1: Container, C2: Container</div><div class=\"line\">    where C1.ItemType == C2.ItemType, C1.ItemType: Equatable&gt;</div><div class=\"line\">    <span class=\"params\">(someContainer: C1, anotherContainer: C2)</span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 检查两个Container的元素个数是否相同</span></div><div class=\"line\">        <span class=\"keyword\">if</span> someContainer.<span class=\"built_in\">count</span> != anotherContainer.<span class=\"built_in\">count</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 检查两个Container相应位置的元素彼此是否相等</span></div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span>..&lt;someContainer.<span class=\"built_in\">count</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> someContainer[i] != anotherContainer[i] &#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// 如果所有元素检查都相同则返回true</span></div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>两个类型参数<code>C1</code>和<code>C2</code>都遵循协议<code>Container</code>，紧跟<code>where</code>语句，表示<code>C1</code>的参数和<code>C2</code>的参数必须是同一个类型，且可以使用<code>==</code>或者<code>=!</code>符号。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> stackOfStrings = <span class=\"type\">Stack</span>&lt;<span class=\"type\">String</span>&gt;()</div><div class=\"line\">stackOfStrings.push(<span class=\"string\">\"uno\"</span>)</div><div class=\"line\">stackOfStrings.push(<span class=\"string\">\"dos\"</span>)</div><div class=\"line\">stackOfStrings.push(<span class=\"string\">\"tres\"</span>)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> arrayOfStrings = [<span class=\"string\">\"uno\"</span>, <span class=\"string\">\"dos\"</span>, <span class=\"string\">\"tres\"</span>]</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> allItemsMatch(stackOfStrings, arrayOfStrings) &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"All items match.\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Not all items match.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"All items match.\"</span></div></pre></td></tr></table></figure></p>\n<p>这个函数的作用是比较两个容器的元素是否完全一样。</p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>"},{"title":"Swift基础入门(11)：扩展和协议","date":"2015-07-24T08:28:22.000Z","toc":true,"_content":"\n本篇介绍Swift的基础知识：扩展（_extensions_）和协议（_protocol_）的语法和实例。\n\n<!--more-->\n**Title: [Swift基础入门(11)：扩展和协议](https://aidaizyy.github.io/swift_11)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-07-27](http://aidaizyy.github.io)**\n\n# 扩展\n扩展可以为枚举，类和结构体：\n- 添加计算型实例属性和计算型类型属性\n- 添加实例方法和类型方法\n- 添加构造器\n- 添加下标\n- 添加新的嵌套类型\n- 已有类型适配协议\n\n## 语法\n声明扩展使用关键字`extension`：\n``` swfit\nextension SomeType {\n    // 新功能\n}\n\nextension SomeType: SomeProtocol, AnotherProtocol {\n    // 已有类型适配的协议实现\n}\n```\n\n## 计算型属性\n扩展只能添加计算型属性，包括实例属性和类型属性，但是不能添加存储属性和属性观察器。\n下面的例子为`Double`类添加了5个计算型实例属性，因为都是只读属性，所以省略了`get`关键字。\n``` swift\nextension Double {\n    var km: Double { return self * 1_000.0 }\n    var m : Double { return self }\n    var cm: Double { return self / 100.0 }\n    var mm: Double { return self / 1_000.0 }\n    var ft: Double { return self / 3.28084 }\n}\nlet oneInch = 25.4.mm\nprintln(\"One inch is \\(oneInch) meters\")\n// 打印输出：\"One inch is 0.0254 meters\"\nlet threeFeet = 3.ft\nprintln(\"Three feet is \\(threeFeet) meters\")\n// 打印输出：\"Three feet is 0.914399970739201 meters\"\n```\n\n## 方法\n下面的例子为`Int`类型添加了1个实例方法，实现了多次执行某任务的功能。\n``` swift\nextension Int {\n    func repetitions(task: () -> ()) {\n        for i in 0..<self {\n            task()\n}}}\n\n3.repetitions({\n    println(\"Hello!\")\n    })\n// Hello!\n// Hello!\n// Hello!\n```\n这个实例方法传入一个无参数无返回值的函数，没有返回值。\n\n扩展的方法可以修改实例本身，使用`mutating`关键字。\n下面的例子添加了一个实现平方计算的方法。\n``` swift\nextension Int {\n    mutating func square() {\n        self = self * self\n    }\n}\nvar someInt = 3\nsomeInt.square()\n// someInt 现在值是 9\n```\n枚举和结构体修改`self`或者属性的方法都必须标注为`mutating`。\n\n## 下标\n下面的例子为`Int`类型添加了1个下标，返回整数的从右数第`index`位上的个位数。\n``` swift\nextension Int {\n    subscript(var digitIndex: Int) -> Int {\n        var decimalBase = 1\n            while digitIndex > 0 {\n                decimalBase *= 10\n                --digitIndex\n            }\n            return (self / decimalBase) % 10\n    }\n}\n746381295[0]\n// returns 5\n746381295[1]\n// returns 9\n746381295[2]\n// returns 2\n746381295[8]\n// returns 7\n```\n\n## 构造器\n扩展只能添加便利构造器，但是不能添加指定构造器和析构函数。\n``` swift\nstruct Size {\n    var width = 0.0, height = 0.0\n}\nstruct Point {\n    var x = 0.0, y = 0.0\n}\nstruct Rect {\n    var origin = Point()\n    var size = Size()\n}\n\nextension Rect {\n    init(center: Point, size: Size) {\n        let originX = center.x - (size.width / 2)\n        let originY = center.y - (size.height / 2)\n        self.init(origin: Point(x: originX, y: originY), size: size)\n    }\n}\n\nlet centerRect = Rect(center: Point(x: 4.0, y: 4.0),\n    size: Size(width: 3.0, height: 3.0))\n// centerRect的原点是 (2.5, 2.5)，大小是 (3.0, 3.0)\n```\n上面的例子为类`Rect`添加了构造器，传入`Point`和`Size`参数，初始化了`Rect`。\n\n## 嵌套类型\n扩展可以向已有的枚举，类和结构体添加新的嵌套类型。\n下面的例子为`Character`添加了新的枚举类型：\n``` swift\nextension Character {\n    enum Kind {\n        case Vowel, Consonant, Other\n    }\n    var kind: Kind {\n        switch String(self).lowercaseString {\n        case \"a\", \"e\", \"i\", \"o\", \"u\":\n            return .Vowel\n        case \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\",\n             \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\":\n            return .Consonant\n        default:\n            return .Other\n        }\n    }\n}\n\nfunc printLetterKinds(word: String) {\n    println(\"'\\(word)' is made up of the following kinds of letters:\")\n    for character in word {\n        switch character.kind {\n        case .Vowel:\n            print(\"vowel \")\n        case .Consonant:\n            print(\"consonant \")\n        case .Other:\n            print(\"other \")\n        }\n    }\n    print(\"\\n\")\n}\nprintLetterKinds(\"Hello\")\n// 'Hello' is made up of the following kinds of letters:\n// consonant vowel consonant consonant vowel\n```\n枚举类型`Kind`表示字母是元音，辅音还是其他类型。\n添加了计算型方法，返回字母对应的`Kind`枚举成员类型。\n\n# 协议\n协议类似于C++/Java语言中的接口，定义要实现的属性方法，但是不实现，由继承的枚举，结构体和类去实现。\n\n## 语法\n``` swift\nprotocol SomeProtocol {\n    // 协议内容\n}\n\nstruct SomeStructure: FirstProtocol, AnotherProtocol {\n    // 结构体内容\n}\n\nclass SomeClass: SomeSuperClass, FirstProtocol, AnotherProtocol {\n    // 类的内容\n}\n```\n结构体`SomeStructure`实现（用`:`表示）协议`someProtocol`和`AnotherProtocol`，多个协议隔开用`,`表示，需要实现协议的所有属性和方法。\n类`SomeClass`实现父类`SomeSuperClass`和两个协议，需要把父类声明写到前面，协议并列写在后面。\n\n- 协议类型\n协议也可以作为一种基本类型，作为函数方法的参数类型、返回值类型，常量变量属性的类型，数组字典等集合的元素类型等等。\n当协议作为集合的元素类型时，遍历集合得到的实例是协议类型，只能访问属于协议中定义的属性方法下标。\n\n## 属性\n协议中声明的属性，可以实现为实例属性或类型属性，存储型属性或计算型属性都可以。\n协议中的只读属性，可以实现为只读属性或读写属性；但是协议中的读写属性，只能实现为读写属性。\n``` swift\nprotocol SomeProtocol {\n    var mustBeSettable : Int { get set }\t//读写属性\n    var doesNotNeedToBeSettable: Int { get }\t//只读属性\n}\n```\n协议中可以定义类型属性，只能实现为类型属性，属性前加上关键字`static`。\n枚举和结构体实现后要在属性前加上关键字`static`，但是类实现后要在属性前加上关键字`class`。\n``` swift\nprotocol AnotherProtocol {\n    static var someTypeProperty: Int { get set }\n}\n```\n下面一个实例。\n``` swift\nprotocol FullyNamed {\n    var fullName: String { get }\n}\n\nstruct Person: FullyNamed{\n    var fullName: String\n}\nlet john = Person(fullName: \"John Appleseed\")\n//john.fullName 为 \"John Appleseed\"\n```\n\n## 方法\n协议中的方法不需要大括号和具体实现，支持变长参数，而不支持参数默认值。\n``` swift\nprotocol RandomNumberGenerator {\n    func random() -> Double\n}\n```\n和类型属性一样，类型方法也是在协议中使用`static`，枚举和结构体中用`static`继承，而类中用`class`继承。\n``` swift\nprotocol SomeProtocol {\n    class func someTypeMethod()\n}\n```\n- 变异方法\n在`func`前加上关键字`mutating`的方法表示在该方法中可以修改实例及其属性的值，称为变异（_mutating_）方法。\n枚举和结构体实现时，需要加上`mutating`关键字；而类实现时，不需要加上`mutating`关键字。\n下面一个实例。\n``` swift\nprotocol Togglable {\n    mutating func toggle()\n}\n\nenum OnOffSwitch: Togglable {\n    case Off, On\n    mutating func toggle() {\n        switch self {\n        case Off:\n            self = On\n        case On:\n            self = Off\n        }\n    }\n}\nvar lightSwitch = OnOffSwitch.Off\nlightSwitch.toggle()\n//lightSwitch 现在的值为 .On\n```\n在`func toggle()`中，修改了`self`的值，属于变异方法。\n\n## 构造器\n协议中的构造器不需要大括号和具体实现。\n类实现协议时，必须给构造器前面加上关键字`required`，表示它的子类必须继承的构造器。\n当然，如果针对`final`类就不需要加`required`了，标有关键字`final`的类表示不能有子类。\n``` swift\nprotocol SomeProtocol {\n    init(someParameter: Int)\n}\n\nclass SomeClass: SomeProtocol {\n    required init(someParameter: Int) {\n        //构造器实现\n    }\n}\n```\n还有一种情况，如果子类重写了父类的指定构造器，需要在构造器前加上`override`，但是如果又要同时实现协议，需要在构造器前加上`required`，那么`required`应该放在`override`前面。\n``` swift\nclass SomeSubClass: SomeSuperClass, SomeProtocol {\n    // \"required\" from SomeProtocol conformance; \"override\" from SomeSuperClass\n    required override init() {\n        // 构造器实现\n    }\n}\n```\n- 可失败构造器\n协议中的可失败构造器可以实现成可失败构造器或非可失败构造器；而协议中的非可失败构造器只能实现成非可失败构造器或隐式解析类型的可失败构造器（`init!`）。\n\n## 适配协议\n扩展可以对已存在的枚举，结构体和类添加成员，比如属性，方法，下标，协议等。\n下面的例子展示了通过扩展为已有类型适配协议。\n``` swift\nprotocol TextRepresentable {\n    func asText() -> String\n}\n\nextension Dice: TextRepresentable {\n    func asText() -> String {\n        return \"A \\(sides)-sided dice\"\n    }\n}\n```\n`Dice`是一个已存在的类型，协议中的`asText`方法被添加实现在了`Dice`中。\n如果`Dice`已经存在了`asText() -> String`方法，可以直接`extension Dice: TextRepresentable {}`，添加实现协议的声明。\n\n## 协议继承\n协议也可以和类一样，继承别的协议。\n``` swift\nprotocol InheritingProtocol: SomeProtocol, AnotherProtocol {\n    // 协议定义\n}\n```\n- 类专属协议\n如果在继承列表中加上`class`，且`class`必须第一个被声明，其他继承协议在后面并列声明，则表示这个协议只能由类实现，枚举和结构体不可以实现。\n``` swift\nprotocol SomeClassOnlyProtocol: class, SomeInheritedProtocol {\n    // class-only protocol definition goes here\n}\n```\n\n## 协议合成\n多个协议可以用protcol<someProtocol, AnotherProtocol>的格式临时组合成一个协议。\n下面一个例子。\n``` swift\nprotocol Named {\n    var name: String { get }\n}\nprotocol Aged {\n    var age: Int { get }\n}\nstruct Person: Named, Aged {\n    var name: String\n    var age: Int\n}\nfunc wishHappyBirthday(celebrator: protocol<Named, Aged>) {\n    println(\"Happy birthday \\(celebrator.name) - you're \\(celebrator.age)!\")\n}\nlet birthdayPerson = Person(name: \"Malcolm\", age: 21)\nwishHappyBirthday(birthdayPerson)\n// 输出 \"Happy birthday Malcolm - you're 21!\n```\n\n## 协议一致性\n用`is`操作符检查协议是否实现了特定协议，返回`true`或`false`。\n用`as?`操作符返回一个可选值，如果协议实现了特定协议，返回协议类型；否则返回`nil`。如果这个协议一定实现了特定协议，可以用`as!`强制返回非可选的特定类型。\n下面一个例子。\n``` swift\nprotocol HasArea {\n    var area: Double { get }\n}\n\nclass Circle: HasArea {\n    let pi = 3.1415927\n    var radius: Double\n    var area: Double { return pi * radius * radius }\n    init(radius: Double) { self.radius = radius }\n}\nclass Country: HasArea {\n    var area: Double\n    init(area: Double) { self.area = area }\n}\nclass Animal {\n    var legs: Int\n    init(legs: Int) { self.legs = legs }\n}\n\nlet objects: [AnyObject] = [\n    Circle(radius: 2.0),\n    Country(area: 243_610),\n    Animal(legs: 4)\n]\n\nfor object in objects {\n    if let objectWithArea = object as? HasArea {\n        println(\"Area is \\(objectWithArea.area)\")\n    } else {\n        println(\"Something that doesn't have an area\")\n    }\n}\n// Area is 12.5663708\n// Area is 243610.0\n// Something that doesn't have an area\n```\n类`Circle`和类`Country`都实现了`HasArea`协议，而类`Animal`没有实现`HasArea`协议。\n这三个类的实例用同一个数组装上，然后遍历，利用协议一致性检查。在这个数组中实例的值的类型没有变，但是这里显式为`HasArea`类型，所以只能访问`area`属性。\n\n## 可选协议\n可选类型可以含有可选成员，可以选择是否实现这些可选成员，用关键字`optional`来表示这些可选成员。可选协议在调用时可以使用可选链。\n协议前的`@objc`表示协议是可选的，也表示暴露给`Objective-C`的代码，只对类有效。所以可选协议只能由类实现。\n下面一个例子。\n``` swift\n@objc protocol CounterDataSource {\n    optional func incrementForCount(count: Int) -> Int\n    optional var fixedIncrement: Int { get }\n}\n\n@objc class Counter {\n    var count = 0\n    var dataSource: CounterDataSource?\n    func increment() {\n        if let amount = dataSource?.incrementForCount?(count) {\n            count += amount\n        } else if let amount = dataSource?.fixedIncrement? {\n            count += amount\n        }\n    }\n}\n\n//为协议实现可选属性\n@objc class ThreeSource: CounterDataSource {\n    let fixedIncrement = 3\n}\nvar counter = Counter()\ncounter.dataSource = ThreeSource()\nfor _ in 1...4 {\n    counter.increment()\n    print(counter.count)\n}\n// 3\n// 6\n// 9\n// 12\n\n//为协议实现可选方法\nclass TowardsZeroSource: CounterDataSource {\nfunc incrementForCount(count: Int) -> Int {\n        if count == 0 {\n            return 0\n        } else if count < 0 {\n            return 1\n        } else {\n            return -1\n        }\n    }\n}\ncounter.count = -4\ncounter.dataSource = TowardsZeroSource()\nfor _ in 1...5 {\n    counter.increment()\n    print(counter.count)\n}\n// -3\n// -2\n// -1\n// 0\n// 0\n```\n\n## 协议扩展\n扩展协议可以为每个实现该协议的地方（_遵循者_）添加属性或方法的实现，该协议的遵循者不用任何修改，可以得到添加的属性方法。\n这种方式可以为协议中的属性和方法提供默认的实现，遵循者中再次实现可以覆盖默认的实现。\n扩展协议时可以限定条件，只有满足条件的遵循者能够得到协议扩展的属性和方法。\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","source":"_posts/swift_11.md","raw":"title: \"Swift基础入门(11)：扩展和协议\"\ndate: 2015-07-24 16:28:22\ntags:\n- swift\ncategories: swift\ntoc: true\n---\n\n本篇介绍Swift的基础知识：扩展（_extensions_）和协议（_protocol_）的语法和实例。\n\n<!--more-->\n**Title: [Swift基础入门(11)：扩展和协议](https://aidaizyy.github.io/swift_11)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-07-27](http://aidaizyy.github.io)**\n\n# 扩展\n扩展可以为枚举，类和结构体：\n- 添加计算型实例属性和计算型类型属性\n- 添加实例方法和类型方法\n- 添加构造器\n- 添加下标\n- 添加新的嵌套类型\n- 已有类型适配协议\n\n## 语法\n声明扩展使用关键字`extension`：\n``` swfit\nextension SomeType {\n    // 新功能\n}\n\nextension SomeType: SomeProtocol, AnotherProtocol {\n    // 已有类型适配的协议实现\n}\n```\n\n## 计算型属性\n扩展只能添加计算型属性，包括实例属性和类型属性，但是不能添加存储属性和属性观察器。\n下面的例子为`Double`类添加了5个计算型实例属性，因为都是只读属性，所以省略了`get`关键字。\n``` swift\nextension Double {\n    var km: Double { return self * 1_000.0 }\n    var m : Double { return self }\n    var cm: Double { return self / 100.0 }\n    var mm: Double { return self / 1_000.0 }\n    var ft: Double { return self / 3.28084 }\n}\nlet oneInch = 25.4.mm\nprintln(\"One inch is \\(oneInch) meters\")\n// 打印输出：\"One inch is 0.0254 meters\"\nlet threeFeet = 3.ft\nprintln(\"Three feet is \\(threeFeet) meters\")\n// 打印输出：\"Three feet is 0.914399970739201 meters\"\n```\n\n## 方法\n下面的例子为`Int`类型添加了1个实例方法，实现了多次执行某任务的功能。\n``` swift\nextension Int {\n    func repetitions(task: () -> ()) {\n        for i in 0..<self {\n            task()\n}}}\n\n3.repetitions({\n    println(\"Hello!\")\n    })\n// Hello!\n// Hello!\n// Hello!\n```\n这个实例方法传入一个无参数无返回值的函数，没有返回值。\n\n扩展的方法可以修改实例本身，使用`mutating`关键字。\n下面的例子添加了一个实现平方计算的方法。\n``` swift\nextension Int {\n    mutating func square() {\n        self = self * self\n    }\n}\nvar someInt = 3\nsomeInt.square()\n// someInt 现在值是 9\n```\n枚举和结构体修改`self`或者属性的方法都必须标注为`mutating`。\n\n## 下标\n下面的例子为`Int`类型添加了1个下标，返回整数的从右数第`index`位上的个位数。\n``` swift\nextension Int {\n    subscript(var digitIndex: Int) -> Int {\n        var decimalBase = 1\n            while digitIndex > 0 {\n                decimalBase *= 10\n                --digitIndex\n            }\n            return (self / decimalBase) % 10\n    }\n}\n746381295[0]\n// returns 5\n746381295[1]\n// returns 9\n746381295[2]\n// returns 2\n746381295[8]\n// returns 7\n```\n\n## 构造器\n扩展只能添加便利构造器，但是不能添加指定构造器和析构函数。\n``` swift\nstruct Size {\n    var width = 0.0, height = 0.0\n}\nstruct Point {\n    var x = 0.0, y = 0.0\n}\nstruct Rect {\n    var origin = Point()\n    var size = Size()\n}\n\nextension Rect {\n    init(center: Point, size: Size) {\n        let originX = center.x - (size.width / 2)\n        let originY = center.y - (size.height / 2)\n        self.init(origin: Point(x: originX, y: originY), size: size)\n    }\n}\n\nlet centerRect = Rect(center: Point(x: 4.0, y: 4.0),\n    size: Size(width: 3.0, height: 3.0))\n// centerRect的原点是 (2.5, 2.5)，大小是 (3.0, 3.0)\n```\n上面的例子为类`Rect`添加了构造器，传入`Point`和`Size`参数，初始化了`Rect`。\n\n## 嵌套类型\n扩展可以向已有的枚举，类和结构体添加新的嵌套类型。\n下面的例子为`Character`添加了新的枚举类型：\n``` swift\nextension Character {\n    enum Kind {\n        case Vowel, Consonant, Other\n    }\n    var kind: Kind {\n        switch String(self).lowercaseString {\n        case \"a\", \"e\", \"i\", \"o\", \"u\":\n            return .Vowel\n        case \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\",\n             \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\":\n            return .Consonant\n        default:\n            return .Other\n        }\n    }\n}\n\nfunc printLetterKinds(word: String) {\n    println(\"'\\(word)' is made up of the following kinds of letters:\")\n    for character in word {\n        switch character.kind {\n        case .Vowel:\n            print(\"vowel \")\n        case .Consonant:\n            print(\"consonant \")\n        case .Other:\n            print(\"other \")\n        }\n    }\n    print(\"\\n\")\n}\nprintLetterKinds(\"Hello\")\n// 'Hello' is made up of the following kinds of letters:\n// consonant vowel consonant consonant vowel\n```\n枚举类型`Kind`表示字母是元音，辅音还是其他类型。\n添加了计算型方法，返回字母对应的`Kind`枚举成员类型。\n\n# 协议\n协议类似于C++/Java语言中的接口，定义要实现的属性方法，但是不实现，由继承的枚举，结构体和类去实现。\n\n## 语法\n``` swift\nprotocol SomeProtocol {\n    // 协议内容\n}\n\nstruct SomeStructure: FirstProtocol, AnotherProtocol {\n    // 结构体内容\n}\n\nclass SomeClass: SomeSuperClass, FirstProtocol, AnotherProtocol {\n    // 类的内容\n}\n```\n结构体`SomeStructure`实现（用`:`表示）协议`someProtocol`和`AnotherProtocol`，多个协议隔开用`,`表示，需要实现协议的所有属性和方法。\n类`SomeClass`实现父类`SomeSuperClass`和两个协议，需要把父类声明写到前面，协议并列写在后面。\n\n- 协议类型\n协议也可以作为一种基本类型，作为函数方法的参数类型、返回值类型，常量变量属性的类型，数组字典等集合的元素类型等等。\n当协议作为集合的元素类型时，遍历集合得到的实例是协议类型，只能访问属于协议中定义的属性方法下标。\n\n## 属性\n协议中声明的属性，可以实现为实例属性或类型属性，存储型属性或计算型属性都可以。\n协议中的只读属性，可以实现为只读属性或读写属性；但是协议中的读写属性，只能实现为读写属性。\n``` swift\nprotocol SomeProtocol {\n    var mustBeSettable : Int { get set }\t//读写属性\n    var doesNotNeedToBeSettable: Int { get }\t//只读属性\n}\n```\n协议中可以定义类型属性，只能实现为类型属性，属性前加上关键字`static`。\n枚举和结构体实现后要在属性前加上关键字`static`，但是类实现后要在属性前加上关键字`class`。\n``` swift\nprotocol AnotherProtocol {\n    static var someTypeProperty: Int { get set }\n}\n```\n下面一个实例。\n``` swift\nprotocol FullyNamed {\n    var fullName: String { get }\n}\n\nstruct Person: FullyNamed{\n    var fullName: String\n}\nlet john = Person(fullName: \"John Appleseed\")\n//john.fullName 为 \"John Appleseed\"\n```\n\n## 方法\n协议中的方法不需要大括号和具体实现，支持变长参数，而不支持参数默认值。\n``` swift\nprotocol RandomNumberGenerator {\n    func random() -> Double\n}\n```\n和类型属性一样，类型方法也是在协议中使用`static`，枚举和结构体中用`static`继承，而类中用`class`继承。\n``` swift\nprotocol SomeProtocol {\n    class func someTypeMethod()\n}\n```\n- 变异方法\n在`func`前加上关键字`mutating`的方法表示在该方法中可以修改实例及其属性的值，称为变异（_mutating_）方法。\n枚举和结构体实现时，需要加上`mutating`关键字；而类实现时，不需要加上`mutating`关键字。\n下面一个实例。\n``` swift\nprotocol Togglable {\n    mutating func toggle()\n}\n\nenum OnOffSwitch: Togglable {\n    case Off, On\n    mutating func toggle() {\n        switch self {\n        case Off:\n            self = On\n        case On:\n            self = Off\n        }\n    }\n}\nvar lightSwitch = OnOffSwitch.Off\nlightSwitch.toggle()\n//lightSwitch 现在的值为 .On\n```\n在`func toggle()`中，修改了`self`的值，属于变异方法。\n\n## 构造器\n协议中的构造器不需要大括号和具体实现。\n类实现协议时，必须给构造器前面加上关键字`required`，表示它的子类必须继承的构造器。\n当然，如果针对`final`类就不需要加`required`了，标有关键字`final`的类表示不能有子类。\n``` swift\nprotocol SomeProtocol {\n    init(someParameter: Int)\n}\n\nclass SomeClass: SomeProtocol {\n    required init(someParameter: Int) {\n        //构造器实现\n    }\n}\n```\n还有一种情况，如果子类重写了父类的指定构造器，需要在构造器前加上`override`，但是如果又要同时实现协议，需要在构造器前加上`required`，那么`required`应该放在`override`前面。\n``` swift\nclass SomeSubClass: SomeSuperClass, SomeProtocol {\n    // \"required\" from SomeProtocol conformance; \"override\" from SomeSuperClass\n    required override init() {\n        // 构造器实现\n    }\n}\n```\n- 可失败构造器\n协议中的可失败构造器可以实现成可失败构造器或非可失败构造器；而协议中的非可失败构造器只能实现成非可失败构造器或隐式解析类型的可失败构造器（`init!`）。\n\n## 适配协议\n扩展可以对已存在的枚举，结构体和类添加成员，比如属性，方法，下标，协议等。\n下面的例子展示了通过扩展为已有类型适配协议。\n``` swift\nprotocol TextRepresentable {\n    func asText() -> String\n}\n\nextension Dice: TextRepresentable {\n    func asText() -> String {\n        return \"A \\(sides)-sided dice\"\n    }\n}\n```\n`Dice`是一个已存在的类型，协议中的`asText`方法被添加实现在了`Dice`中。\n如果`Dice`已经存在了`asText() -> String`方法，可以直接`extension Dice: TextRepresentable {}`，添加实现协议的声明。\n\n## 协议继承\n协议也可以和类一样，继承别的协议。\n``` swift\nprotocol InheritingProtocol: SomeProtocol, AnotherProtocol {\n    // 协议定义\n}\n```\n- 类专属协议\n如果在继承列表中加上`class`，且`class`必须第一个被声明，其他继承协议在后面并列声明，则表示这个协议只能由类实现，枚举和结构体不可以实现。\n``` swift\nprotocol SomeClassOnlyProtocol: class, SomeInheritedProtocol {\n    // class-only protocol definition goes here\n}\n```\n\n## 协议合成\n多个协议可以用protcol<someProtocol, AnotherProtocol>的格式临时组合成一个协议。\n下面一个例子。\n``` swift\nprotocol Named {\n    var name: String { get }\n}\nprotocol Aged {\n    var age: Int { get }\n}\nstruct Person: Named, Aged {\n    var name: String\n    var age: Int\n}\nfunc wishHappyBirthday(celebrator: protocol<Named, Aged>) {\n    println(\"Happy birthday \\(celebrator.name) - you're \\(celebrator.age)!\")\n}\nlet birthdayPerson = Person(name: \"Malcolm\", age: 21)\nwishHappyBirthday(birthdayPerson)\n// 输出 \"Happy birthday Malcolm - you're 21!\n```\n\n## 协议一致性\n用`is`操作符检查协议是否实现了特定协议，返回`true`或`false`。\n用`as?`操作符返回一个可选值，如果协议实现了特定协议，返回协议类型；否则返回`nil`。如果这个协议一定实现了特定协议，可以用`as!`强制返回非可选的特定类型。\n下面一个例子。\n``` swift\nprotocol HasArea {\n    var area: Double { get }\n}\n\nclass Circle: HasArea {\n    let pi = 3.1415927\n    var radius: Double\n    var area: Double { return pi * radius * radius }\n    init(radius: Double) { self.radius = radius }\n}\nclass Country: HasArea {\n    var area: Double\n    init(area: Double) { self.area = area }\n}\nclass Animal {\n    var legs: Int\n    init(legs: Int) { self.legs = legs }\n}\n\nlet objects: [AnyObject] = [\n    Circle(radius: 2.0),\n    Country(area: 243_610),\n    Animal(legs: 4)\n]\n\nfor object in objects {\n    if let objectWithArea = object as? HasArea {\n        println(\"Area is \\(objectWithArea.area)\")\n    } else {\n        println(\"Something that doesn't have an area\")\n    }\n}\n// Area is 12.5663708\n// Area is 243610.0\n// Something that doesn't have an area\n```\n类`Circle`和类`Country`都实现了`HasArea`协议，而类`Animal`没有实现`HasArea`协议。\n这三个类的实例用同一个数组装上，然后遍历，利用协议一致性检查。在这个数组中实例的值的类型没有变，但是这里显式为`HasArea`类型，所以只能访问`area`属性。\n\n## 可选协议\n可选类型可以含有可选成员，可以选择是否实现这些可选成员，用关键字`optional`来表示这些可选成员。可选协议在调用时可以使用可选链。\n协议前的`@objc`表示协议是可选的，也表示暴露给`Objective-C`的代码，只对类有效。所以可选协议只能由类实现。\n下面一个例子。\n``` swift\n@objc protocol CounterDataSource {\n    optional func incrementForCount(count: Int) -> Int\n    optional var fixedIncrement: Int { get }\n}\n\n@objc class Counter {\n    var count = 0\n    var dataSource: CounterDataSource?\n    func increment() {\n        if let amount = dataSource?.incrementForCount?(count) {\n            count += amount\n        } else if let amount = dataSource?.fixedIncrement? {\n            count += amount\n        }\n    }\n}\n\n//为协议实现可选属性\n@objc class ThreeSource: CounterDataSource {\n    let fixedIncrement = 3\n}\nvar counter = Counter()\ncounter.dataSource = ThreeSource()\nfor _ in 1...4 {\n    counter.increment()\n    print(counter.count)\n}\n// 3\n// 6\n// 9\n// 12\n\n//为协议实现可选方法\nclass TowardsZeroSource: CounterDataSource {\nfunc incrementForCount(count: Int) -> Int {\n        if count == 0 {\n            return 0\n        } else if count < 0 {\n            return 1\n        } else {\n            return -1\n        }\n    }\n}\ncounter.count = -4\ncounter.dataSource = TowardsZeroSource()\nfor _ in 1...5 {\n    counter.increment()\n    print(counter.count)\n}\n// -3\n// -2\n// -1\n// 0\n// 0\n```\n\n## 协议扩展\n扩展协议可以为每个实现该协议的地方（_遵循者_）添加属性或方法的实现，该协议的遵循者不用任何修改，可以得到添加的属性方法。\n这种方式可以为协议中的属性和方法提供默认的实现，遵循者中再次实现可以覆盖默认的实现。\n扩展协议时可以限定条件，只有满足条件的遵循者能够得到协议扩展的属性和方法。\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","slug":"swift_11","published":1,"updated":"2017-05-08T16:40:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2gdu6kc000vv1o31qpbjwg5","content":"<p>本篇介绍Swift的基础知识：扩展（<em>extensions</em>）和协议（<em>protocol</em>）的语法和实例。</p>\n<a id=\"more\"></a>\n<p><strong>Title: <a href=\"https://aidaizyy.github.io/swift_11\" target=\"_blank\" rel=\"external\">Swift基础入门(11)：扩展和协议</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#109;&#97;&#105;&#x6c;&#116;&#111;&#58;&#x61;&#x69;&#x64;&#97;&#x69;&#x7a;&#121;&#x79;&#64;&#103;&#x6d;&#97;&#x69;&#108;&#x2e;&#99;&#x6f;&#109;\">&#x61;&#x69;&#x64;&#97;&#x69;&#x7a;&#121;&#x79;&#64;&#103;&#x6d;&#97;&#x69;&#108;&#x2e;&#99;&#x6f;&#109;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-07-27</a></strong></p>\n<h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><p>扩展可以为枚举，类和结构体：</p>\n<ul>\n<li>添加计算型实例属性和计算型类型属性</li>\n<li>添加实例方法和类型方法</li>\n<li>添加构造器</li>\n<li>添加下标</li>\n<li>添加新的嵌套类型</li>\n<li>已有类型适配协议</li>\n</ul>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>声明扩展使用关键字<code>extension</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">extension SomeType &#123;</div><div class=\"line\">    // 新功能</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">extension SomeType: SomeProtocol, AnotherProtocol &#123;</div><div class=\"line\">    // 已有类型适配的协议实现</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"计算型属性\"><a href=\"#计算型属性\" class=\"headerlink\" title=\"计算型属性\"></a>计算型属性</h2><p>扩展只能添加计算型属性，包括实例属性和类型属性，但是不能添加存储属性和属性观察器。<br>下面的例子为<code>Double</code>类添加了5个计算型实例属性，因为都是只读属性，所以省略了<code>get</code>关键字。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Double</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> km: <span class=\"type\">Double</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">self</span> * <span class=\"number\">1_000.0</span> &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> m : <span class=\"type\">Double</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">self</span> &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> cm: <span class=\"type\">Double</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">self</span> / <span class=\"number\">100.0</span> &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> mm: <span class=\"type\">Double</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">self</span> / <span class=\"number\">1_000.0</span> &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> ft: <span class=\"type\">Double</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">self</span> / <span class=\"number\">3.28084</span> &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> oneInch = <span class=\"number\">25.4</span>.mm</div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"One inch is \\(oneInch) meters\"</span>)</div><div class=\"line\"><span class=\"comment\">// 打印输出：\"One inch is 0.0254 meters\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> threeFeet = <span class=\"number\">3</span>.ft</div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"Three feet is \\(threeFeet) meters\"</span>)</div><div class=\"line\"><span class=\"comment\">// 打印输出：\"Three feet is 0.914399970739201 meters\"</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>下面的例子为<code>Int</code>类型添加了1个实例方法，实现了多次执行某任务的功能。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Int</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">repetitions</span><span class=\"params\">(task: <span class=\"params\">()</span></span></span> -&gt; ()) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span>..&lt;<span class=\"keyword\">self</span> &#123;</div><div class=\"line\">            task()</div><div class=\"line\">&#125;&#125;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">3</span>.repetitions(&#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Hello!\"</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\"><span class=\"comment\">// Hello!</span></div><div class=\"line\"><span class=\"comment\">// Hello!</span></div><div class=\"line\"><span class=\"comment\">// Hello!</span></div></pre></td></tr></table></figure></p>\n<p>这个实例方法传入一个无参数无返回值的函数，没有返回值。</p>\n<p>扩展的方法可以修改实例本身，使用<code>mutating</code>关键字。<br>下面的例子添加了一个实现平方计算的方法。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Int</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">square</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span> = <span class=\"keyword\">self</span> * <span class=\"keyword\">self</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> someInt = <span class=\"number\">3</span></div><div class=\"line\">someInt.square()</div><div class=\"line\"><span class=\"comment\">// someInt 现在值是 9</span></div></pre></td></tr></table></figure></p>\n<p>枚举和结构体修改<code>self</code>或者属性的方法都必须标注为<code>mutating</code>。</p>\n<h2 id=\"下标\"><a href=\"#下标\" class=\"headerlink\" title=\"下标\"></a>下标</h2><p>下面的例子为<code>Int</code>类型添加了1个下标，返回整数的从右数第<code>index</code>位上的个位数。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Int</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">subscript</span>(<span class=\"keyword\">var</span> digitIndex: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> decimalBase = <span class=\"number\">1</span></div><div class=\"line\">            <span class=\"keyword\">while</span> digitIndex &gt; <span class=\"number\">0</span> &#123;</div><div class=\"line\">                decimalBase *= <span class=\"number\">10</span></div><div class=\"line\">                --digitIndex</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">self</span> / decimalBase) % <span class=\"number\">10</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"number\">746381295</span>[<span class=\"number\">0</span>]</div><div class=\"line\"><span class=\"comment\">// returns 5</span></div><div class=\"line\"><span class=\"number\">746381295</span>[<span class=\"number\">1</span>]</div><div class=\"line\"><span class=\"comment\">// returns 9</span></div><div class=\"line\"><span class=\"number\">746381295</span>[<span class=\"number\">2</span>]</div><div class=\"line\"><span class=\"comment\">// returns 2</span></div><div class=\"line\"><span class=\"number\">746381295</span>[<span class=\"number\">8</span>]</div><div class=\"line\"><span class=\"comment\">// returns 7</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h2><p>扩展只能添加便利构造器，但是不能添加指定构造器和析构函数。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Size</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> width = <span class=\"number\">0.0</span>, height = <span class=\"number\">0.0</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">0.0</span>, y = <span class=\"number\">0.0</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Rect</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> origin = <span class=\"type\">Point</span>()</div><div class=\"line\">    <span class=\"keyword\">var</span> size = <span class=\"type\">Size</span>()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Rect</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">init</span>(center: <span class=\"type\">Point</span>, size: <span class=\"type\">Size</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> originX = center.x - (size.width / <span class=\"number\">2</span>)</div><div class=\"line\">        <span class=\"keyword\">let</span> originY = center.y - (size.height / <span class=\"number\">2</span>)</div><div class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(origin: <span class=\"type\">Point</span>(x: originX, y: originY), size: size)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> centerRect = <span class=\"type\">Rect</span>(center: <span class=\"type\">Point</span>(x: <span class=\"number\">4.0</span>, y: <span class=\"number\">4.0</span>),</div><div class=\"line\">    size: <span class=\"type\">Size</span>(width: <span class=\"number\">3.0</span>, height: <span class=\"number\">3.0</span>))</div><div class=\"line\"><span class=\"comment\">// centerRect的原点是 (2.5, 2.5)，大小是 (3.0, 3.0)</span></div></pre></td></tr></table></figure></p>\n<p>上面的例子为类<code>Rect</code>添加了构造器，传入<code>Point</code>和<code>Size</code>参数，初始化了<code>Rect</code>。</p>\n<h2 id=\"嵌套类型\"><a href=\"#嵌套类型\" class=\"headerlink\" title=\"嵌套类型\"></a>嵌套类型</h2><p>扩展可以向已有的枚举，类和结构体添加新的嵌套类型。<br>下面的例子为<code>Character</code>添加了新的枚举类型：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Character</span> </span>&#123;</div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Kind</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"type\">Vowel</span>, <span class=\"type\">Consonant</span>, <span class=\"type\">Other</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> kind: <span class=\"type\">Kind</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> <span class=\"type\">String</span>(<span class=\"keyword\">self</span>).lowercaseString &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"a\"</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"i\"</span>, <span class=\"string\">\"o\"</span>, <span class=\"string\">\"u\"</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> .<span class=\"type\">Vowel</span></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"f\"</span>, <span class=\"string\">\"g\"</span>, <span class=\"string\">\"h\"</span>, <span class=\"string\">\"j\"</span>, <span class=\"string\">\"k\"</span>, <span class=\"string\">\"l\"</span>, <span class=\"string\">\"m\"</span>,</div><div class=\"line\">             <span class=\"string\">\"n\"</span>, <span class=\"string\">\"p\"</span>, <span class=\"string\">\"q\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"string\">\"s\"</span>, <span class=\"string\">\"t\"</span>, <span class=\"string\">\"v\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"string\">\"x\"</span>, <span class=\"string\">\"y\"</span>, <span class=\"string\">\"z\"</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> .<span class=\"type\">Consonant</span></div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> .<span class=\"type\">Other</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printLetterKinds</span><span class=\"params\">(word: String)</span></span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"'\\(word)' is made up of the following kinds of letters:\"</span>)</div><div class=\"line\">    <span class=\"keyword\">for</span> character <span class=\"keyword\">in</span> word &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> character.kind &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> .<span class=\"type\">Vowel</span>:</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"vowel \"</span>)</div><div class=\"line\">        <span class=\"keyword\">case</span> .<span class=\"type\">Consonant</span>:</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"consonant \"</span>)</div><div class=\"line\">        <span class=\"keyword\">case</span> .<span class=\"type\">Other</span>:</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"other \"</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\n\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">printLetterKinds(<span class=\"string\">\"Hello\"</span>)</div><div class=\"line\"><span class=\"comment\">// 'Hello' is made up of the following kinds of letters:</span></div><div class=\"line\"><span class=\"comment\">// consonant vowel consonant consonant vowel</span></div></pre></td></tr></table></figure></p>\n<p>枚举类型<code>Kind</code>表示字母是元音，辅音还是其他类型。<br>添加了计算型方法，返回字母对应的<code>Kind</code>枚举成员类型。</p>\n<h1 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h1><p>协议类似于C++/Java语言中的接口，定义要实现的属性方法，但是不实现，由继承的枚举，结构体和类去实现。</p>\n<h2 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">SomeProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 协议内容</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SomeStructure</span>: <span class=\"title\">FirstProtocol</span>, <span class=\"title\">AnotherProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 结构体内容</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span>: <span class=\"title\">SomeSuperClass</span>, <span class=\"title\">FirstProtocol</span>, <span class=\"title\">AnotherProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 类的内容</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>结构体<code>SomeStructure</code>实现（用<code>:</code>表示）协议<code>someProtocol</code>和<code>AnotherProtocol</code>，多个协议隔开用<code>,</code>表示，需要实现协议的所有属性和方法。<br>类<code>SomeClass</code>实现父类<code>SomeSuperClass</code>和两个协议，需要把父类声明写到前面，协议并列写在后面。</p>\n<ul>\n<li>协议类型<br>协议也可以作为一种基本类型，作为函数方法的参数类型、返回值类型，常量变量属性的类型，数组字典等集合的元素类型等等。<br>当协议作为集合的元素类型时，遍历集合得到的实例是协议类型，只能访问属于协议中定义的属性方法下标。</li>\n</ul>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><p>协议中声明的属性，可以实现为实例属性或类型属性，存储型属性或计算型属性都可以。<br>协议中的只读属性，可以实现为只读属性或读写属性；但是协议中的读写属性，只能实现为读写属性。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">SomeProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> mustBeSettable : <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;\t<span class=\"comment\">//读写属性</span></div><div class=\"line\">    <span class=\"keyword\">var</span> doesNotNeedToBeSettable: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> &#125;\t<span class=\"comment\">//只读属性</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>协议中可以定义类型属性，只能实现为类型属性，属性前加上关键字<code>static</code>。<br>枚举和结构体实现后要在属性前加上关键字<code>static</code>，但是类实现后要在属性前加上关键字<code>class</code>。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">AnotherProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> someTypeProperty: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面一个实例。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">FullyNamed</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> fullName: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person</span>: <span class=\"title\">FullyNamed</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> fullName: <span class=\"type\">String</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> john = <span class=\"type\">Person</span>(fullName: <span class=\"string\">\"John Appleseed\"</span>)</div><div class=\"line\"><span class=\"comment\">//john.fullName 为 \"John Appleseed\"</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"方法-1\"><a href=\"#方法-1\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>协议中的方法不需要大括号和具体实现，支持变长参数，而不支持参数默认值。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">RandomNumberGenerator</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">random</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Double</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>和类型属性一样，类型方法也是在协议中使用<code>static</code>，枚举和结构体中用<code>static</code>继承，而类中用<code>class</code>继承。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">SomeProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">func</span> <span class=\"title\">someTypeMethod</span>()</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>变异方法<br>在<code>func</code>前加上关键字<code>mutating</code>的方法表示在该方法中可以修改实例及其属性的值，称为变异（<em>mutating</em>）方法。<br>枚举和结构体实现时，需要加上<code>mutating</code>关键字；而类实现时，不需要加上<code>mutating</code>关键字。<br>下面一个实例。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Togglable</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">toggle</span><span class=\"params\">()</span></span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">OnOffSwitch</span>: <span class=\"title\">Togglable</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Off</span>, <span class=\"type\">On</span></div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">toggle</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"type\">Off</span>:</div><div class=\"line\">            <span class=\"keyword\">self</span> = <span class=\"type\">On</span></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"type\">On</span>:</div><div class=\"line\">            <span class=\"keyword\">self</span> = <span class=\"type\">Off</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> lightSwitch = <span class=\"type\">OnOffSwitch</span>.<span class=\"type\">Off</span></div><div class=\"line\">lightSwitch.toggle()</div><div class=\"line\"><span class=\"comment\">//lightSwitch 现在的值为 .On</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>在<code>func toggle()</code>中，修改了<code>self</code>的值，属于变异方法。</p>\n<h2 id=\"构造器-1\"><a href=\"#构造器-1\" class=\"headerlink\" title=\"构造器\"></a>构造器</h2><p>协议中的构造器不需要大括号和具体实现。<br>类实现协议时，必须给构造器前面加上关键字<code>required</code>，表示它的子类必须继承的构造器。<br>当然，如果针对<code>final</code>类就不需要加<code>required</code>了，标有关键字<code>final</code>的类表示不能有子类。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">SomeProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">init</span>(someParameter: <span class=\"type\">Int</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span>: <span class=\"title\">SomeProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">init</span>(someParameter: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//构造器实现</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>还有一种情况，如果子类重写了父类的指定构造器，需要在构造器前加上<code>override</code>，但是如果又要同时实现协议，需要在构造器前加上<code>required</code>，那么<code>required</code>应该放在<code>override</code>前面。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeSubClass</span>: <span class=\"title\">SomeSuperClass</span>, <span class=\"title\">SomeProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// \"required\" from SomeProtocol conformance; \"override\" from SomeSuperClass</span></div><div class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">override</span> <span class=\"keyword\">init</span>() &#123;</div><div class=\"line\">        <span class=\"comment\">// 构造器实现</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>可失败构造器<br>协议中的可失败构造器可以实现成可失败构造器或非可失败构造器；而协议中的非可失败构造器只能实现成非可失败构造器或隐式解析类型的可失败构造器（<code>init!</code>）。</li>\n</ul>\n<h2 id=\"适配协议\"><a href=\"#适配协议\" class=\"headerlink\" title=\"适配协议\"></a>适配协议</h2><p>扩展可以对已存在的枚举，结构体和类添加成员，比如属性，方法，下标，协议等。<br>下面的例子展示了通过扩展为已有类型适配协议。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">TextRepresentable</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">asText</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Dice</span>: <span class=\"title\">TextRepresentable</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">asText</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"A \\(sides)-sided dice\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>Dice</code>是一个已存在的类型，协议中的<code>asText</code>方法被添加实现在了<code>Dice</code>中。<br>如果<code>Dice</code>已经存在了<code>asText() -&gt; String</code>方法，可以直接<code>extension Dice: TextRepresentable {}</code>，添加实现协议的声明。</p>\n<h2 id=\"协议继承\"><a href=\"#协议继承\" class=\"headerlink\" title=\"协议继承\"></a>协议继承</h2><p>协议也可以和类一样，继承别的协议。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">InheritingProtocol</span>: <span class=\"title\">SomeProtocol</span>, <span class=\"title\">AnotherProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 协议定义</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>类专属协议<br>如果在继承列表中加上<code>class</code>，且<code>class</code>必须第一个被声明，其他继承协议在后面并列声明，则表示这个协议只能由类实现，枚举和结构体不可以实现。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">SomeClassOnlyProtocol</span>: <span class=\"title\">class</span>, <span class=\"title\">SomeInheritedProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// class-only protocol definition goes here</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"协议合成\"><a href=\"#协议合成\" class=\"headerlink\" title=\"协议合成\"></a>协议合成</h2><p>多个协议可以用protcol<someprotocol, anotherprotocol=\"\">的格式临时组合成一个协议。<br>下面一个例子。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Named</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Aged</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person</span>: <span class=\"title\">Named</span>, <span class=\"title\">Aged</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">wishHappyBirthday</span><span class=\"params\">(celebrator: <span class=\"keyword\">protocol</span>&lt;Named, Aged&gt;)</span></span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Happy birthday \\(celebrator.name) - you're \\(celebrator.age)!\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> birthdayPerson = <span class=\"type\">Person</span>(name: <span class=\"string\">\"Malcolm\"</span>, age: <span class=\"number\">21</span>)</div><div class=\"line\">wishHappyBirthday(birthdayPerson)</div><div class=\"line\"><span class=\"comment\">// 输出 \"Happy birthday Malcolm - you're 21!</span></div></pre></td></tr></table></figure></someprotocol,></p>\n<h2 id=\"协议一致性\"><a href=\"#协议一致性\" class=\"headerlink\" title=\"协议一致性\"></a>协议一致性</h2><p>用<code>is</code>操作符检查协议是否实现了特定协议，返回<code>true</code>或<code>false</code>。<br>用<code>as?</code>操作符返回一个可选值，如果协议实现了特定协议，返回协议类型；否则返回<code>nil</code>。如果这个协议一定实现了特定协议，可以用<code>as!</code>强制返回非可选的特定类型。<br>下面一个例子。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">HasArea</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> area: <span class=\"type\">Double</span> &#123; <span class=\"keyword\">get</span> &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span>: <span class=\"title\">HasArea</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> pi = <span class=\"number\">3.1415927</span></div><div class=\"line\">    <span class=\"keyword\">var</span> radius: <span class=\"type\">Double</span></div><div class=\"line\">    <span class=\"keyword\">var</span> area: <span class=\"type\">Double</span> &#123; <span class=\"keyword\">return</span> pi * radius * radius &#125;</div><div class=\"line\">    <span class=\"keyword\">init</span>(radius: <span class=\"type\">Double</span>) &#123; <span class=\"keyword\">self</span>.radius = radius &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Country</span>: <span class=\"title\">HasArea</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> area: <span class=\"type\">Double</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(area: <span class=\"type\">Double</span>) &#123; <span class=\"keyword\">self</span>.area = area &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> legs: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(legs: <span class=\"type\">Int</span>) &#123; <span class=\"keyword\">self</span>.legs = legs &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> objects: [<span class=\"type\">AnyObject</span>] = [</div><div class=\"line\">    <span class=\"type\">Circle</span>(radius: <span class=\"number\">2.0</span>),</div><div class=\"line\">    <span class=\"type\">Country</span>(area: <span class=\"number\">243_610</span>),</div><div class=\"line\">    <span class=\"type\">Animal</span>(legs: <span class=\"number\">4</span>)</div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> object <span class=\"keyword\">in</span> objects &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> objectWithArea = object <span class=\"keyword\">as</span>? <span class=\"type\">HasArea</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">println</span>(<span class=\"string\">\"Area is \\(objectWithArea.area)\"</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">println</span>(<span class=\"string\">\"Something that doesn't have an area\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Area is 12.5663708</span></div><div class=\"line\"><span class=\"comment\">// Area is 243610.0</span></div><div class=\"line\"><span class=\"comment\">// Something that doesn't have an area</span></div></pre></td></tr></table></figure></p>\n<p>类<code>Circle</code>和类<code>Country</code>都实现了<code>HasArea</code>协议，而类<code>Animal</code>没有实现<code>HasArea</code>协议。<br>这三个类的实例用同一个数组装上，然后遍历，利用协议一致性检查。在这个数组中实例的值的类型没有变，但是这里显式为<code>HasArea</code>类型，所以只能访问<code>area</code>属性。</p>\n<h2 id=\"可选协议\"><a href=\"#可选协议\" class=\"headerlink\" title=\"可选协议\"></a>可选协议</h2><p>可选类型可以含有可选成员，可以选择是否实现这些可选成员，用关键字<code>optional</code>来表示这些可选成员。可选协议在调用时可以使用可选链。<br>协议前的<code>@objc</code>表示协议是可选的，也表示暴露给<code>Objective-C</code>的代码，只对类有效。所以可选协议只能由类实现。<br>下面一个例子。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@objc</span> <span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">CounterDataSource</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">optional</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">incrementForCount</span><span class=\"params\">(<span class=\"built_in\">count</span>: Int)</span></span> -&gt; <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">optional</span> <span class=\"keyword\">var</span> fixedIncrement: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@objc</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">count</span> = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">var</span> dataSource: <span class=\"type\">CounterDataSource</span>?</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">increment</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> amount = dataSource?.incrementForCount?(<span class=\"built_in\">count</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">count</span> += amount</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> amount = dataSource?.fixedIncrement? &#123;</div><div class=\"line\">            <span class=\"built_in\">count</span> += amount</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//为协议实现可选属性</span></div><div class=\"line\"><span class=\"meta\">@objc</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreeSource</span>: <span class=\"title\">CounterDataSource</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> fixedIncrement = <span class=\"number\">3</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> counter = <span class=\"type\">Counter</span>()</div><div class=\"line\">counter.dataSource = <span class=\"type\">ThreeSource</span>()</div><div class=\"line\"><span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span>...<span class=\"number\">4</span> &#123;</div><div class=\"line\">    counter.increment()</div><div class=\"line\">    <span class=\"built_in\">print</span>(counter.<span class=\"built_in\">count</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 3</span></div><div class=\"line\"><span class=\"comment\">// 6</span></div><div class=\"line\"><span class=\"comment\">// 9</span></div><div class=\"line\"><span class=\"comment\">// 12</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//为协议实现可选方法</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TowardsZeroSource</span>: <span class=\"title\">CounterDataSource</span> </span>&#123;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">incrementForCount</span><span class=\"params\">(<span class=\"built_in\">count</span>: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">count</span> == <span class=\"number\">0</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"built_in\">count</span> &lt; <span class=\"number\">0</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">counter.<span class=\"built_in\">count</span> = -<span class=\"number\">4</span></div><div class=\"line\">counter.dataSource = <span class=\"type\">TowardsZeroSource</span>()</div><div class=\"line\"><span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span>...<span class=\"number\">5</span> &#123;</div><div class=\"line\">    counter.increment()</div><div class=\"line\">    <span class=\"built_in\">print</span>(counter.<span class=\"built_in\">count</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// -3</span></div><div class=\"line\"><span class=\"comment\">// -2</span></div><div class=\"line\"><span class=\"comment\">// -1</span></div><div class=\"line\"><span class=\"comment\">// 0</span></div><div class=\"line\"><span class=\"comment\">// 0</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"协议扩展\"><a href=\"#协议扩展\" class=\"headerlink\" title=\"协议扩展\"></a>协议扩展</h2><p>扩展协议可以为每个实现该协议的地方（<em>遵循者</em>）添加属性或方法的实现，该协议的遵循者不用任何修改，可以得到添加的属性方法。<br>这种方式可以为协议中的属性和方法提供默认的实现，遵循者中再次实现可以覆盖默认的实现。<br>扩展协议时可以限定条件，只有满足条件的遵循者能够得到协议扩展的属性和方法。</p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>本篇介绍Swift的基础知识：扩展（<em>extensions</em>）和协议（<em>protocol</em>）的语法和实例。</p>","more":"<p><strong>Title: <a href=\"https://aidaizyy.github.io/swift_11\" target=\"_blank\" rel=\"external\">Swift基础入门(11)：扩展和协议</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#109;&#97;&#105;&#x6c;&#116;&#111;&#58;&#x61;&#x69;&#x64;&#97;&#x69;&#x7a;&#121;&#x79;&#64;&#103;&#x6d;&#97;&#x69;&#108;&#x2e;&#99;&#x6f;&#109;\">&#x61;&#x69;&#x64;&#97;&#x69;&#x7a;&#121;&#x79;&#64;&#103;&#x6d;&#97;&#x69;&#108;&#x2e;&#99;&#x6f;&#109;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-07-27</a></strong></p>\n<h1 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h1><p>扩展可以为枚举，类和结构体：</p>\n<ul>\n<li>添加计算型实例属性和计算型类型属性</li>\n<li>添加实例方法和类型方法</li>\n<li>添加构造器</li>\n<li>添加下标</li>\n<li>添加新的嵌套类型</li>\n<li>已有类型适配协议</li>\n</ul>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><p>声明扩展使用关键字<code>extension</code>：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">extension SomeType &#123;</div><div class=\"line\">    // 新功能</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">extension SomeType: SomeProtocol, AnotherProtocol &#123;</div><div class=\"line\">    // 已有类型适配的协议实现</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"计算型属性\"><a href=\"#计算型属性\" class=\"headerlink\" title=\"计算型属性\"></a>计算型属性</h2><p>扩展只能添加计算型属性，包括实例属性和类型属性，但是不能添加存储属性和属性观察器。<br>下面的例子为<code>Double</code>类添加了5个计算型实例属性，因为都是只读属性，所以省略了<code>get</code>关键字。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Double</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> km: <span class=\"type\">Double</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">self</span> * <span class=\"number\">1_000.0</span> &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> m : <span class=\"type\">Double</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">self</span> &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> cm: <span class=\"type\">Double</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">self</span> / <span class=\"number\">100.0</span> &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> mm: <span class=\"type\">Double</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">self</span> / <span class=\"number\">1_000.0</span> &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> ft: <span class=\"type\">Double</span> &#123; <span class=\"keyword\">return</span> <span class=\"keyword\">self</span> / <span class=\"number\">3.28084</span> &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> oneInch = <span class=\"number\">25.4</span>.mm</div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"One inch is \\(oneInch) meters\"</span>)</div><div class=\"line\"><span class=\"comment\">// 打印输出：\"One inch is 0.0254 meters\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> threeFeet = <span class=\"number\">3</span>.ft</div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"Three feet is \\(threeFeet) meters\"</span>)</div><div class=\"line\"><span class=\"comment\">// 打印输出：\"Three feet is 0.914399970739201 meters\"</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>下面的例子为<code>Int</code>类型添加了1个实例方法，实现了多次执行某任务的功能。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Int</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">repetitions</span><span class=\"params\">(task: <span class=\"params\">()</span></span></span> -&gt; ()) &#123;</div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span>..&lt;<span class=\"keyword\">self</span> &#123;</div><div class=\"line\">            task()</div><div class=\"line\">&#125;&#125;&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"number\">3</span>.repetitions(&#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Hello!\"</span>)</div><div class=\"line\">    &#125;)</div><div class=\"line\"><span class=\"comment\">// Hello!</span></div><div class=\"line\"><span class=\"comment\">// Hello!</span></div><div class=\"line\"><span class=\"comment\">// Hello!</span></div></pre></td></tr></table></figure></p>\n<p>这个实例方法传入一个无参数无返回值的函数，没有返回值。</p>\n<p>扩展的方法可以修改实例本身，使用<code>mutating</code>关键字。<br>下面的例子添加了一个实现平方计算的方法。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Int</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">square</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span> = <span class=\"keyword\">self</span> * <span class=\"keyword\">self</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> someInt = <span class=\"number\">3</span></div><div class=\"line\">someInt.square()</div><div class=\"line\"><span class=\"comment\">// someInt 现在值是 9</span></div></pre></td></tr></table></figure></p>\n<p>枚举和结构体修改<code>self</code>或者属性的方法都必须标注为<code>mutating</code>。</p>\n<h2 id=\"下标\"><a href=\"#下标\" class=\"headerlink\" title=\"下标\"></a>下标</h2><p>下面的例子为<code>Int</code>类型添加了1个下标，返回整数的从右数第<code>index</code>位上的个位数。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Int</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">subscript</span>(<span class=\"keyword\">var</span> digitIndex: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> decimalBase = <span class=\"number\">1</span></div><div class=\"line\">            <span class=\"keyword\">while</span> digitIndex &gt; <span class=\"number\">0</span> &#123;</div><div class=\"line\">                decimalBase *= <span class=\"number\">10</span></div><div class=\"line\">                --digitIndex</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> (<span class=\"keyword\">self</span> / decimalBase) % <span class=\"number\">10</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"number\">746381295</span>[<span class=\"number\">0</span>]</div><div class=\"line\"><span class=\"comment\">// returns 5</span></div><div class=\"line\"><span class=\"number\">746381295</span>[<span class=\"number\">1</span>]</div><div class=\"line\"><span class=\"comment\">// returns 9</span></div><div class=\"line\"><span class=\"number\">746381295</span>[<span class=\"number\">2</span>]</div><div class=\"line\"><span class=\"comment\">// returns 2</span></div><div class=\"line\"><span class=\"number\">746381295</span>[<span class=\"number\">8</span>]</div><div class=\"line\"><span class=\"comment\">// returns 7</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h2><p>扩展只能添加便利构造器，但是不能添加指定构造器和析构函数。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Size</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> width = <span class=\"number\">0.0</span>, height = <span class=\"number\">0.0</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">0.0</span>, y = <span class=\"number\">0.0</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Rect</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> origin = <span class=\"type\">Point</span>()</div><div class=\"line\">    <span class=\"keyword\">var</span> size = <span class=\"type\">Size</span>()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Rect</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">init</span>(center: <span class=\"type\">Point</span>, size: <span class=\"type\">Size</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> originX = center.x - (size.width / <span class=\"number\">2</span>)</div><div class=\"line\">        <span class=\"keyword\">let</span> originY = center.y - (size.height / <span class=\"number\">2</span>)</div><div class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(origin: <span class=\"type\">Point</span>(x: originX, y: originY), size: size)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> centerRect = <span class=\"type\">Rect</span>(center: <span class=\"type\">Point</span>(x: <span class=\"number\">4.0</span>, y: <span class=\"number\">4.0</span>),</div><div class=\"line\">    size: <span class=\"type\">Size</span>(width: <span class=\"number\">3.0</span>, height: <span class=\"number\">3.0</span>))</div><div class=\"line\"><span class=\"comment\">// centerRect的原点是 (2.5, 2.5)，大小是 (3.0, 3.0)</span></div></pre></td></tr></table></figure></p>\n<p>上面的例子为类<code>Rect</code>添加了构造器，传入<code>Point</code>和<code>Size</code>参数，初始化了<code>Rect</code>。</p>\n<h2 id=\"嵌套类型\"><a href=\"#嵌套类型\" class=\"headerlink\" title=\"嵌套类型\"></a>嵌套类型</h2><p>扩展可以向已有的枚举，类和结构体添加新的嵌套类型。<br>下面的例子为<code>Character</code>添加了新的枚举类型：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Character</span> </span>&#123;</div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Kind</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"type\">Vowel</span>, <span class=\"type\">Consonant</span>, <span class=\"type\">Other</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> kind: <span class=\"type\">Kind</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> <span class=\"type\">String</span>(<span class=\"keyword\">self</span>).lowercaseString &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"a\"</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"i\"</span>, <span class=\"string\">\"o\"</span>, <span class=\"string\">\"u\"</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> .<span class=\"type\">Vowel</span></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"f\"</span>, <span class=\"string\">\"g\"</span>, <span class=\"string\">\"h\"</span>, <span class=\"string\">\"j\"</span>, <span class=\"string\">\"k\"</span>, <span class=\"string\">\"l\"</span>, <span class=\"string\">\"m\"</span>,</div><div class=\"line\">             <span class=\"string\">\"n\"</span>, <span class=\"string\">\"p\"</span>, <span class=\"string\">\"q\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"string\">\"s\"</span>, <span class=\"string\">\"t\"</span>, <span class=\"string\">\"v\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"string\">\"x\"</span>, <span class=\"string\">\"y\"</span>, <span class=\"string\">\"z\"</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> .<span class=\"type\">Consonant</span></div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> .<span class=\"type\">Other</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printLetterKinds</span><span class=\"params\">(word: String)</span></span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"'\\(word)' is made up of the following kinds of letters:\"</span>)</div><div class=\"line\">    <span class=\"keyword\">for</span> character <span class=\"keyword\">in</span> word &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> character.kind &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> .<span class=\"type\">Vowel</span>:</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"vowel \"</span>)</div><div class=\"line\">        <span class=\"keyword\">case</span> .<span class=\"type\">Consonant</span>:</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"consonant \"</span>)</div><div class=\"line\">        <span class=\"keyword\">case</span> .<span class=\"type\">Other</span>:</div><div class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">\"other \"</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"\\n\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">printLetterKinds(<span class=\"string\">\"Hello\"</span>)</div><div class=\"line\"><span class=\"comment\">// 'Hello' is made up of the following kinds of letters:</span></div><div class=\"line\"><span class=\"comment\">// consonant vowel consonant consonant vowel</span></div></pre></td></tr></table></figure></p>\n<p>枚举类型<code>Kind</code>表示字母是元音，辅音还是其他类型。<br>添加了计算型方法，返回字母对应的<code>Kind</code>枚举成员类型。</p>\n<h1 id=\"协议\"><a href=\"#协议\" class=\"headerlink\" title=\"协议\"></a>协议</h1><p>协议类似于C++/Java语言中的接口，定义要实现的属性方法，但是不实现，由继承的枚举，结构体和类去实现。</p>\n<h2 id=\"语法-1\"><a href=\"#语法-1\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">SomeProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 协议内容</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SomeStructure</span>: <span class=\"title\">FirstProtocol</span>, <span class=\"title\">AnotherProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 结构体内容</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span>: <span class=\"title\">SomeSuperClass</span>, <span class=\"title\">FirstProtocol</span>, <span class=\"title\">AnotherProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 类的内容</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>结构体<code>SomeStructure</code>实现（用<code>:</code>表示）协议<code>someProtocol</code>和<code>AnotherProtocol</code>，多个协议隔开用<code>,</code>表示，需要实现协议的所有属性和方法。<br>类<code>SomeClass</code>实现父类<code>SomeSuperClass</code>和两个协议，需要把父类声明写到前面，协议并列写在后面。</p>\n<ul>\n<li>协议类型<br>协议也可以作为一种基本类型，作为函数方法的参数类型、返回值类型，常量变量属性的类型，数组字典等集合的元素类型等等。<br>当协议作为集合的元素类型时，遍历集合得到的实例是协议类型，只能访问属于协议中定义的属性方法下标。</li>\n</ul>\n<h2 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h2><p>协议中声明的属性，可以实现为实例属性或类型属性，存储型属性或计算型属性都可以。<br>协议中的只读属性，可以实现为只读属性或读写属性；但是协议中的读写属性，只能实现为读写属性。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">SomeProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> mustBeSettable : <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;\t<span class=\"comment\">//读写属性</span></div><div class=\"line\">    <span class=\"keyword\">var</span> doesNotNeedToBeSettable: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> &#125;\t<span class=\"comment\">//只读属性</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>协议中可以定义类型属性，只能实现为类型属性，属性前加上关键字<code>static</code>。<br>枚举和结构体实现后要在属性前加上关键字<code>static</code>，但是类实现后要在属性前加上关键字<code>class</code>。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">AnotherProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> someTypeProperty: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> <span class=\"keyword\">set</span> &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>下面一个实例。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">FullyNamed</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> fullName: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person</span>: <span class=\"title\">FullyNamed</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> fullName: <span class=\"type\">String</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> john = <span class=\"type\">Person</span>(fullName: <span class=\"string\">\"John Appleseed\"</span>)</div><div class=\"line\"><span class=\"comment\">//john.fullName 为 \"John Appleseed\"</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"方法-1\"><a href=\"#方法-1\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>协议中的方法不需要大括号和具体实现，支持变长参数，而不支持参数默认值。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">RandomNumberGenerator</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">random</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Double</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>和类型属性一样，类型方法也是在协议中使用<code>static</code>，枚举和结构体中用<code>static</code>继承，而类中用<code>class</code>继承。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">SomeProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">func</span> <span class=\"title\">someTypeMethod</span>()</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>变异方法<br>在<code>func</code>前加上关键字<code>mutating</code>的方法表示在该方法中可以修改实例及其属性的值，称为变异（<em>mutating</em>）方法。<br>枚举和结构体实现时，需要加上<code>mutating</code>关键字；而类实现时，不需要加上<code>mutating</code>关键字。<br>下面一个实例。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Togglable</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">toggle</span><span class=\"params\">()</span></span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">OnOffSwitch</span>: <span class=\"title\">Togglable</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Off</span>, <span class=\"type\">On</span></div><div class=\"line\">    <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">toggle</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"type\">Off</span>:</div><div class=\"line\">            <span class=\"keyword\">self</span> = <span class=\"type\">On</span></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"type\">On</span>:</div><div class=\"line\">            <span class=\"keyword\">self</span> = <span class=\"type\">Off</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> lightSwitch = <span class=\"type\">OnOffSwitch</span>.<span class=\"type\">Off</span></div><div class=\"line\">lightSwitch.toggle()</div><div class=\"line\"><span class=\"comment\">//lightSwitch 现在的值为 .On</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>在<code>func toggle()</code>中，修改了<code>self</code>的值，属于变异方法。</p>\n<h2 id=\"构造器-1\"><a href=\"#构造器-1\" class=\"headerlink\" title=\"构造器\"></a>构造器</h2><p>协议中的构造器不需要大括号和具体实现。<br>类实现协议时，必须给构造器前面加上关键字<code>required</code>，表示它的子类必须继承的构造器。<br>当然，如果针对<code>final</code>类就不需要加<code>required</code>了，标有关键字<code>final</code>的类表示不能有子类。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">SomeProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">init</span>(someParameter: <span class=\"type\">Int</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span>: <span class=\"title\">SomeProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">init</span>(someParameter: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">        <span class=\"comment\">//构造器实现</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>还有一种情况，如果子类重写了父类的指定构造器，需要在构造器前加上<code>override</code>，但是如果又要同时实现协议，需要在构造器前加上<code>required</code>，那么<code>required</code>应该放在<code>override</code>前面。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeSubClass</span>: <span class=\"title\">SomeSuperClass</span>, <span class=\"title\">SomeProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// \"required\" from SomeProtocol conformance; \"override\" from SomeSuperClass</span></div><div class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">override</span> <span class=\"keyword\">init</span>() &#123;</div><div class=\"line\">        <span class=\"comment\">// 构造器实现</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>可失败构造器<br>协议中的可失败构造器可以实现成可失败构造器或非可失败构造器；而协议中的非可失败构造器只能实现成非可失败构造器或隐式解析类型的可失败构造器（<code>init!</code>）。</li>\n</ul>\n<h2 id=\"适配协议\"><a href=\"#适配协议\" class=\"headerlink\" title=\"适配协议\"></a>适配协议</h2><p>扩展可以对已存在的枚举，结构体和类添加成员，比如属性，方法，下标，协议等。<br>下面的例子展示了通过扩展为已有类型适配协议。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">TextRepresentable</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">asText</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">extension</span> <span class=\"title\">Dice</span>: <span class=\"title\">TextRepresentable</span> </span>&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">asText</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"A \\(sides)-sided dice\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>Dice</code>是一个已存在的类型，协议中的<code>asText</code>方法被添加实现在了<code>Dice</code>中。<br>如果<code>Dice</code>已经存在了<code>asText() -&gt; String</code>方法，可以直接<code>extension Dice: TextRepresentable {}</code>，添加实现协议的声明。</p>\n<h2 id=\"协议继承\"><a href=\"#协议继承\" class=\"headerlink\" title=\"协议继承\"></a>协议继承</h2><p>协议也可以和类一样，继承别的协议。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">InheritingProtocol</span>: <span class=\"title\">SomeProtocol</span>, <span class=\"title\">AnotherProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 协议定义</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>类专属协议<br>如果在继承列表中加上<code>class</code>，且<code>class</code>必须第一个被声明，其他继承协议在后面并列声明，则表示这个协议只能由类实现，枚举和结构体不可以实现。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">SomeClassOnlyProtocol</span>: <span class=\"title\">class</span>, <span class=\"title\">SomeInheritedProtocol</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// class-only protocol definition goes here</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"协议合成\"><a href=\"#协议合成\" class=\"headerlink\" title=\"协议合成\"></a>协议合成</h2><p>多个协议可以用protcol<someprotocol, anotherprotocol=\"\">的格式临时组合成一个协议。<br>下面一个例子。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Named</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span> &#123; <span class=\"keyword\">get</span> &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">Aged</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Person</span>: <span class=\"title\">Named</span>, <span class=\"title\">Aged</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">var</span> age: <span class=\"type\">Int</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">wishHappyBirthday</span><span class=\"params\">(celebrator: <span class=\"keyword\">protocol</span>&lt;Named, Aged&gt;)</span></span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Happy birthday \\(celebrator.name) - you're \\(celebrator.age)!\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> birthdayPerson = <span class=\"type\">Person</span>(name: <span class=\"string\">\"Malcolm\"</span>, age: <span class=\"number\">21</span>)</div><div class=\"line\">wishHappyBirthday(birthdayPerson)</div><div class=\"line\"><span class=\"comment\">// 输出 \"Happy birthday Malcolm - you're 21!</span></div></pre></td></tr></table></figure></someprotocol,></p>\n<h2 id=\"协议一致性\"><a href=\"#协议一致性\" class=\"headerlink\" title=\"协议一致性\"></a>协议一致性</h2><p>用<code>is</code>操作符检查协议是否实现了特定协议，返回<code>true</code>或<code>false</code>。<br>用<code>as?</code>操作符返回一个可选值，如果协议实现了特定协议，返回协议类型；否则返回<code>nil</code>。如果这个协议一定实现了特定协议，可以用<code>as!</code>强制返回非可选的特定类型。<br>下面一个例子。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">HasArea</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> area: <span class=\"type\">Double</span> &#123; <span class=\"keyword\">get</span> &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Circle</span>: <span class=\"title\">HasArea</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> pi = <span class=\"number\">3.1415927</span></div><div class=\"line\">    <span class=\"keyword\">var</span> radius: <span class=\"type\">Double</span></div><div class=\"line\">    <span class=\"keyword\">var</span> area: <span class=\"type\">Double</span> &#123; <span class=\"keyword\">return</span> pi * radius * radius &#125;</div><div class=\"line\">    <span class=\"keyword\">init</span>(radius: <span class=\"type\">Double</span>) &#123; <span class=\"keyword\">self</span>.radius = radius &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Country</span>: <span class=\"title\">HasArea</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> area: <span class=\"type\">Double</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(area: <span class=\"type\">Double</span>) &#123; <span class=\"keyword\">self</span>.area = area &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> legs: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(legs: <span class=\"type\">Int</span>) &#123; <span class=\"keyword\">self</span>.legs = legs &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> objects: [<span class=\"type\">AnyObject</span>] = [</div><div class=\"line\">    <span class=\"type\">Circle</span>(radius: <span class=\"number\">2.0</span>),</div><div class=\"line\">    <span class=\"type\">Country</span>(area: <span class=\"number\">243_610</span>),</div><div class=\"line\">    <span class=\"type\">Animal</span>(legs: <span class=\"number\">4</span>)</div><div class=\"line\">]</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> object <span class=\"keyword\">in</span> objects &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> objectWithArea = object <span class=\"keyword\">as</span>? <span class=\"type\">HasArea</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">println</span>(<span class=\"string\">\"Area is \\(objectWithArea.area)\"</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">println</span>(<span class=\"string\">\"Something that doesn't have an area\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Area is 12.5663708</span></div><div class=\"line\"><span class=\"comment\">// Area is 243610.0</span></div><div class=\"line\"><span class=\"comment\">// Something that doesn't have an area</span></div></pre></td></tr></table></figure></p>\n<p>类<code>Circle</code>和类<code>Country</code>都实现了<code>HasArea</code>协议，而类<code>Animal</code>没有实现<code>HasArea</code>协议。<br>这三个类的实例用同一个数组装上，然后遍历，利用协议一致性检查。在这个数组中实例的值的类型没有变，但是这里显式为<code>HasArea</code>类型，所以只能访问<code>area</code>属性。</p>\n<h2 id=\"可选协议\"><a href=\"#可选协议\" class=\"headerlink\" title=\"可选协议\"></a>可选协议</h2><p>可选类型可以含有可选成员，可以选择是否实现这些可选成员，用关键字<code>optional</code>来表示这些可选成员。可选协议在调用时可以使用可选链。<br>协议前的<code>@objc</code>表示协议是可选的，也表示暴露给<code>Objective-C</code>的代码，只对类有效。所以可选协议只能由类实现。<br>下面一个例子。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@objc</span> <span class=\"class\"><span class=\"keyword\">protocol</span> <span class=\"title\">CounterDataSource</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">optional</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">incrementForCount</span><span class=\"params\">(<span class=\"built_in\">count</span>: Int)</span></span> -&gt; <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">optional</span> <span class=\"keyword\">var</span> fixedIncrement: <span class=\"type\">Int</span> &#123; <span class=\"keyword\">get</span> &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@objc</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">count</span> = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">var</span> dataSource: <span class=\"type\">CounterDataSource</span>?</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">increment</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> amount = dataSource?.incrementForCount?(<span class=\"built_in\">count</span>) &#123;</div><div class=\"line\">            <span class=\"built_in\">count</span> += amount</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> amount = dataSource?.fixedIncrement? &#123;</div><div class=\"line\">            <span class=\"built_in\">count</span> += amount</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//为协议实现可选属性</span></div><div class=\"line\"><span class=\"meta\">@objc</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ThreeSource</span>: <span class=\"title\">CounterDataSource</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> fixedIncrement = <span class=\"number\">3</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> counter = <span class=\"type\">Counter</span>()</div><div class=\"line\">counter.dataSource = <span class=\"type\">ThreeSource</span>()</div><div class=\"line\"><span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span>...<span class=\"number\">4</span> &#123;</div><div class=\"line\">    counter.increment()</div><div class=\"line\">    <span class=\"built_in\">print</span>(counter.<span class=\"built_in\">count</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 3</span></div><div class=\"line\"><span class=\"comment\">// 6</span></div><div class=\"line\"><span class=\"comment\">// 9</span></div><div class=\"line\"><span class=\"comment\">// 12</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//为协议实现可选方法</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TowardsZeroSource</span>: <span class=\"title\">CounterDataSource</span> </span>&#123;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">incrementForCount</span><span class=\"params\">(<span class=\"built_in\">count</span>: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"built_in\">count</span> == <span class=\"number\">0</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"built_in\">count</span> &lt; <span class=\"number\">0</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">1</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> -<span class=\"number\">1</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\">counter.<span class=\"built_in\">count</span> = -<span class=\"number\">4</span></div><div class=\"line\">counter.dataSource = <span class=\"type\">TowardsZeroSource</span>()</div><div class=\"line\"><span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span>...<span class=\"number\">5</span> &#123;</div><div class=\"line\">    counter.increment()</div><div class=\"line\">    <span class=\"built_in\">print</span>(counter.<span class=\"built_in\">count</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// -3</span></div><div class=\"line\"><span class=\"comment\">// -2</span></div><div class=\"line\"><span class=\"comment\">// -1</span></div><div class=\"line\"><span class=\"comment\">// 0</span></div><div class=\"line\"><span class=\"comment\">// 0</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"协议扩展\"><a href=\"#协议扩展\" class=\"headerlink\" title=\"协议扩展\"></a>协议扩展</h2><p>扩展协议可以为每个实现该协议的地方（<em>遵循者</em>）添加属性或方法的实现，该协议的遵循者不用任何修改，可以得到添加的属性方法。<br>这种方式可以为协议中的属性和方法提供默认的实现，遵循者中再次实现可以覆盖默认的实现。<br>扩展协议时可以限定条件，只有满足条件的遵循者能够得到协议扩展的属性和方法。</p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>"},{"title":"Swift基础入门(13)：高级运算符","date":"2015-07-28T03:59:40.000Z","toc":true,"_content":"\n本篇介绍Swift的基础知识：高级运算符，包括位运算符，溢出运算符和运算符重载与自定义。\n\n<!--more-->\n**Title: [Swift基础入门(13)：高级操作符](https://aidaizyy.github.io/swift_13)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-07-28](http://aidaizyy.github.io)**\n\n# 高级操作符\n\n## 位运算符\nSwift中位运算符和C语言基本一致，不再详细介绍。\n- ~：取反\n- &：与\n- |：或\n- ^：异或\n- <<：左移\n- \\>\\>：右移\n左移右移同样分逻辑移位和算术移位\n\n## 溢出运算符\nSwift默认不能溢出，如果故意要溢出必须采用溢出运算。\n- &+：溢出加法\n- &-：溢出减法\n- &*：溢出乘法\n- &/：溢出除法\n- &%：溢出求余\n``` swift\nvar willOverflow = UInt8.max\n// willOverflow 等于UInt8的最大整数 255\nwillOverflow = willOverflow &+ 1\n// 此时 willOverflow 等于 0\n\nvar willUnderflow = UInt8.min\n// willUnderflow 等于UInt8的最小值0\nwillUnderflow = willUnderflow &- 1\n// 此时 willUnderflow 等于 255\n\nvar signedUnderflow = Int8.min\n// signedUnderflow 等于最小的有符整数 -128\nsignedUnderflow = signedUnderflow &- 1\n// 此时 signedUnderflow 等于 127\n\nlet x = 1\nlet y = x &/ 0\n// y 等于 0\n```\n不一样的地方在于：一个数除以0或者对0求余数，即`i / 0`或者`i % 0`，其他默认会溢出的语言会报错。但是Swift的`i &/ 0`和`i &% 0`溢出运算会让结果都等于0。\n\n## 运算符函数\n对运算符重载，让已有的运算符，如`+`，`-`等基本运算符能对自定义的类和结构体进行运算。\n- @infix：中置运算符\n- @prefix：前置运算符\n- @postfix：后置运算符\n- @assignment：组合赋值运算符\n下面对`+`进行重载，函数传入了两个参数，表示双目运算符，有两个操作数。\n函数前加上关键字`@infix`，表示`+`作为中置运算符，放在两个操作数的中间。\n``` swift\nstruct Vector2D {\n    var x = 0.0, y = 0.0\n}\n@infix func + (left: Vector2D, right: Vector2D) -> Vector2D {\n    return Vector2D(x: left.x + right.x, y: left.y + right.y)\n}\n\nlet vector = Vector2D(x: 3.0, y: 1.0)\nlet anotherVector = Vector2D(x: 2.0, y: 4.0)\nlet combinedVector = vector + anotherVector\n// combinedVector 是一个新的Vector2D, 值为 (5.0, 5.0)\n```\n前置和后置运算分别加上关键字`@prefix`和`@postfix`，表示把运算符放在操作数前面或后面。\n函数只传入一个参数，表示弹幕运算符，只有一个操作数。\n``` swift\n@prefix func - (vector: Vector2D) -> Vector2D {\n    return Vector2D(x: -vector.x, y: -vector.y)\n}\n\nlet positive = Vector2D(x: 3.0, y: 4.0)\nlet negative = -positive\n// negative 为 (-3.0, -4.0)\nlet alsoPositive = -negative\n// alsoPositive 为 (3.0, 4.0)\n```\n如果我们要重载`+=`，`-=`等运算符加上赋值符的组合赋值运算符，需要使用`@assignment`关键字。也可以和前置后置组合起来，形成`@prefix @assignment`或`@postfix @assignment`。\n``` swift\n@assignment func += (inout left: Vector2D, right: Vector2D) {\n    left = left + right\t\t//`+`在前面的例子中已经定义过了\n}\n\nvar original = Vector2D(x: 1.0, y: 2.0)\nlet vectorToAdd = Vector2D(x: 3.0, y: 4.0)\noriginal += vectorToAdd\n// original 现在为 (4.0, 6.0)\n\n@prefix @assignment func ++ (inout vector: Vector2D) -> Vector2D {\n    vector += Vector2D(x: 1.0, y: 1.0)\n    return vector\n}\n\nvar toIncrement = Vector2D(x: 3.0, y: 4.0)\nlet afterIncrement = ++toIncrement\n// toIncrement 现在是 (4.0, 5.0)\n// afterIncrement 现在也是 (4.0, 5.0)\n```\n比较运算符重载`==`和`!=`类似于其他中置运算符。\n``` swift\n@infix func == (left: Vector2D, right: Vector2D) -> Bool {\n    return (left.x == right.x) && (left.y == right.y)\n}\n\n@infix func != (left: Vector2D, right: Vector2D) -> Bool {\n    return !(left == right)\n}\n\nlet twoThree = Vector2D(x: 2.0, y: 3.0)\nlet anotherTwoThree = Vector2D(x: 2.0, y: 3.0)\nif twoThree == anotherTwoThree {\n    println(\"这两个向量是相等的.\")\n}\n// prints \"这两个向量是相等的.\"\n```\n但是默认赋值符`=`和三目条件运算符`a?b:c`都不可重载。\n- 自定义运算符\n除了标准的运算符之外，Swift还规定对只有`/ = - + * / < > ! & | ^ . ~`这些符号的运算符进行自定义。\n新的运算符需要在全局域用`operator`关键字声明，声明为中置，前置或后置。\n比如`operator prefix +++ {}`声明了新的前置运算符`+++`。\n然后重载实现`+++`运算符：\n``` swift\n@prefix @assignment func +++ (inout vector: Vector2D) -> Vector2D {\n    vector += vector\n    return vector\n}\n\nvar toBeDoubled = Vector2D(x: 1.0, y: 4.0)\nlet afterDoubling = +++toBeDoubled\n// toBeDoubled 现在是 (2.0, 8.0)\n// afterDoubling 现在也是 (2.0, 8.0)\n```\n还可以为自定义的运算符定义结合性和优先级。\n结合性`associativity`后面可以接`left`（和左边操作数结合），`right`（和右边操作数结合），`none`（默认值，不与其他相同优先级的运算符写在一起）。\n优先级`precedence`后面接数值表示优先级，默认为`100`。\n下面一个例子。\n``` swift\noperator infix +- { associativity left precedence 140 }\nfunc +- (left: Vector2D, right: Vector2D) -> Vector2D {\n    return Vector2D(x: left.x + right.x, y: left.y - right.y)\n}\nlet firstVector = Vector2D(x: 1.0, y: 2.0)\nlet secondVector = Vector2D(x: 3.0, y: 4.0)\nlet plusMinusVector = firstVector +- secondVector\n// plusMinusVector 此时的值为 (4.0, -2.0)\n```\n自定义运算符优先级默认为100，其他标准运算符优先级从高到低：\n- 160（无结合）：`<<`  `>>`\n- 150（左结合）：`*`  `/`  `%`  `&*`  `&/`  `&%`  `&`（位与）\n- 140（左结合）：`+`  `-`  `&+`  `&-`  `|`（位或）  `^`（位异或）\n- 135（无结合）：`..<`  `...`\n- 132（无结合）：`is`  `as`\n- 130（无结合）：`<`  `<=`  `\\>`  `\\>=`  `==`  `!=`  `===`  `!==`  `~=`（模式匹配）\n- 120（左结合）：`&&`（逻辑与）\n- 110（左结合）：`||`（逻辑或）\n- 100（右结合）：`? :` （三元条件）\n- 90（右结合）：`=`  `*=`  `/=`  `%=`  `+=`  `-=`  `<<=`  `>>=`  `&=`  `|=`  `^=`  `&&=`  `||=`\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","source":"_posts/swift_13.md","raw":"title: \"Swift基础入门(13)：高级运算符\"\ndate: 2015-07-28 11:59:40\ntags:\n- swift\ncategories: swift \ntoc: true\n---\n\n本篇介绍Swift的基础知识：高级运算符，包括位运算符，溢出运算符和运算符重载与自定义。\n\n<!--more-->\n**Title: [Swift基础入门(13)：高级操作符](https://aidaizyy.github.io/swift_13)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-07-28](http://aidaizyy.github.io)**\n\n# 高级操作符\n\n## 位运算符\nSwift中位运算符和C语言基本一致，不再详细介绍。\n- ~：取反\n- &：与\n- |：或\n- ^：异或\n- <<：左移\n- \\>\\>：右移\n左移右移同样分逻辑移位和算术移位\n\n## 溢出运算符\nSwift默认不能溢出，如果故意要溢出必须采用溢出运算。\n- &+：溢出加法\n- &-：溢出减法\n- &*：溢出乘法\n- &/：溢出除法\n- &%：溢出求余\n``` swift\nvar willOverflow = UInt8.max\n// willOverflow 等于UInt8的最大整数 255\nwillOverflow = willOverflow &+ 1\n// 此时 willOverflow 等于 0\n\nvar willUnderflow = UInt8.min\n// willUnderflow 等于UInt8的最小值0\nwillUnderflow = willUnderflow &- 1\n// 此时 willUnderflow 等于 255\n\nvar signedUnderflow = Int8.min\n// signedUnderflow 等于最小的有符整数 -128\nsignedUnderflow = signedUnderflow &- 1\n// 此时 signedUnderflow 等于 127\n\nlet x = 1\nlet y = x &/ 0\n// y 等于 0\n```\n不一样的地方在于：一个数除以0或者对0求余数，即`i / 0`或者`i % 0`，其他默认会溢出的语言会报错。但是Swift的`i &/ 0`和`i &% 0`溢出运算会让结果都等于0。\n\n## 运算符函数\n对运算符重载，让已有的运算符，如`+`，`-`等基本运算符能对自定义的类和结构体进行运算。\n- @infix：中置运算符\n- @prefix：前置运算符\n- @postfix：后置运算符\n- @assignment：组合赋值运算符\n下面对`+`进行重载，函数传入了两个参数，表示双目运算符，有两个操作数。\n函数前加上关键字`@infix`，表示`+`作为中置运算符，放在两个操作数的中间。\n``` swift\nstruct Vector2D {\n    var x = 0.0, y = 0.0\n}\n@infix func + (left: Vector2D, right: Vector2D) -> Vector2D {\n    return Vector2D(x: left.x + right.x, y: left.y + right.y)\n}\n\nlet vector = Vector2D(x: 3.0, y: 1.0)\nlet anotherVector = Vector2D(x: 2.0, y: 4.0)\nlet combinedVector = vector + anotherVector\n// combinedVector 是一个新的Vector2D, 值为 (5.0, 5.0)\n```\n前置和后置运算分别加上关键字`@prefix`和`@postfix`，表示把运算符放在操作数前面或后面。\n函数只传入一个参数，表示弹幕运算符，只有一个操作数。\n``` swift\n@prefix func - (vector: Vector2D) -> Vector2D {\n    return Vector2D(x: -vector.x, y: -vector.y)\n}\n\nlet positive = Vector2D(x: 3.0, y: 4.0)\nlet negative = -positive\n// negative 为 (-3.0, -4.0)\nlet alsoPositive = -negative\n// alsoPositive 为 (3.0, 4.0)\n```\n如果我们要重载`+=`，`-=`等运算符加上赋值符的组合赋值运算符，需要使用`@assignment`关键字。也可以和前置后置组合起来，形成`@prefix @assignment`或`@postfix @assignment`。\n``` swift\n@assignment func += (inout left: Vector2D, right: Vector2D) {\n    left = left + right\t\t//`+`在前面的例子中已经定义过了\n}\n\nvar original = Vector2D(x: 1.0, y: 2.0)\nlet vectorToAdd = Vector2D(x: 3.0, y: 4.0)\noriginal += vectorToAdd\n// original 现在为 (4.0, 6.0)\n\n@prefix @assignment func ++ (inout vector: Vector2D) -> Vector2D {\n    vector += Vector2D(x: 1.0, y: 1.0)\n    return vector\n}\n\nvar toIncrement = Vector2D(x: 3.0, y: 4.0)\nlet afterIncrement = ++toIncrement\n// toIncrement 现在是 (4.0, 5.0)\n// afterIncrement 现在也是 (4.0, 5.0)\n```\n比较运算符重载`==`和`!=`类似于其他中置运算符。\n``` swift\n@infix func == (left: Vector2D, right: Vector2D) -> Bool {\n    return (left.x == right.x) && (left.y == right.y)\n}\n\n@infix func != (left: Vector2D, right: Vector2D) -> Bool {\n    return !(left == right)\n}\n\nlet twoThree = Vector2D(x: 2.0, y: 3.0)\nlet anotherTwoThree = Vector2D(x: 2.0, y: 3.0)\nif twoThree == anotherTwoThree {\n    println(\"这两个向量是相等的.\")\n}\n// prints \"这两个向量是相等的.\"\n```\n但是默认赋值符`=`和三目条件运算符`a?b:c`都不可重载。\n- 自定义运算符\n除了标准的运算符之外，Swift还规定对只有`/ = - + * / < > ! & | ^ . ~`这些符号的运算符进行自定义。\n新的运算符需要在全局域用`operator`关键字声明，声明为中置，前置或后置。\n比如`operator prefix +++ {}`声明了新的前置运算符`+++`。\n然后重载实现`+++`运算符：\n``` swift\n@prefix @assignment func +++ (inout vector: Vector2D) -> Vector2D {\n    vector += vector\n    return vector\n}\n\nvar toBeDoubled = Vector2D(x: 1.0, y: 4.0)\nlet afterDoubling = +++toBeDoubled\n// toBeDoubled 现在是 (2.0, 8.0)\n// afterDoubling 现在也是 (2.0, 8.0)\n```\n还可以为自定义的运算符定义结合性和优先级。\n结合性`associativity`后面可以接`left`（和左边操作数结合），`right`（和右边操作数结合），`none`（默认值，不与其他相同优先级的运算符写在一起）。\n优先级`precedence`后面接数值表示优先级，默认为`100`。\n下面一个例子。\n``` swift\noperator infix +- { associativity left precedence 140 }\nfunc +- (left: Vector2D, right: Vector2D) -> Vector2D {\n    return Vector2D(x: left.x + right.x, y: left.y - right.y)\n}\nlet firstVector = Vector2D(x: 1.0, y: 2.0)\nlet secondVector = Vector2D(x: 3.0, y: 4.0)\nlet plusMinusVector = firstVector +- secondVector\n// plusMinusVector 此时的值为 (4.0, -2.0)\n```\n自定义运算符优先级默认为100，其他标准运算符优先级从高到低：\n- 160（无结合）：`<<`  `>>`\n- 150（左结合）：`*`  `/`  `%`  `&*`  `&/`  `&%`  `&`（位与）\n- 140（左结合）：`+`  `-`  `&+`  `&-`  `|`（位或）  `^`（位异或）\n- 135（无结合）：`..<`  `...`\n- 132（无结合）：`is`  `as`\n- 130（无结合）：`<`  `<=`  `\\>`  `\\>=`  `==`  `!=`  `===`  `!==`  `~=`（模式匹配）\n- 120（左结合）：`&&`（逻辑与）\n- 110（左结合）：`||`（逻辑或）\n- 100（右结合）：`? :` （三元条件）\n- 90（右结合）：`=`  `*=`  `/=`  `%=`  `+=`  `-=`  `<<=`  `>>=`  `&=`  `|=`  `^=`  `&&=`  `||=`\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","slug":"swift_13","published":1,"updated":"2017-05-08T16:40:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2gdu6kg000zv1o3la96gp1a","content":"<p>本篇介绍Swift的基础知识：高级运算符，包括位运算符，溢出运算符和运算符重载与自定义。</p>\n<a id=\"more\"></a>\n<p><strong>Title: <a href=\"https://aidaizyy.github.io/swift_13\" target=\"_blank\" rel=\"external\">Swift基础入门(13)：高级操作符</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#x6d;&#x61;&#x69;&#x6c;&#x74;&#111;&#x3a;&#97;&#x69;&#x64;&#x61;&#105;&#122;&#x79;&#121;&#64;&#x67;&#109;&#97;&#105;&#108;&#46;&#x63;&#111;&#x6d;\">&#97;&#x69;&#x64;&#x61;&#105;&#122;&#x79;&#121;&#64;&#x67;&#109;&#97;&#105;&#108;&#46;&#x63;&#111;&#x6d;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-07-28</a></strong></p>\n<h1 id=\"高级操作符\"><a href=\"#高级操作符\" class=\"headerlink\" title=\"高级操作符\"></a>高级操作符</h1><h2 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h2><p>Swift中位运算符和C语言基本一致，不再详细介绍。</p>\n<ul>\n<li>~：取反</li>\n<li>&amp;：与</li>\n<li>|：或</li>\n<li>^：异或</li>\n<li>&lt;&lt;：左移</li>\n<li>>>：右移<br>左移右移同样分逻辑移位和算术移位</li>\n</ul>\n<h2 id=\"溢出运算符\"><a href=\"#溢出运算符\" class=\"headerlink\" title=\"溢出运算符\"></a>溢出运算符</h2><p>Swift默认不能溢出，如果故意要溢出必须采用溢出运算。</p>\n<ul>\n<li>&amp;+：溢出加法</li>\n<li>&amp;-：溢出减法</li>\n<li>&amp;*：溢出乘法</li>\n<li>&amp;/：溢出除法</li>\n<li>&amp;%：溢出求余<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> willOverflow = <span class=\"type\">UInt8</span>.<span class=\"built_in\">max</span></div><div class=\"line\"><span class=\"comment\">// willOverflow 等于UInt8的最大整数 255</span></div><div class=\"line\">willOverflow = willOverflow &amp;+ <span class=\"number\">1</span></div><div class=\"line\"><span class=\"comment\">// 此时 willOverflow 等于 0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> willUnderflow = <span class=\"type\">UInt8</span>.<span class=\"built_in\">min</span></div><div class=\"line\"><span class=\"comment\">// willUnderflow 等于UInt8的最小值0</span></div><div class=\"line\">willUnderflow = willUnderflow &amp;- <span class=\"number\">1</span></div><div class=\"line\"><span class=\"comment\">// 此时 willUnderflow 等于 255</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> signedUnderflow = <span class=\"type\">Int8</span>.<span class=\"built_in\">min</span></div><div class=\"line\"><span class=\"comment\">// signedUnderflow 等于最小的有符整数 -128</span></div><div class=\"line\">signedUnderflow = signedUnderflow &amp;- <span class=\"number\">1</span></div><div class=\"line\"><span class=\"comment\">// 此时 signedUnderflow 等于 127</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">let</span> y = x &amp;/ <span class=\"number\">0</span></div><div class=\"line\"><span class=\"comment\">// y 等于 0</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>不一样的地方在于：一个数除以0或者对0求余数，即<code>i / 0</code>或者<code>i % 0</code>，其他默认会溢出的语言会报错。但是Swift的<code>i &amp;/ 0</code>和<code>i &amp;% 0</code>溢出运算会让结果都等于0。</p>\n<h2 id=\"运算符函数\"><a href=\"#运算符函数\" class=\"headerlink\" title=\"运算符函数\"></a>运算符函数</h2><p>对运算符重载，让已有的运算符，如<code>+</code>，<code>-</code>等基本运算符能对自定义的类和结构体进行运算。</p>\n<ul>\n<li>@infix：中置运算符</li>\n<li>@prefix：前置运算符</li>\n<li>@postfix：后置运算符</li>\n<li>@assignment：组合赋值运算符<br>下面对<code>+</code>进行重载，函数传入了两个参数，表示双目运算符，有两个操作数。<br>函数前加上关键字<code>@infix</code>，表示<code>+</code>作为中置运算符，放在两个操作数的中间。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Vector2D</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">0.0</span>, y = <span class=\"number\">0.0</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@infix</span> <span class=\"function\"><span class=\"keyword\">func</span> + <span class=\"params\">(<span class=\"keyword\">left</span>: Vector2D, <span class=\"keyword\">right</span>: Vector2D)</span></span> -&gt; <span class=\"type\">Vector2D</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Vector2D</span>(x: <span class=\"keyword\">left</span>.x + <span class=\"keyword\">right</span>.x, y: <span class=\"keyword\">left</span>.y + <span class=\"keyword\">right</span>.y)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> vector = <span class=\"type\">Vector2D</span>(x: <span class=\"number\">3.0</span>, y: <span class=\"number\">1.0</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> anotherVector = <span class=\"type\">Vector2D</span>(x: <span class=\"number\">2.0</span>, y: <span class=\"number\">4.0</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> combinedVector = vector + anotherVector</div><div class=\"line\"><span class=\"comment\">// combinedVector 是一个新的Vector2D, 值为 (5.0, 5.0)</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>前置和后置运算分别加上关键字<code>@prefix</code>和<code>@postfix</code>，表示把运算符放在操作数前面或后面。<br>函数只传入一个参数，表示弹幕运算符，只有一个操作数。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@prefix</span> <span class=\"function\"><span class=\"keyword\">func</span> - <span class=\"params\">(vector: Vector2D)</span></span> -&gt; <span class=\"type\">Vector2D</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Vector2D</span>(x: -vector.x, y: -vector.y)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> positive = <span class=\"type\">Vector2D</span>(x: <span class=\"number\">3.0</span>, y: <span class=\"number\">4.0</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> negative = -positive</div><div class=\"line\"><span class=\"comment\">// negative 为 (-3.0, -4.0)</span></div><div class=\"line\"><span class=\"keyword\">let</span> alsoPositive = -negative</div><div class=\"line\"><span class=\"comment\">// alsoPositive 为 (3.0, 4.0)</span></div></pre></td></tr></table></figure></p>\n<p>如果我们要重载<code>+=</code>，<code>-=</code>等运算符加上赋值符的组合赋值运算符，需要使用<code>@assignment</code>关键字。也可以和前置后置组合起来，形成<code>@prefix @assignment</code>或<code>@postfix @assignment</code>。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">@assignment <span class=\"function\"><span class=\"keyword\">func</span> += <span class=\"params\">(<span class=\"keyword\">inout</span> <span class=\"keyword\">left</span>: Vector2D, <span class=\"keyword\">right</span>: Vector2D)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">left</span> = <span class=\"keyword\">left</span> + <span class=\"keyword\">right</span>\t\t<span class=\"comment\">//`+`在前面的例子中已经定义过了</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> original = <span class=\"type\">Vector2D</span>(x: <span class=\"number\">1.0</span>, y: <span class=\"number\">2.0</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> vectorToAdd = <span class=\"type\">Vector2D</span>(x: <span class=\"number\">3.0</span>, y: <span class=\"number\">4.0</span>)</div><div class=\"line\">original += vectorToAdd</div><div class=\"line\"><span class=\"comment\">// original 现在为 (4.0, 6.0)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@prefix</span> @assignment <span class=\"function\"><span class=\"keyword\">func</span> ++ <span class=\"params\">(<span class=\"keyword\">inout</span> vector: Vector2D)</span></span> -&gt; <span class=\"type\">Vector2D</span> &#123;</div><div class=\"line\">    vector += <span class=\"type\">Vector2D</span>(x: <span class=\"number\">1.0</span>, y: <span class=\"number\">1.0</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> vector</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> toIncrement = <span class=\"type\">Vector2D</span>(x: <span class=\"number\">3.0</span>, y: <span class=\"number\">4.0</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> afterIncrement = ++toIncrement</div><div class=\"line\"><span class=\"comment\">// toIncrement 现在是 (4.0, 5.0)</span></div><div class=\"line\"><span class=\"comment\">// afterIncrement 现在也是 (4.0, 5.0)</span></div></pre></td></tr></table></figure></p>\n<p>比较运算符重载<code>==</code>和<code>!=</code>类似于其他中置运算符。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@infix</span> <span class=\"function\"><span class=\"keyword\">func</span> == <span class=\"params\">(<span class=\"keyword\">left</span>: Vector2D, <span class=\"keyword\">right</span>: Vector2D)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">left</span>.x == <span class=\"keyword\">right</span>.x) &amp;&amp; (<span class=\"keyword\">left</span>.y == <span class=\"keyword\">right</span>.y)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@infix</span> <span class=\"function\"><span class=\"keyword\">func</span> != <span class=\"params\">(<span class=\"keyword\">left</span>: Vector2D, <span class=\"keyword\">right</span>: Vector2D)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> !(<span class=\"keyword\">left</span> == <span class=\"keyword\">right</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> twoThree = <span class=\"type\">Vector2D</span>(x: <span class=\"number\">2.0</span>, y: <span class=\"number\">3.0</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> anotherTwoThree = <span class=\"type\">Vector2D</span>(x: <span class=\"number\">2.0</span>, y: <span class=\"number\">3.0</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> twoThree == anotherTwoThree &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"这两个向量是相等的.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// prints \"这两个向量是相等的.\"</span></div></pre></td></tr></table></figure></p>\n<p>但是默认赋值符<code>=</code>和三目条件运算符<code>a?b:c</code>都不可重载。</p>\n<ul>\n<li>自定义运算符<br>除了标准的运算符之外，Swift还规定对只有<code>/ = - + * / &lt; &gt; ! &amp; | ^ . ~</code>这些符号的运算符进行自定义。<br>新的运算符需要在全局域用<code>operator</code>关键字声明，声明为中置，前置或后置。<br>比如<code>operator prefix +++ {}</code>声明了新的前置运算符<code>+++</code>。<br>然后重载实现<code>+++</code>运算符：<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@prefix</span> @assignment <span class=\"function\"><span class=\"keyword\">func</span> +++ <span class=\"params\">(<span class=\"keyword\">inout</span> vector: Vector2D)</span></span> -&gt; <span class=\"type\">Vector2D</span> &#123;</div><div class=\"line\">    vector += vector</div><div class=\"line\">    <span class=\"keyword\">return</span> vector</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> toBeDoubled = <span class=\"type\">Vector2D</span>(x: <span class=\"number\">1.0</span>, y: <span class=\"number\">4.0</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> afterDoubling = +++toBeDoubled</div><div class=\"line\"><span class=\"comment\">// toBeDoubled 现在是 (2.0, 8.0)</span></div><div class=\"line\"><span class=\"comment\">// afterDoubling 现在也是 (2.0, 8.0)</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>还可以为自定义的运算符定义结合性和优先级。<br>结合性<code>associativity</code>后面可以接<code>left</code>（和左边操作数结合），<code>right</code>（和右边操作数结合），<code>none</code>（默认值，不与其他相同优先级的运算符写在一起）。<br>优先级<code>precedence</code>后面接数值表示优先级，默认为<code>100</code>。<br>下面一个例子。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">operator</span> <span class=\"keyword\">infix</span> +- &#123; <span class=\"keyword\">associativity</span> <span class=\"keyword\">left</span> <span class=\"keyword\">precedence</span> <span class=\"number\">140</span> &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> +- <span class=\"params\">(<span class=\"keyword\">left</span>: Vector2D, <span class=\"keyword\">right</span>: Vector2D)</span></span> -&gt; <span class=\"type\">Vector2D</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Vector2D</span>(x: <span class=\"keyword\">left</span>.x + <span class=\"keyword\">right</span>.x, y: <span class=\"keyword\">left</span>.y - <span class=\"keyword\">right</span>.y)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> firstVector = <span class=\"type\">Vector2D</span>(x: <span class=\"number\">1.0</span>, y: <span class=\"number\">2.0</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> secondVector = <span class=\"type\">Vector2D</span>(x: <span class=\"number\">3.0</span>, y: <span class=\"number\">4.0</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> plusMinusVector = firstVector +- secondVector</div><div class=\"line\"><span class=\"comment\">// plusMinusVector 此时的值为 (4.0, -2.0)</span></div></pre></td></tr></table></figure></p>\n<p>自定义运算符优先级默认为100，其他标准运算符优先级从高到低：</p>\n<ul>\n<li>160（无结合）：<code>&lt;&lt;</code>  <code>&gt;&gt;</code></li>\n<li>150（左结合）：<code>*</code>  <code>/</code>  <code>%</code>  <code>&amp;*</code>  <code>&amp;/</code>  <code>&amp;%</code>  <code>&amp;</code>（位与）</li>\n<li>140（左结合）：<code>+</code>  <code>-</code>  <code>&amp;+</code>  <code>&amp;-</code>  <code>|</code>（位或）  <code>^</code>（位异或）</li>\n<li>135（无结合）：<code>..&lt;</code>  <code>...</code></li>\n<li>132（无结合）：<code>is</code>  <code>as</code></li>\n<li>130（无结合）：<code>&lt;</code>  <code>&lt;=</code>  <code>\\&gt;</code>  <code>\\&gt;=</code>  <code>==</code>  <code>!=</code>  <code>===</code>  <code>!==</code>  <code>~=</code>（模式匹配）</li>\n<li>120（左结合）：<code>&amp;&amp;</code>（逻辑与）</li>\n<li>110（左结合）：<code>||</code>（逻辑或）</li>\n<li>100（右结合）：<code>? :</code> （三元条件）</li>\n<li>90（右结合）：<code>=</code>  <code>*=</code>  <code>/=</code>  <code>%=</code>  <code>+=</code>  <code>-=</code>  <code>&lt;&lt;=</code>  <code>&gt;&gt;=</code>  <code>&amp;=</code>  <code>|=</code>  <code>^=</code>  <code>&amp;&amp;=</code>  <code>||=</code></li>\n</ul>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>本篇介绍Swift的基础知识：高级运算符，包括位运算符，溢出运算符和运算符重载与自定义。</p>","more":"<p><strong>Title: <a href=\"https://aidaizyy.github.io/swift_13\" target=\"_blank\" rel=\"external\">Swift基础入门(13)：高级操作符</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#x6d;&#x61;&#x69;&#x6c;&#x74;&#111;&#x3a;&#97;&#x69;&#x64;&#x61;&#105;&#122;&#x79;&#121;&#64;&#x67;&#109;&#97;&#105;&#108;&#46;&#x63;&#111;&#x6d;\">&#97;&#x69;&#x64;&#x61;&#105;&#122;&#x79;&#121;&#64;&#x67;&#109;&#97;&#105;&#108;&#46;&#x63;&#111;&#x6d;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-07-28</a></strong></p>\n<h1 id=\"高级操作符\"><a href=\"#高级操作符\" class=\"headerlink\" title=\"高级操作符\"></a>高级操作符</h1><h2 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h2><p>Swift中位运算符和C语言基本一致，不再详细介绍。</p>\n<ul>\n<li>~：取反</li>\n<li>&amp;：与</li>\n<li>|：或</li>\n<li>^：异或</li>\n<li>&lt;&lt;：左移</li>\n<li>>>：右移<br>左移右移同样分逻辑移位和算术移位</li>\n</ul>\n<h2 id=\"溢出运算符\"><a href=\"#溢出运算符\" class=\"headerlink\" title=\"溢出运算符\"></a>溢出运算符</h2><p>Swift默认不能溢出，如果故意要溢出必须采用溢出运算。</p>\n<ul>\n<li>&amp;+：溢出加法</li>\n<li>&amp;-：溢出减法</li>\n<li>&amp;*：溢出乘法</li>\n<li>&amp;/：溢出除法</li>\n<li>&amp;%：溢出求余<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> willOverflow = <span class=\"type\">UInt8</span>.<span class=\"built_in\">max</span></div><div class=\"line\"><span class=\"comment\">// willOverflow 等于UInt8的最大整数 255</span></div><div class=\"line\">willOverflow = willOverflow &amp;+ <span class=\"number\">1</span></div><div class=\"line\"><span class=\"comment\">// 此时 willOverflow 等于 0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> willUnderflow = <span class=\"type\">UInt8</span>.<span class=\"built_in\">min</span></div><div class=\"line\"><span class=\"comment\">// willUnderflow 等于UInt8的最小值0</span></div><div class=\"line\">willUnderflow = willUnderflow &amp;- <span class=\"number\">1</span></div><div class=\"line\"><span class=\"comment\">// 此时 willUnderflow 等于 255</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> signedUnderflow = <span class=\"type\">Int8</span>.<span class=\"built_in\">min</span></div><div class=\"line\"><span class=\"comment\">// signedUnderflow 等于最小的有符整数 -128</span></div><div class=\"line\">signedUnderflow = signedUnderflow &amp;- <span class=\"number\">1</span></div><div class=\"line\"><span class=\"comment\">// 此时 signedUnderflow 等于 127</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> x = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">let</span> y = x &amp;/ <span class=\"number\">0</span></div><div class=\"line\"><span class=\"comment\">// y 等于 0</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>不一样的地方在于：一个数除以0或者对0求余数，即<code>i / 0</code>或者<code>i % 0</code>，其他默认会溢出的语言会报错。但是Swift的<code>i &amp;/ 0</code>和<code>i &amp;% 0</code>溢出运算会让结果都等于0。</p>\n<h2 id=\"运算符函数\"><a href=\"#运算符函数\" class=\"headerlink\" title=\"运算符函数\"></a>运算符函数</h2><p>对运算符重载，让已有的运算符，如<code>+</code>，<code>-</code>等基本运算符能对自定义的类和结构体进行运算。</p>\n<ul>\n<li>@infix：中置运算符</li>\n<li>@prefix：前置运算符</li>\n<li>@postfix：后置运算符</li>\n<li>@assignment：组合赋值运算符<br>下面对<code>+</code>进行重载，函数传入了两个参数，表示双目运算符，有两个操作数。<br>函数前加上关键字<code>@infix</code>，表示<code>+</code>作为中置运算符，放在两个操作数的中间。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Vector2D</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">0.0</span>, y = <span class=\"number\">0.0</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@infix</span> <span class=\"function\"><span class=\"keyword\">func</span> + <span class=\"params\">(<span class=\"keyword\">left</span>: Vector2D, <span class=\"keyword\">right</span>: Vector2D)</span></span> -&gt; <span class=\"type\">Vector2D</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Vector2D</span>(x: <span class=\"keyword\">left</span>.x + <span class=\"keyword\">right</span>.x, y: <span class=\"keyword\">left</span>.y + <span class=\"keyword\">right</span>.y)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> vector = <span class=\"type\">Vector2D</span>(x: <span class=\"number\">3.0</span>, y: <span class=\"number\">1.0</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> anotherVector = <span class=\"type\">Vector2D</span>(x: <span class=\"number\">2.0</span>, y: <span class=\"number\">4.0</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> combinedVector = vector + anotherVector</div><div class=\"line\"><span class=\"comment\">// combinedVector 是一个新的Vector2D, 值为 (5.0, 5.0)</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>前置和后置运算分别加上关键字<code>@prefix</code>和<code>@postfix</code>，表示把运算符放在操作数前面或后面。<br>函数只传入一个参数，表示弹幕运算符，只有一个操作数。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@prefix</span> <span class=\"function\"><span class=\"keyword\">func</span> - <span class=\"params\">(vector: Vector2D)</span></span> -&gt; <span class=\"type\">Vector2D</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Vector2D</span>(x: -vector.x, y: -vector.y)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> positive = <span class=\"type\">Vector2D</span>(x: <span class=\"number\">3.0</span>, y: <span class=\"number\">4.0</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> negative = -positive</div><div class=\"line\"><span class=\"comment\">// negative 为 (-3.0, -4.0)</span></div><div class=\"line\"><span class=\"keyword\">let</span> alsoPositive = -negative</div><div class=\"line\"><span class=\"comment\">// alsoPositive 为 (3.0, 4.0)</span></div></pre></td></tr></table></figure></p>\n<p>如果我们要重载<code>+=</code>，<code>-=</code>等运算符加上赋值符的组合赋值运算符，需要使用<code>@assignment</code>关键字。也可以和前置后置组合起来，形成<code>@prefix @assignment</code>或<code>@postfix @assignment</code>。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">@assignment <span class=\"function\"><span class=\"keyword\">func</span> += <span class=\"params\">(<span class=\"keyword\">inout</span> <span class=\"keyword\">left</span>: Vector2D, <span class=\"keyword\">right</span>: Vector2D)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">left</span> = <span class=\"keyword\">left</span> + <span class=\"keyword\">right</span>\t\t<span class=\"comment\">//`+`在前面的例子中已经定义过了</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> original = <span class=\"type\">Vector2D</span>(x: <span class=\"number\">1.0</span>, y: <span class=\"number\">2.0</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> vectorToAdd = <span class=\"type\">Vector2D</span>(x: <span class=\"number\">3.0</span>, y: <span class=\"number\">4.0</span>)</div><div class=\"line\">original += vectorToAdd</div><div class=\"line\"><span class=\"comment\">// original 现在为 (4.0, 6.0)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@prefix</span> @assignment <span class=\"function\"><span class=\"keyword\">func</span> ++ <span class=\"params\">(<span class=\"keyword\">inout</span> vector: Vector2D)</span></span> -&gt; <span class=\"type\">Vector2D</span> &#123;</div><div class=\"line\">    vector += <span class=\"type\">Vector2D</span>(x: <span class=\"number\">1.0</span>, y: <span class=\"number\">1.0</span>)</div><div class=\"line\">    <span class=\"keyword\">return</span> vector</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> toIncrement = <span class=\"type\">Vector2D</span>(x: <span class=\"number\">3.0</span>, y: <span class=\"number\">4.0</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> afterIncrement = ++toIncrement</div><div class=\"line\"><span class=\"comment\">// toIncrement 现在是 (4.0, 5.0)</span></div><div class=\"line\"><span class=\"comment\">// afterIncrement 现在也是 (4.0, 5.0)</span></div></pre></td></tr></table></figure></p>\n<p>比较运算符重载<code>==</code>和<code>!=</code>类似于其他中置运算符。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@infix</span> <span class=\"function\"><span class=\"keyword\">func</span> == <span class=\"params\">(<span class=\"keyword\">left</span>: Vector2D, <span class=\"keyword\">right</span>: Vector2D)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"keyword\">left</span>.x == <span class=\"keyword\">right</span>.x) &amp;&amp; (<span class=\"keyword\">left</span>.y == <span class=\"keyword\">right</span>.y)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"meta\">@infix</span> <span class=\"function\"><span class=\"keyword\">func</span> != <span class=\"params\">(<span class=\"keyword\">left</span>: Vector2D, <span class=\"keyword\">right</span>: Vector2D)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> !(<span class=\"keyword\">left</span> == <span class=\"keyword\">right</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> twoThree = <span class=\"type\">Vector2D</span>(x: <span class=\"number\">2.0</span>, y: <span class=\"number\">3.0</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> anotherTwoThree = <span class=\"type\">Vector2D</span>(x: <span class=\"number\">2.0</span>, y: <span class=\"number\">3.0</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> twoThree == anotherTwoThree &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"这两个向量是相等的.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// prints \"这两个向量是相等的.\"</span></div></pre></td></tr></table></figure></p>\n<p>但是默认赋值符<code>=</code>和三目条件运算符<code>a?b:c</code>都不可重载。</p>\n<ul>\n<li>自定义运算符<br>除了标准的运算符之外，Swift还规定对只有<code>/ = - + * / &lt; &gt; ! &amp; | ^ . ~</code>这些符号的运算符进行自定义。<br>新的运算符需要在全局域用<code>operator</code>关键字声明，声明为中置，前置或后置。<br>比如<code>operator prefix +++ {}</code>声明了新的前置运算符<code>+++</code>。<br>然后重载实现<code>+++</code>运算符：<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@prefix</span> @assignment <span class=\"function\"><span class=\"keyword\">func</span> +++ <span class=\"params\">(<span class=\"keyword\">inout</span> vector: Vector2D)</span></span> -&gt; <span class=\"type\">Vector2D</span> &#123;</div><div class=\"line\">    vector += vector</div><div class=\"line\">    <span class=\"keyword\">return</span> vector</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> toBeDoubled = <span class=\"type\">Vector2D</span>(x: <span class=\"number\">1.0</span>, y: <span class=\"number\">4.0</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> afterDoubling = +++toBeDoubled</div><div class=\"line\"><span class=\"comment\">// toBeDoubled 现在是 (2.0, 8.0)</span></div><div class=\"line\"><span class=\"comment\">// afterDoubling 现在也是 (2.0, 8.0)</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>还可以为自定义的运算符定义结合性和优先级。<br>结合性<code>associativity</code>后面可以接<code>left</code>（和左边操作数结合），<code>right</code>（和右边操作数结合），<code>none</code>（默认值，不与其他相同优先级的运算符写在一起）。<br>优先级<code>precedence</code>后面接数值表示优先级，默认为<code>100</code>。<br>下面一个例子。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">operator</span> <span class=\"keyword\">infix</span> +- &#123; <span class=\"keyword\">associativity</span> <span class=\"keyword\">left</span> <span class=\"keyword\">precedence</span> <span class=\"number\">140</span> &#125;</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> +- <span class=\"params\">(<span class=\"keyword\">left</span>: Vector2D, <span class=\"keyword\">right</span>: Vector2D)</span></span> -&gt; <span class=\"type\">Vector2D</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"type\">Vector2D</span>(x: <span class=\"keyword\">left</span>.x + <span class=\"keyword\">right</span>.x, y: <span class=\"keyword\">left</span>.y - <span class=\"keyword\">right</span>.y)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> firstVector = <span class=\"type\">Vector2D</span>(x: <span class=\"number\">1.0</span>, y: <span class=\"number\">2.0</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> secondVector = <span class=\"type\">Vector2D</span>(x: <span class=\"number\">3.0</span>, y: <span class=\"number\">4.0</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> plusMinusVector = firstVector +- secondVector</div><div class=\"line\"><span class=\"comment\">// plusMinusVector 此时的值为 (4.0, -2.0)</span></div></pre></td></tr></table></figure></p>\n<p>自定义运算符优先级默认为100，其他标准运算符优先级从高到低：</p>\n<ul>\n<li>160（无结合）：<code>&lt;&lt;</code>  <code>&gt;&gt;</code></li>\n<li>150（左结合）：<code>*</code>  <code>/</code>  <code>%</code>  <code>&amp;*</code>  <code>&amp;/</code>  <code>&amp;%</code>  <code>&amp;</code>（位与）</li>\n<li>140（左结合）：<code>+</code>  <code>-</code>  <code>&amp;+</code>  <code>&amp;-</code>  <code>|</code>（位或）  <code>^</code>（位异或）</li>\n<li>135（无结合）：<code>..&lt;</code>  <code>...</code></li>\n<li>132（无结合）：<code>is</code>  <code>as</code></li>\n<li>130（无结合）：<code>&lt;</code>  <code>&lt;=</code>  <code>\\&gt;</code>  <code>\\&gt;=</code>  <code>==</code>  <code>!=</code>  <code>===</code>  <code>!==</code>  <code>~=</code>（模式匹配）</li>\n<li>120（左结合）：<code>&amp;&amp;</code>（逻辑与）</li>\n<li>110（左结合）：<code>||</code>（逻辑或）</li>\n<li>100（右结合）：<code>? :</code> （三元条件）</li>\n<li>90（右结合）：<code>=</code>  <code>*=</code>  <code>/=</code>  <code>%=</code>  <code>+=</code>  <code>-=</code>  <code>&lt;&lt;=</code>  <code>&gt;&gt;=</code>  <code>&amp;=</code>  <code>|=</code>  <code>^=</code>  <code>&amp;&amp;=</code>  <code>||=</code></li>\n</ul>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>"},{"title":"Swift基础入门(14)：权限控制","date":"2015-07-29T03:28:32.000Z","toc":false,"_content":"\n本篇介绍Swift的基础知识：权限控制，包括公开访问（_pubilc_），内部访问（_internal_），私有访问（_private_）三种访问方式控制实体访问的权限。\n\n<!--more-->\n**Title: [Swift基础入门(14)：权限控制](https://aidaizyy.github.io/swift_14)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-07-29](http://aidaizyy.github.io)**\n\n# 权限控制\n我们可以给基本类型、常量变量、函数、类、结构体、枚举、属性、方法、下标等等设置访问级别确定访问权限。\n- public：公开访问，实体能够被当前模块（_module_）中的所有源文件访问，也可以被其他引用了该模块的另一个模块中的所有源文件访问。\n- internal：内部访问，实体能够被当前模块中的所有源文件访问，但是不可以被其他引用了该模块的另一个模块中的源文件访问。\n- private：私有访问，实体只能在当前源文件中访问，不能被其他任何源文件访问。\n\n默认的权限为`internal`，`public`和`private`必须指定。\n\n对于属性，可以设置取值权限比赋值权限更加开放，即getter的权限比setter高。\n比如下面的例子，用`private(set)`把属性的setter权限设置为私有访问，而getter的权限仍然为默认的`internal`内部访问。\n``` swift\n    public class ListItem {\n\n    // ListItem这个类，有两个公开的属性\n    public var text: String\n    public var isComplete: Bool\n\n    // 下面的代码表示把变量UUID的赋值权限设为private，对整个app可读，但值只能在本文件里写入\n    private(set) var UUID: NSUUID\n\n    public init(text: String, completed: Bool, UUID: NSUUID) {\n        self.text = text\n        self.isComplete = completed\n        self.UUID = UUID\n    }\n\n    // 这段没有特别标记权限，因此属于默认的internal级别。在框架目标内可用，但对于其他目标不可用\n    func refreshIdentity() {\n        self.UUID = NSUUID()\n    }\n\n    public override func isEqual(object: AnyObject?) -> Bool {\n        if let item = object as? ListItem {\n            return self.UUID == item.UUID\n        }\n        return false\n        }\n    }\n```\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" > <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","source":"_posts/swift_14.md","raw":"title: \"Swift基础入门(14)：权限控制\"\ndate: 2015-07-29 11:28:32\ntags:\n- swift\ncategories: swift\ntoc: false\n---\n\n本篇介绍Swift的基础知识：权限控制，包括公开访问（_pubilc_），内部访问（_internal_），私有访问（_private_）三种访问方式控制实体访问的权限。\n\n<!--more-->\n**Title: [Swift基础入门(14)：权限控制](https://aidaizyy.github.io/swift_14)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-07-29](http://aidaizyy.github.io)**\n\n# 权限控制\n我们可以给基本类型、常量变量、函数、类、结构体、枚举、属性、方法、下标等等设置访问级别确定访问权限。\n- public：公开访问，实体能够被当前模块（_module_）中的所有源文件访问，也可以被其他引用了该模块的另一个模块中的所有源文件访问。\n- internal：内部访问，实体能够被当前模块中的所有源文件访问，但是不可以被其他引用了该模块的另一个模块中的源文件访问。\n- private：私有访问，实体只能在当前源文件中访问，不能被其他任何源文件访问。\n\n默认的权限为`internal`，`public`和`private`必须指定。\n\n对于属性，可以设置取值权限比赋值权限更加开放，即getter的权限比setter高。\n比如下面的例子，用`private(set)`把属性的setter权限设置为私有访问，而getter的权限仍然为默认的`internal`内部访问。\n``` swift\n    public class ListItem {\n\n    // ListItem这个类，有两个公开的属性\n    public var text: String\n    public var isComplete: Bool\n\n    // 下面的代码表示把变量UUID的赋值权限设为private，对整个app可读，但值只能在本文件里写入\n    private(set) var UUID: NSUUID\n\n    public init(text: String, completed: Bool, UUID: NSUUID) {\n        self.text = text\n        self.isComplete = completed\n        self.UUID = UUID\n    }\n\n    // 这段没有特别标记权限，因此属于默认的internal级别。在框架目标内可用，但对于其他目标不可用\n    func refreshIdentity() {\n        self.UUID = NSUUID()\n    }\n\n    public override func isEqual(object: AnyObject?) -> Bool {\n        if let item = object as? ListItem {\n            return self.UUID == item.UUID\n        }\n        return false\n        }\n    }\n```\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" > <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","slug":"swift_14","published":1,"updated":"2017-05-08T16:40:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2gdu6kk0012v1o3vjp6bpk0","content":"<p>本篇介绍Swift的基础知识：权限控制，包括公开访问（<em>pubilc</em>），内部访问（<em>internal</em>），私有访问（<em>private</em>）三种访问方式控制实体访问的权限。</p>\n<a id=\"more\"></a>\n<p><strong>Title: <a href=\"https://aidaizyy.github.io/swift_14\" target=\"_blank\" rel=\"external\">Swift基础入门(14)：权限控制</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#x6d;&#x61;&#105;&#x6c;&#x74;&#x6f;&#58;&#97;&#105;&#x64;&#97;&#x69;&#122;&#121;&#121;&#x40;&#103;&#x6d;&#97;&#105;&#108;&#x2e;&#99;&#x6f;&#x6d;\">&#97;&#105;&#x64;&#97;&#x69;&#122;&#121;&#121;&#x40;&#103;&#x6d;&#97;&#105;&#108;&#x2e;&#99;&#x6f;&#x6d;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-07-29</a></strong></p>\n<h1 id=\"权限控制\"><a href=\"#权限控制\" class=\"headerlink\" title=\"权限控制\"></a>权限控制</h1><p>我们可以给基本类型、常量变量、函数、类、结构体、枚举、属性、方法、下标等等设置访问级别确定访问权限。</p>\n<ul>\n<li>public：公开访问，实体能够被当前模块（<em>module</em>）中的所有源文件访问，也可以被其他引用了该模块的另一个模块中的所有源文件访问。</li>\n<li>internal：内部访问，实体能够被当前模块中的所有源文件访问，但是不可以被其他引用了该模块的另一个模块中的源文件访问。</li>\n<li>private：私有访问，实体只能在当前源文件中访问，不能被其他任何源文件访问。</li>\n</ul>\n<p>默认的权限为<code>internal</code>，<code>public</code>和<code>private</code>必须指定。</p>\n<p>对于属性，可以设置取值权限比赋值权限更加开放，即getter的权限比setter高。<br>比如下面的例子，用<code>private(set)</code>把属性的setter权限设置为私有访问，而getter的权限仍然为默认的<code>internal</code>内部访问。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListItem</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ListItem这个类，有两个公开的属性</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">var</span> text: <span class=\"type\">String</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">var</span> isComplete: <span class=\"type\">Bool</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 下面的代码表示把变量UUID的赋值权限设为private，对整个app可读，但值只能在本文件里写入</span></div><div class=\"line\"><span class=\"keyword\">private</span>(<span class=\"keyword\">set</span>) <span class=\"keyword\">var</span> <span class=\"type\">UUID</span>: <span class=\"type\">NSUUID</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">init</span>(text: <span class=\"type\">String</span>, completed: <span class=\"type\">Bool</span>, <span class=\"type\">UUID</span>: <span class=\"type\">NSUUID</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.text = text</div><div class=\"line\">    <span class=\"keyword\">self</span>.isComplete = completed</div><div class=\"line\">    <span class=\"keyword\">self</span>.<span class=\"type\">UUID</span> = <span class=\"type\">UUID</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 这段没有特别标记权限，因此属于默认的internal级别。在框架目标内可用，但对于其他目标不可用</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">refreshIdentity</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.<span class=\"type\">UUID</span> = <span class=\"type\">NSUUID</span>()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">isEqual</span><span class=\"params\">(object: AnyObject?)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> item = object <span class=\"keyword\">as</span>? <span class=\"type\">ListItem</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.<span class=\"type\">UUID</span> == item.<span class=\"type\">UUID</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>本篇介绍Swift的基础知识：权限控制，包括公开访问（<em>pubilc</em>），内部访问（<em>internal</em>），私有访问（<em>private</em>）三种访问方式控制实体访问的权限。</p>","more":"<p><strong>Title: <a href=\"https://aidaizyy.github.io/swift_14\" target=\"_blank\" rel=\"external\">Swift基础入门(14)：权限控制</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#x6d;&#x61;&#105;&#x6c;&#x74;&#x6f;&#58;&#97;&#105;&#x64;&#97;&#x69;&#122;&#121;&#121;&#x40;&#103;&#x6d;&#97;&#105;&#108;&#x2e;&#99;&#x6f;&#x6d;\">&#97;&#105;&#x64;&#97;&#x69;&#122;&#121;&#121;&#x40;&#103;&#x6d;&#97;&#105;&#108;&#x2e;&#99;&#x6f;&#x6d;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-07-29</a></strong></p>\n<h1 id=\"权限控制\"><a href=\"#权限控制\" class=\"headerlink\" title=\"权限控制\"></a>权限控制</h1><p>我们可以给基本类型、常量变量、函数、类、结构体、枚举、属性、方法、下标等等设置访问级别确定访问权限。</p>\n<ul>\n<li>public：公开访问，实体能够被当前模块（<em>module</em>）中的所有源文件访问，也可以被其他引用了该模块的另一个模块中的所有源文件访问。</li>\n<li>internal：内部访问，实体能够被当前模块中的所有源文件访问，但是不可以被其他引用了该模块的另一个模块中的源文件访问。</li>\n<li>private：私有访问，实体只能在当前源文件中访问，不能被其他任何源文件访问。</li>\n</ul>\n<p>默认的权限为<code>internal</code>，<code>public</code>和<code>private</code>必须指定。</p>\n<p>对于属性，可以设置取值权限比赋值权限更加开放，即getter的权限比setter高。<br>比如下面的例子，用<code>private(set)</code>把属性的setter权限设置为私有访问，而getter的权限仍然为默认的<code>internal</code>内部访问。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ListItem</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// ListItem这个类，有两个公开的属性</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">var</span> text: <span class=\"type\">String</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">var</span> isComplete: <span class=\"type\">Bool</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 下面的代码表示把变量UUID的赋值权限设为private，对整个app可读，但值只能在本文件里写入</span></div><div class=\"line\"><span class=\"keyword\">private</span>(<span class=\"keyword\">set</span>) <span class=\"keyword\">var</span> <span class=\"type\">UUID</span>: <span class=\"type\">NSUUID</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">init</span>(text: <span class=\"type\">String</span>, completed: <span class=\"type\">Bool</span>, <span class=\"type\">UUID</span>: <span class=\"type\">NSUUID</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.text = text</div><div class=\"line\">    <span class=\"keyword\">self</span>.isComplete = completed</div><div class=\"line\">    <span class=\"keyword\">self</span>.<span class=\"type\">UUID</span> = <span class=\"type\">UUID</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// 这段没有特别标记权限，因此属于默认的internal级别。在框架目标内可用，但对于其他目标不可用</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">refreshIdentity</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">self</span>.<span class=\"type\">UUID</span> = <span class=\"type\">NSUUID</span>()</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">isEqual</span><span class=\"params\">(object: AnyObject?)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> item = object <span class=\"keyword\">as</span>? <span class=\"type\">ListItem</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">self</span>.<span class=\"type\">UUID</span> == item.<span class=\"type\">UUID</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>"},{"title":"Swift基础入门(2)：字符串和字符","date":"2015-07-15T06:09:04.000Z","toc":true,"_content":"\n本篇介绍Swift的基础知识：字符串和字符。\n\n<!--more-->\n**Title: [Swift基础入门(2)：字符串和字符](https://aidaizyy.github.io/swift_2)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-07-15](http://aidaizyy.github.io)**\n\n## 字符串和字符\n\n### 空字符串\n``` swift\nvar str1 = \"\"\nvar str2 = String()\n\nif str1.isEmpty {\n\t//空字符串\n}\n```\n两条语句等价，都表示空字符串。\n`String`的`isEmpty`属性表示`String`是否为空，结果为`Bool`值。\n\n### 值传递\n在函数/方法中传递的是字符串的值，不会改变字符串本身。\n\n### 遍历\n``` swift\nfor character in \"Dog!\" {\n    println(character)\n}\n// D\n// o\n// g\n// !\n```\n`for-in`：`for characte in \"Hello World!\"`将会遍历字符串`\"Hello World!\"`的每个字符，并用`character: Character`来表示。\n\n### 长度\n`count(String)`函数，得到字符串的字符数量。\n\n### 连接\n- +, +=：连接字符串\n- String.append(Character)：将字符连接到字符串尾部。\n\n### 比较\n- ==：字符串相等\n- String1.hasPrefix(String2)：是否有特定前缀。如果`String1`包含前缀`String2`返回`true`，否则返回`false`。\n- String1.hasSuffix(String2)：是否有特定后缀。如果`String1`包含后缀`String2`返回`true`，否则返回`false`。\n\n### 大小写\n``` swift\nlet normal = \"Could you help me, please?\"\nlet shouty = normal.uppercaseString\n// shouty 值为 \"COULD YOU HELP ME, PLEASE?\"\nlet whispered = normal.lowercaseString\n// whispered 值为 \"could you help me, please?\"\n```\nString.uppercaseString属性表示字符串的大写，String.lowercaseString属性表示字符串的小写。\n\n## Unicode\n\nUnicode字符用`\\u{n}`表示，其中`n`为任意的一到八位十六进制数。\n\n>String：\n属性：\nString.isEmpty\nString.uppercaseString\nString.lowercaseString\nString.utf8\nString.utf16\nString.unicodeScalars\n方法：\nString.append()\nString.hasPrefix()\nString.hasSuffix()\ncount(String)\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","source":"_posts/swift_2.md","raw":"title: \"Swift基础入门(2)：字符串和字符\"\ndate: 2015-07-15 14:09:04\ntags:\n- swift\ncategories: swift\ntoc: true\n---\n\n本篇介绍Swift的基础知识：字符串和字符。\n\n<!--more-->\n**Title: [Swift基础入门(2)：字符串和字符](https://aidaizyy.github.io/swift_2)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-07-15](http://aidaizyy.github.io)**\n\n## 字符串和字符\n\n### 空字符串\n``` swift\nvar str1 = \"\"\nvar str2 = String()\n\nif str1.isEmpty {\n\t//空字符串\n}\n```\n两条语句等价，都表示空字符串。\n`String`的`isEmpty`属性表示`String`是否为空，结果为`Bool`值。\n\n### 值传递\n在函数/方法中传递的是字符串的值，不会改变字符串本身。\n\n### 遍历\n``` swift\nfor character in \"Dog!\" {\n    println(character)\n}\n// D\n// o\n// g\n// !\n```\n`for-in`：`for characte in \"Hello World!\"`将会遍历字符串`\"Hello World!\"`的每个字符，并用`character: Character`来表示。\n\n### 长度\n`count(String)`函数，得到字符串的字符数量。\n\n### 连接\n- +, +=：连接字符串\n- String.append(Character)：将字符连接到字符串尾部。\n\n### 比较\n- ==：字符串相等\n- String1.hasPrefix(String2)：是否有特定前缀。如果`String1`包含前缀`String2`返回`true`，否则返回`false`。\n- String1.hasSuffix(String2)：是否有特定后缀。如果`String1`包含后缀`String2`返回`true`，否则返回`false`。\n\n### 大小写\n``` swift\nlet normal = \"Could you help me, please?\"\nlet shouty = normal.uppercaseString\n// shouty 值为 \"COULD YOU HELP ME, PLEASE?\"\nlet whispered = normal.lowercaseString\n// whispered 值为 \"could you help me, please?\"\n```\nString.uppercaseString属性表示字符串的大写，String.lowercaseString属性表示字符串的小写。\n\n## Unicode\n\nUnicode字符用`\\u{n}`表示，其中`n`为任意的一到八位十六进制数。\n\n>String：\n属性：\nString.isEmpty\nString.uppercaseString\nString.lowercaseString\nString.utf8\nString.utf16\nString.unicodeScalars\n方法：\nString.append()\nString.hasPrefix()\nString.hasSuffix()\ncount(String)\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","slug":"swift_2","published":1,"updated":"2017-05-08T16:40:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2gdu6kn0014v1o3byp9vuph","content":"<p>本篇介绍Swift的基础知识：字符串和字符。</p>\n<a id=\"more\"></a>\n<p><strong>Title: <a href=\"https://aidaizyy.github.io/swift_2\" target=\"_blank\" rel=\"external\">Swift基础入门(2)：字符串和字符</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#x6d;&#x61;&#105;&#108;&#116;&#x6f;&#58;&#97;&#x69;&#100;&#x61;&#x69;&#x7a;&#121;&#121;&#x40;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#46;&#99;&#x6f;&#x6d;\">&#97;&#x69;&#100;&#x61;&#x69;&#x7a;&#121;&#121;&#x40;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#46;&#99;&#x6f;&#x6d;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-07-15</a></strong></p>\n<h2 id=\"字符串和字符\"><a href=\"#字符串和字符\" class=\"headerlink\" title=\"字符串和字符\"></a>字符串和字符</h2><h3 id=\"空字符串\"><a href=\"#空字符串\" class=\"headerlink\" title=\"空字符串\"></a>空字符串</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">\"\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"type\">String</span>()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> str1.isEmpty &#123;</div><div class=\"line\">\t<span class=\"comment\">//空字符串</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>两条语句等价，都表示空字符串。<br><code>String</code>的<code>isEmpty</code>属性表示<code>String</code>是否为空，结果为<code>Bool</code>值。</p>\n<h3 id=\"值传递\"><a href=\"#值传递\" class=\"headerlink\" title=\"值传递\"></a>值传递</h3><p>在函数/方法中传递的是字符串的值，不会改变字符串本身。</p>\n<h3 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> character <span class=\"keyword\">in</span> <span class=\"string\">\"Dog!\"</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(character)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// D</span></div><div class=\"line\"><span class=\"comment\">// o</span></div><div class=\"line\"><span class=\"comment\">// g</span></div><div class=\"line\"><span class=\"comment\">// !</span></div></pre></td></tr></table></figure>\n<p><code>for-in</code>：<code>for characte in &quot;Hello World!&quot;</code>将会遍历字符串<code>&quot;Hello World!&quot;</code>的每个字符，并用<code>character: Character</code>来表示。</p>\n<h3 id=\"长度\"><a href=\"#长度\" class=\"headerlink\" title=\"长度\"></a>长度</h3><p><code>count(String)</code>函数，得到字符串的字符数量。</p>\n<h3 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h3><ul>\n<li>+, +=：连接字符串</li>\n<li>String.append(Character)：将字符连接到字符串尾部。</li>\n</ul>\n<h3 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h3><ul>\n<li>==：字符串相等</li>\n<li>String1.hasPrefix(String2)：是否有特定前缀。如果<code>String1</code>包含前缀<code>String2</code>返回<code>true</code>，否则返回<code>false</code>。</li>\n<li>String1.hasSuffix(String2)：是否有特定后缀。如果<code>String1</code>包含后缀<code>String2</code>返回<code>true</code>，否则返回<code>false</code>。</li>\n</ul>\n<h3 id=\"大小写\"><a href=\"#大小写\" class=\"headerlink\" title=\"大小写\"></a>大小写</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> normal = <span class=\"string\">\"Could you help me, please?\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> shouty = normal.uppercaseString</div><div class=\"line\"><span class=\"comment\">// shouty 值为 \"COULD YOU HELP ME, PLEASE?\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> whispered = normal.lowercaseString</div><div class=\"line\"><span class=\"comment\">// whispered 值为 \"could you help me, please?\"</span></div></pre></td></tr></table></figure>\n<p>String.uppercaseString属性表示字符串的大写，String.lowercaseString属性表示字符串的小写。</p>\n<h2 id=\"Unicode\"><a href=\"#Unicode\" class=\"headerlink\" title=\"Unicode\"></a>Unicode</h2><p>Unicode字符用<code>\\u{n}</code>表示，其中<code>n</code>为任意的一到八位十六进制数。</p>\n<blockquote>\n<p>String：<br>属性：<br>String.isEmpty<br>String.uppercaseString<br>String.lowercaseString<br>String.utf8<br>String.utf16<br>String.unicodeScalars<br>方法：<br>String.append()<br>String.hasPrefix()<br>String.hasSuffix()<br>count(String)</p>\n</blockquote>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>本篇介绍Swift的基础知识：字符串和字符。</p>","more":"<p><strong>Title: <a href=\"https://aidaizyy.github.io/swift_2\" target=\"_blank\" rel=\"external\">Swift基础入门(2)：字符串和字符</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#x6d;&#x61;&#105;&#108;&#116;&#x6f;&#58;&#97;&#x69;&#100;&#x61;&#x69;&#x7a;&#121;&#121;&#x40;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#46;&#99;&#x6f;&#x6d;\">&#97;&#x69;&#100;&#x61;&#x69;&#x7a;&#121;&#121;&#x40;&#x67;&#x6d;&#x61;&#x69;&#x6c;&#46;&#99;&#x6f;&#x6d;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-07-15</a></strong></p>\n<h2 id=\"字符串和字符\"><a href=\"#字符串和字符\" class=\"headerlink\" title=\"字符串和字符\"></a>字符串和字符</h2><h3 id=\"空字符串\"><a href=\"#空字符串\" class=\"headerlink\" title=\"空字符串\"></a>空字符串</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> str1 = <span class=\"string\">\"\"</span></div><div class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"type\">String</span>()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> str1.isEmpty &#123;</div><div class=\"line\">\t<span class=\"comment\">//空字符串</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>两条语句等价，都表示空字符串。<br><code>String</code>的<code>isEmpty</code>属性表示<code>String</code>是否为空，结果为<code>Bool</code>值。</p>\n<h3 id=\"值传递\"><a href=\"#值传递\" class=\"headerlink\" title=\"值传递\"></a>值传递</h3><p>在函数/方法中传递的是字符串的值，不会改变字符串本身。</p>\n<h3 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> character <span class=\"keyword\">in</span> <span class=\"string\">\"Dog!\"</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(character)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// D</span></div><div class=\"line\"><span class=\"comment\">// o</span></div><div class=\"line\"><span class=\"comment\">// g</span></div><div class=\"line\"><span class=\"comment\">// !</span></div></pre></td></tr></table></figure>\n<p><code>for-in</code>：<code>for characte in &quot;Hello World!&quot;</code>将会遍历字符串<code>&quot;Hello World!&quot;</code>的每个字符，并用<code>character: Character</code>来表示。</p>\n<h3 id=\"长度\"><a href=\"#长度\" class=\"headerlink\" title=\"长度\"></a>长度</h3><p><code>count(String)</code>函数，得到字符串的字符数量。</p>\n<h3 id=\"连接\"><a href=\"#连接\" class=\"headerlink\" title=\"连接\"></a>连接</h3><ul>\n<li>+, +=：连接字符串</li>\n<li>String.append(Character)：将字符连接到字符串尾部。</li>\n</ul>\n<h3 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h3><ul>\n<li>==：字符串相等</li>\n<li>String1.hasPrefix(String2)：是否有特定前缀。如果<code>String1</code>包含前缀<code>String2</code>返回<code>true</code>，否则返回<code>false</code>。</li>\n<li>String1.hasSuffix(String2)：是否有特定后缀。如果<code>String1</code>包含后缀<code>String2</code>返回<code>true</code>，否则返回<code>false</code>。</li>\n</ul>\n<h3 id=\"大小写\"><a href=\"#大小写\" class=\"headerlink\" title=\"大小写\"></a>大小写</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> normal = <span class=\"string\">\"Could you help me, please?\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> shouty = normal.uppercaseString</div><div class=\"line\"><span class=\"comment\">// shouty 值为 \"COULD YOU HELP ME, PLEASE?\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> whispered = normal.lowercaseString</div><div class=\"line\"><span class=\"comment\">// whispered 值为 \"could you help me, please?\"</span></div></pre></td></tr></table></figure>\n<p>String.uppercaseString属性表示字符串的大写，String.lowercaseString属性表示字符串的小写。</p>\n<h2 id=\"Unicode\"><a href=\"#Unicode\" class=\"headerlink\" title=\"Unicode\"></a>Unicode</h2><p>Unicode字符用<code>\\u{n}</code>表示，其中<code>n</code>为任意的一到八位十六进制数。</p>\n<blockquote>\n<p>String：<br>属性：<br>String.isEmpty<br>String.uppercaseString<br>String.lowercaseString<br>String.utf8<br>String.utf16<br>String.unicodeScalars<br>方法：<br>String.append()<br>String.hasPrefix()<br>String.hasSuffix()<br>count(String)</p>\n</blockquote>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>"},{"title":"Swift基础入门(4)：条件与循环语句","date":"2015-07-16T06:36:11.000Z","toc":true,"_content":"\n本篇介绍Swift的基础知识：条件语句和循环语句。\n\n<!--more-->\n**Title: [Swift基础入门(4)：条件与循环语句](https://aidaizyy.github.io/swift_4)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-07-16](http://aidaizyy.github.io)**\n\n# 循环语句\n\n## for-in循环\n``` swift\nfor index in 1...5 {\n\tprintln(index)\n}\n//1\n//2\n//3\n//4\n//5\n```\n`for-in`循环可用于区间。\n``` swift\nvar res = 1\nfor _ in 1...5 {\n\tres *= 2\n\tprintln(res)\n}\n//2\n//4\n//8\n//16\n//32\n```\n如果不需要区间中每项的值，可以用`_`替代。\n`for-in`用于字符串，请见[Swift基础入门(2)](http://aidaizyy.github.io/swift_2)。\n`for-in`用于数组集合字典，请见[Swift基础入门(3)](http://aidaizyy.github.io/swift_3)。\n\n## for循环\n`for`循环和C语言一致，格式为`for initialization; condition; increment { statements }`，区别在于没有括号。\n\n## while循环\n`while`循环和C语言一致，格式为`while condition { statements }`，区别在于没有括号。\n\n## do-while循环\n`do-while`循环和C语言一致，格式为`do { statements } while condition`，区别在于没有括号。\n\n# 条件语句\n\n## if语句\n`if`语句和C语言一直，格式为`if condition { statements } else if condition { statements } else { statesments },区别在于没有括号，`else if`和`else`不是必须存在。\n\n## switch语句\n``` swift\nlet count = 300\nvar naturalCount: String\nswitch count {\ncase 0:\n    naturalCount = \"no\"\ncase 1...3:\n    naturalCount = \"a few\"\ncase 4...9:\n    naturalCount = \"several\"\ncase 10...99:\n    naturalCount = \"tens of\"\ncase 100...999:\n    naturalCount = \"hundreds of\"\ncase 1000...999_999:\n    naturalCount = \"thousands of\"\ndefault:\n    naturalCount = \"millions and millions of\"\n}\nprintln(\"There are \\(naturalCount) stars in the Milky Way.\")\n// 输出 \"There are hundreds of stars in the Milk Way.\"\n```\n在C语言中，通常使用`break`，避免执行了一个`case`语句后继续执行下一个`case`语句。在Swift语言中不需要添加`break`，`switch`语句只执行最前面一个符合条件的`case`语句。\n`case`语句可以接类似于`1...3`的区间。\n`case`语句可以接多个情况，用逗号隔开，`switch value { case value1, value2: statements }`\n\n## 元组\n``` swift\nlet somePoint = (1, 1)\nswitch somePoint {\ncase (0, 0):\n    println(\"(0, 0) is at the origin\")\ncase (_, 0):\n    println(\"(\\(somePoint.0), 0) is on the x-axis\")\ncase (0, _):\n    println(\"(0, \\(somePoint.1)) is on the y-axis\")\ncase (-2...2, -2...2):\n    println(\"(\\(somePoint.0), \\(somePoint.1)) is inside the box\")\ndefault:\n    println(\"(\\(somePoint.0), \\(somePoint.1)) is outside of the box\")\n}\n// 输出 \"(1, 1) is inside the box\"\n``` \n元组也可以用来判断条件，`_`用来匹配所有可能的值，也就是需要忽略的值。\n\n## 值绑定\n``` swift\nlet anotherPoint = (2, 0)\nswitch anotherPoint {\ncase (let x, 0):\n    println(\"on the x-axis with an x value of \\(x)\")\ncase (0, let y):\n    println(\"on the y-axis with a y value of \\(y)\")\ncase let (x, y):\n    println(\"somewhere else at (\\(x), \\(y))\")\n}\n```\n`case`语句中，可以用临时的常量变量去绑定值并使用。\n\n## 额外条件（Where语句）\n``` swift\nlet yetAnotherPoint = (1, -1)\nswitch yetAnotherPoint {\ncase let (x, y) where x == y:\n    println(\"(\\(x), \\(y)) is on the line x == y\")\ncase let (x, y) where x == -y:\n    println(\"(\\(x), \\(y)) is on the line x == -y\")\ncase let (x, y):\n    println(\"(\\(x), \\(y)) is just some arbitrary point\")\n}\n// 输出 \"(1, -1) is on the line x == -y\"\n```\n`case`语句中可以使用`where`语句跟在条件后作为额外的补充条件，需要同时满足两个条件才可以执行。\n\n# 控制转移语句\nSwift一共有四种控制转移语句：\n-continue\n-break\n-fallthrough\n-return\n\n`continue`，`break`和`return`用法和C语言基本一致。\n在`switch`语句中，`continue`和`break`都针对整个`switch`语句，而不是C语言中的一个`case`语句。遇到`break`后直接退出整个`switch`语句，而不是判断下一个`case`，`continue`同理。\n\n## 贯穿语句（Fallthrough语句）\n``` swift\nlet integerToDescribe = 5\nvar description = \"The number \\(integerToDescribe) is\"\nswitch integerToDescribe {\ncase 2, 3, 5, 7, 11, 13, 17, 19:\n    description += \" a prime number, and also\"\n    fallthrough\ndefault:\n    description += \" an integer.\"\n}\nprintln(description)\n// 输出 \"The number 5 is a prime number, and also an integer.\"\n```\nSwift语言不支持在`switch`语句中贯穿多个`case`语句的情况，但有时我们需要这么做。这时我们可以加上关键字`fallthrough`，当遇到`fallthrough`时，就会继续执行下一个`case`语句。\n注意：遇到`fallthrough`时会直接**执行**下一个`case`语句，而不是去**判断**条件。\n\n## 精确控制转移\nSwift语言中可以让`break`和`continue`精确地表示针对哪一个循环或条件语句，这称为带标签的语句（_Labeled Statements_）。\n`label name: while condition { statements }`，之后再执行`break label name`或`continue label name`。 \n``` swift\n//求第一个质数\nloop: for integer in 1...10 {\n    switch integer {\n    case 2, 3, 5, 7, 11, 13, 17, 19:\n        println(\"\\(integer) is a prime number\")\n        break loop\n    default:\n        println(\"\\(integer) is not a prime number\")\n    }\n}\n```\n上面代码中，给`for-in`循环指定了标签`loop`，我们要求得到第一个质数，所以当遇到质数后用`break loop`结束循环。如果不加标签，`break`只能结束`switch`语句，会继续执行循环，不能达到目的。\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","source":"_posts/swift_4.md","raw":"title: \"Swift基础入门(4)：条件与循环语句\"\ndate: 2015-07-16 14:36:11\ntags:\n- swift\ncategories: swift \ntoc: true\n---\n\n本篇介绍Swift的基础知识：条件语句和循环语句。\n\n<!--more-->\n**Title: [Swift基础入门(4)：条件与循环语句](https://aidaizyy.github.io/swift_4)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-07-16](http://aidaizyy.github.io)**\n\n# 循环语句\n\n## for-in循环\n``` swift\nfor index in 1...5 {\n\tprintln(index)\n}\n//1\n//2\n//3\n//4\n//5\n```\n`for-in`循环可用于区间。\n``` swift\nvar res = 1\nfor _ in 1...5 {\n\tres *= 2\n\tprintln(res)\n}\n//2\n//4\n//8\n//16\n//32\n```\n如果不需要区间中每项的值，可以用`_`替代。\n`for-in`用于字符串，请见[Swift基础入门(2)](http://aidaizyy.github.io/swift_2)。\n`for-in`用于数组集合字典，请见[Swift基础入门(3)](http://aidaizyy.github.io/swift_3)。\n\n## for循环\n`for`循环和C语言一致，格式为`for initialization; condition; increment { statements }`，区别在于没有括号。\n\n## while循环\n`while`循环和C语言一致，格式为`while condition { statements }`，区别在于没有括号。\n\n## do-while循环\n`do-while`循环和C语言一致，格式为`do { statements } while condition`，区别在于没有括号。\n\n# 条件语句\n\n## if语句\n`if`语句和C语言一直，格式为`if condition { statements } else if condition { statements } else { statesments },区别在于没有括号，`else if`和`else`不是必须存在。\n\n## switch语句\n``` swift\nlet count = 300\nvar naturalCount: String\nswitch count {\ncase 0:\n    naturalCount = \"no\"\ncase 1...3:\n    naturalCount = \"a few\"\ncase 4...9:\n    naturalCount = \"several\"\ncase 10...99:\n    naturalCount = \"tens of\"\ncase 100...999:\n    naturalCount = \"hundreds of\"\ncase 1000...999_999:\n    naturalCount = \"thousands of\"\ndefault:\n    naturalCount = \"millions and millions of\"\n}\nprintln(\"There are \\(naturalCount) stars in the Milky Way.\")\n// 输出 \"There are hundreds of stars in the Milk Way.\"\n```\n在C语言中，通常使用`break`，避免执行了一个`case`语句后继续执行下一个`case`语句。在Swift语言中不需要添加`break`，`switch`语句只执行最前面一个符合条件的`case`语句。\n`case`语句可以接类似于`1...3`的区间。\n`case`语句可以接多个情况，用逗号隔开，`switch value { case value1, value2: statements }`\n\n## 元组\n``` swift\nlet somePoint = (1, 1)\nswitch somePoint {\ncase (0, 0):\n    println(\"(0, 0) is at the origin\")\ncase (_, 0):\n    println(\"(\\(somePoint.0), 0) is on the x-axis\")\ncase (0, _):\n    println(\"(0, \\(somePoint.1)) is on the y-axis\")\ncase (-2...2, -2...2):\n    println(\"(\\(somePoint.0), \\(somePoint.1)) is inside the box\")\ndefault:\n    println(\"(\\(somePoint.0), \\(somePoint.1)) is outside of the box\")\n}\n// 输出 \"(1, 1) is inside the box\"\n``` \n元组也可以用来判断条件，`_`用来匹配所有可能的值，也就是需要忽略的值。\n\n## 值绑定\n``` swift\nlet anotherPoint = (2, 0)\nswitch anotherPoint {\ncase (let x, 0):\n    println(\"on the x-axis with an x value of \\(x)\")\ncase (0, let y):\n    println(\"on the y-axis with a y value of \\(y)\")\ncase let (x, y):\n    println(\"somewhere else at (\\(x), \\(y))\")\n}\n```\n`case`语句中，可以用临时的常量变量去绑定值并使用。\n\n## 额外条件（Where语句）\n``` swift\nlet yetAnotherPoint = (1, -1)\nswitch yetAnotherPoint {\ncase let (x, y) where x == y:\n    println(\"(\\(x), \\(y)) is on the line x == y\")\ncase let (x, y) where x == -y:\n    println(\"(\\(x), \\(y)) is on the line x == -y\")\ncase let (x, y):\n    println(\"(\\(x), \\(y)) is just some arbitrary point\")\n}\n// 输出 \"(1, -1) is on the line x == -y\"\n```\n`case`语句中可以使用`where`语句跟在条件后作为额外的补充条件，需要同时满足两个条件才可以执行。\n\n# 控制转移语句\nSwift一共有四种控制转移语句：\n-continue\n-break\n-fallthrough\n-return\n\n`continue`，`break`和`return`用法和C语言基本一致。\n在`switch`语句中，`continue`和`break`都针对整个`switch`语句，而不是C语言中的一个`case`语句。遇到`break`后直接退出整个`switch`语句，而不是判断下一个`case`，`continue`同理。\n\n## 贯穿语句（Fallthrough语句）\n``` swift\nlet integerToDescribe = 5\nvar description = \"The number \\(integerToDescribe) is\"\nswitch integerToDescribe {\ncase 2, 3, 5, 7, 11, 13, 17, 19:\n    description += \" a prime number, and also\"\n    fallthrough\ndefault:\n    description += \" an integer.\"\n}\nprintln(description)\n// 输出 \"The number 5 is a prime number, and also an integer.\"\n```\nSwift语言不支持在`switch`语句中贯穿多个`case`语句的情况，但有时我们需要这么做。这时我们可以加上关键字`fallthrough`，当遇到`fallthrough`时，就会继续执行下一个`case`语句。\n注意：遇到`fallthrough`时会直接**执行**下一个`case`语句，而不是去**判断**条件。\n\n## 精确控制转移\nSwift语言中可以让`break`和`continue`精确地表示针对哪一个循环或条件语句，这称为带标签的语句（_Labeled Statements_）。\n`label name: while condition { statements }`，之后再执行`break label name`或`continue label name`。 \n``` swift\n//求第一个质数\nloop: for integer in 1...10 {\n    switch integer {\n    case 2, 3, 5, 7, 11, 13, 17, 19:\n        println(\"\\(integer) is a prime number\")\n        break loop\n    default:\n        println(\"\\(integer) is not a prime number\")\n    }\n}\n```\n上面代码中，给`for-in`循环指定了标签`loop`，我们要求得到第一个质数，所以当遇到质数后用`break loop`结束循环。如果不加标签，`break`只能结束`switch`语句，会继续执行循环，不能达到目的。\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","slug":"swift_4","published":1,"updated":"2017-05-08T16:40:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2gdu6kr0018v1o3baawrq14","content":"<p>本篇介绍Swift的基础知识：条件语句和循环语句。</p>\n<a id=\"more\"></a>\n<p><strong>Title: <a href=\"https://aidaizyy.github.io/swift_4\" target=\"_blank\" rel=\"external\">Swift基础入门(4)：条件与循环语句</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#x6d;&#97;&#x69;&#x6c;&#116;&#111;&#58;&#97;&#x69;&#x64;&#x61;&#105;&#x7a;&#121;&#121;&#64;&#x67;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;\">&#97;&#x69;&#x64;&#x61;&#105;&#x7a;&#121;&#121;&#64;&#x67;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-07-16</a></strong></p>\n<h1 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h1><h2 id=\"for-in循环\"><a href=\"#for-in循环\" class=\"headerlink\" title=\"for-in循环\"></a>for-in循环</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> <span class=\"number\">1</span>...<span class=\"number\">5</span> &#123;</div><div class=\"line\">\t<span class=\"built_in\">println</span>(index)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//1</span></div><div class=\"line\"><span class=\"comment\">//2</span></div><div class=\"line\"><span class=\"comment\">//3</span></div><div class=\"line\"><span class=\"comment\">//4</span></div><div class=\"line\"><span class=\"comment\">//5</span></div></pre></td></tr></table></figure>\n<p><code>for-in</code>循环可用于区间。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> res = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span>...<span class=\"number\">5</span> &#123;</div><div class=\"line\">\tres *= <span class=\"number\">2</span></div><div class=\"line\">\t<span class=\"built_in\">println</span>(res)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//2</span></div><div class=\"line\"><span class=\"comment\">//4</span></div><div class=\"line\"><span class=\"comment\">//8</span></div><div class=\"line\"><span class=\"comment\">//16</span></div><div class=\"line\"><span class=\"comment\">//32</span></div></pre></td></tr></table></figure></p>\n<p>如果不需要区间中每项的值，可以用<code>_</code>替代。<br><code>for-in</code>用于字符串，请见<a href=\"http://aidaizyy.github.io/swift_2\" target=\"_blank\" rel=\"external\">Swift基础入门(2)</a>。<br><code>for-in</code>用于数组集合字典，请见<a href=\"http://aidaizyy.github.io/swift_3\" target=\"_blank\" rel=\"external\">Swift基础入门(3)</a>。</p>\n<h2 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h2><p><code>for</code>循环和C语言一致，格式为<code>for initialization; condition; increment { statements }</code>，区别在于没有括号。</p>\n<h2 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h2><p><code>while</code>循环和C语言一致，格式为<code>while condition { statements }</code>，区别在于没有括号。</p>\n<h2 id=\"do-while循环\"><a href=\"#do-while循环\" class=\"headerlink\" title=\"do-while循环\"></a>do-while循环</h2><p><code>do-while</code>循环和C语言一致，格式为<code>do { statements } while condition</code>，区别在于没有括号。</p>\n<h1 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h1><h2 id=\"if语句\"><a href=\"#if语句\" class=\"headerlink\" title=\"if语句\"></a>if语句</h2><p><code>if</code>语句和C语言一直，格式为<code>if condition { statements } else if condition { statements } else { statesments },区别在于没有括号，</code>else if<code>和</code>else`不是必须存在。</p>\n<h2 id=\"switch语句\"><a href=\"#switch语句\" class=\"headerlink\" title=\"switch语句\"></a>switch语句</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"built_in\">count</span> = <span class=\"number\">300</span></div><div class=\"line\"><span class=\"keyword\">var</span> naturalCount: <span class=\"type\">String</span></div><div class=\"line\"><span class=\"keyword\">switch</span> <span class=\"built_in\">count</span> &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">    naturalCount = <span class=\"string\">\"no\"</span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">1</span>...<span class=\"number\">3</span>:</div><div class=\"line\">    naturalCount = <span class=\"string\">\"a few\"</span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">4</span>...<span class=\"number\">9</span>:</div><div class=\"line\">    naturalCount = <span class=\"string\">\"several\"</span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">10</span>...<span class=\"number\">99</span>:</div><div class=\"line\">    naturalCount = <span class=\"string\">\"tens of\"</span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">100</span>...<span class=\"number\">999</span>:</div><div class=\"line\">    naturalCount = <span class=\"string\">\"hundreds of\"</span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">1000</span>...<span class=\"number\">999_999</span>:</div><div class=\"line\">    naturalCount = <span class=\"string\">\"thousands of\"</span></div><div class=\"line\"><span class=\"keyword\">default</span>:</div><div class=\"line\">    naturalCount = <span class=\"string\">\"millions and millions of\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"There are \\(naturalCount) stars in the Milky Way.\"</span>)</div><div class=\"line\"><span class=\"comment\">// 输出 \"There are hundreds of stars in the Milk Way.\"</span></div></pre></td></tr></table></figure>\n<p>在C语言中，通常使用<code>break</code>，避免执行了一个<code>case</code>语句后继续执行下一个<code>case</code>语句。在Swift语言中不需要添加<code>break</code>，<code>switch</code>语句只执行最前面一个符合条件的<code>case</code>语句。<br><code>case</code>语句可以接类似于<code>1...3</code>的区间。<br><code>case</code>语句可以接多个情况，用逗号隔开，<code>switch value { case value1, value2: statements }</code></p>\n<h2 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> somePoint = (<span class=\"number\">1</span>, <span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"keyword\">switch</span> somePoint &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> (<span class=\"number\">0</span>, <span class=\"number\">0</span>):</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"(0, 0) is at the origin\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> (<span class=\"number\">_</span>, <span class=\"number\">0</span>):</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"(\\(somePoint.0), 0) is on the x-axis\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> (<span class=\"number\">0</span>, <span class=\"number\">_</span>):</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"(0, \\(somePoint.1)) is on the y-axis\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> (-<span class=\"number\">2</span>...<span class=\"number\">2</span>, -<span class=\"number\">2</span>...<span class=\"number\">2</span>):</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"(\\(somePoint.0), \\(somePoint.1)) is inside the box\"</span>)</div><div class=\"line\"><span class=\"keyword\">default</span>:</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"(\\(somePoint.0), \\(somePoint.1)) is outside of the box\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"(1, 1) is inside the box\"</span></div><div class=\"line\">``` </div><div class=\"line\">元组也可以用来判断条件，`<span class=\"number\">_</span>`用来匹配所有可能的值，也就是需要忽略的值。</div><div class=\"line\"></div><div class=\"line\">## 值绑定</div><div class=\"line\">``` swift</div><div class=\"line\"><span class=\"keyword\">let</span> anotherPoint = (<span class=\"number\">2</span>, <span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"keyword\">switch</span> anotherPoint &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> (<span class=\"keyword\">let</span> x, <span class=\"number\">0</span>):</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"on the x-axis with an x value of \\(x)\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> (<span class=\"number\">0</span>, <span class=\"keyword\">let</span> y):</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"on the y-axis with a y value of \\(y)\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> (x, y):</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"somewhere else at (\\(x), \\(y))\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>case</code>语句中，可以用临时的常量变量去绑定值并使用。</p>\n<h2 id=\"额外条件（Where语句）\"><a href=\"#额外条件（Where语句）\" class=\"headerlink\" title=\"额外条件（Where语句）\"></a>额外条件（Where语句）</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> yetAnotherPoint = (<span class=\"number\">1</span>, -<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"keyword\">switch</span> yetAnotherPoint &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> (x, y) <span class=\"keyword\">where</span> x == y:</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"(\\(x), \\(y)) is on the line x == y\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> (x, y) <span class=\"keyword\">where</span> x == -y:</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"(\\(x), \\(y)) is on the line x == -y\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> (x, y):</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"(\\(x), \\(y)) is just some arbitrary point\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"(1, -1) is on the line x == -y\"</span></div></pre></td></tr></table></figure>\n<p><code>case</code>语句中可以使用<code>where</code>语句跟在条件后作为额外的补充条件，需要同时满足两个条件才可以执行。</p>\n<h1 id=\"控制转移语句\"><a href=\"#控制转移语句\" class=\"headerlink\" title=\"控制转移语句\"></a>控制转移语句</h1><p>Swift一共有四种控制转移语句：<br>-continue<br>-break<br>-fallthrough<br>-return</p>\n<p><code>continue</code>，<code>break</code>和<code>return</code>用法和C语言基本一致。<br>在<code>switch</code>语句中，<code>continue</code>和<code>break</code>都针对整个<code>switch</code>语句，而不是C语言中的一个<code>case</code>语句。遇到<code>break</code>后直接退出整个<code>switch</code>语句，而不是判断下一个<code>case</code>，<code>continue</code>同理。</p>\n<h2 id=\"贯穿语句（Fallthrough语句）\"><a href=\"#贯穿语句（Fallthrough语句）\" class=\"headerlink\" title=\"贯穿语句（Fallthrough语句）\"></a>贯穿语句（Fallthrough语句）</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> integerToDescribe = <span class=\"number\">5</span></div><div class=\"line\"><span class=\"keyword\">var</span> description = <span class=\"string\">\"The number \\(integerToDescribe) is\"</span></div><div class=\"line\"><span class=\"keyword\">switch</span> integerToDescribe &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">19</span>:</div><div class=\"line\">    description += <span class=\"string\">\" a prime number, and also\"</span></div><div class=\"line\">    <span class=\"keyword\">fallthrough</span></div><div class=\"line\"><span class=\"keyword\">default</span>:</div><div class=\"line\">    description += <span class=\"string\">\" an integer.\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">println</span>(description)</div><div class=\"line\"><span class=\"comment\">// 输出 \"The number 5 is a prime number, and also an integer.\"</span></div></pre></td></tr></table></figure>\n<p>Swift语言不支持在<code>switch</code>语句中贯穿多个<code>case</code>语句的情况，但有时我们需要这么做。这时我们可以加上关键字<code>fallthrough</code>，当遇到<code>fallthrough</code>时，就会继续执行下一个<code>case</code>语句。<br>注意：遇到<code>fallthrough</code>时会直接<strong>执行</strong>下一个<code>case</code>语句，而不是去<strong>判断</strong>条件。</p>\n<h2 id=\"精确控制转移\"><a href=\"#精确控制转移\" class=\"headerlink\" title=\"精确控制转移\"></a>精确控制转移</h2><p>Swift语言中可以让<code>break</code>和<code>continue</code>精确地表示针对哪一个循环或条件语句，这称为带标签的语句（<em>Labeled Statements</em>）。<br><code>label name: while condition { statements }</code>，之后再执行<code>break label name</code>或<code>continue label name</code>。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//求第一个质数</span></div><div class=\"line\">loop: <span class=\"keyword\">for</span> integer <span class=\"keyword\">in</span> <span class=\"number\">1</span>...<span class=\"number\">10</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> integer &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">19</span>:</div><div class=\"line\">        <span class=\"built_in\">println</span>(<span class=\"string\">\"\\(integer) is a prime number\"</span>)</div><div class=\"line\">        <span class=\"keyword\">break</span> loop</div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">        <span class=\"built_in\">println</span>(<span class=\"string\">\"\\(integer) is not a prime number\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面代码中，给<code>for-in</code>循环指定了标签<code>loop</code>，我们要求得到第一个质数，所以当遇到质数后用<code>break loop</code>结束循环。如果不加标签，<code>break</code>只能结束<code>switch</code>语句，会继续执行循环，不能达到目的。</p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>本篇介绍Swift的基础知识：条件语句和循环语句。</p>","more":"<p><strong>Title: <a href=\"https://aidaizyy.github.io/swift_4\" target=\"_blank\" rel=\"external\">Swift基础入门(4)：条件与循环语句</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#x6d;&#97;&#x69;&#x6c;&#116;&#111;&#58;&#97;&#x69;&#x64;&#x61;&#105;&#x7a;&#121;&#121;&#64;&#x67;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;\">&#97;&#x69;&#x64;&#x61;&#105;&#x7a;&#121;&#121;&#64;&#x67;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-07-16</a></strong></p>\n<h1 id=\"循环语句\"><a href=\"#循环语句\" class=\"headerlink\" title=\"循环语句\"></a>循环语句</h1><h2 id=\"for-in循环\"><a href=\"#for-in循环\" class=\"headerlink\" title=\"for-in循环\"></a>for-in循环</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> <span class=\"number\">1</span>...<span class=\"number\">5</span> &#123;</div><div class=\"line\">\t<span class=\"built_in\">println</span>(index)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//1</span></div><div class=\"line\"><span class=\"comment\">//2</span></div><div class=\"line\"><span class=\"comment\">//3</span></div><div class=\"line\"><span class=\"comment\">//4</span></div><div class=\"line\"><span class=\"comment\">//5</span></div></pre></td></tr></table></figure>\n<p><code>for-in</code>循环可用于区间。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> res = <span class=\"number\">1</span></div><div class=\"line\"><span class=\"keyword\">for</span> <span class=\"number\">_</span> <span class=\"keyword\">in</span> <span class=\"number\">1</span>...<span class=\"number\">5</span> &#123;</div><div class=\"line\">\tres *= <span class=\"number\">2</span></div><div class=\"line\">\t<span class=\"built_in\">println</span>(res)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//2</span></div><div class=\"line\"><span class=\"comment\">//4</span></div><div class=\"line\"><span class=\"comment\">//8</span></div><div class=\"line\"><span class=\"comment\">//16</span></div><div class=\"line\"><span class=\"comment\">//32</span></div></pre></td></tr></table></figure></p>\n<p>如果不需要区间中每项的值，可以用<code>_</code>替代。<br><code>for-in</code>用于字符串，请见<a href=\"http://aidaizyy.github.io/swift_2\" target=\"_blank\" rel=\"external\">Swift基础入门(2)</a>。<br><code>for-in</code>用于数组集合字典，请见<a href=\"http://aidaizyy.github.io/swift_3\" target=\"_blank\" rel=\"external\">Swift基础入门(3)</a>。</p>\n<h2 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h2><p><code>for</code>循环和C语言一致，格式为<code>for initialization; condition; increment { statements }</code>，区别在于没有括号。</p>\n<h2 id=\"while循环\"><a href=\"#while循环\" class=\"headerlink\" title=\"while循环\"></a>while循环</h2><p><code>while</code>循环和C语言一致，格式为<code>while condition { statements }</code>，区别在于没有括号。</p>\n<h2 id=\"do-while循环\"><a href=\"#do-while循环\" class=\"headerlink\" title=\"do-while循环\"></a>do-while循环</h2><p><code>do-while</code>循环和C语言一致，格式为<code>do { statements } while condition</code>，区别在于没有括号。</p>\n<h1 id=\"条件语句\"><a href=\"#条件语句\" class=\"headerlink\" title=\"条件语句\"></a>条件语句</h1><h2 id=\"if语句\"><a href=\"#if语句\" class=\"headerlink\" title=\"if语句\"></a>if语句</h2><p><code>if</code>语句和C语言一直，格式为<code>if condition { statements } else if condition { statements } else { statesments },区别在于没有括号，</code>else if<code>和</code>else`不是必须存在。</p>\n<h2 id=\"switch语句\"><a href=\"#switch语句\" class=\"headerlink\" title=\"switch语句\"></a>switch语句</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> <span class=\"built_in\">count</span> = <span class=\"number\">300</span></div><div class=\"line\"><span class=\"keyword\">var</span> naturalCount: <span class=\"type\">String</span></div><div class=\"line\"><span class=\"keyword\">switch</span> <span class=\"built_in\">count</span> &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">0</span>:</div><div class=\"line\">    naturalCount = <span class=\"string\">\"no\"</span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">1</span>...<span class=\"number\">3</span>:</div><div class=\"line\">    naturalCount = <span class=\"string\">\"a few\"</span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">4</span>...<span class=\"number\">9</span>:</div><div class=\"line\">    naturalCount = <span class=\"string\">\"several\"</span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">10</span>...<span class=\"number\">99</span>:</div><div class=\"line\">    naturalCount = <span class=\"string\">\"tens of\"</span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">100</span>...<span class=\"number\">999</span>:</div><div class=\"line\">    naturalCount = <span class=\"string\">\"hundreds of\"</span></div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">1000</span>...<span class=\"number\">999_999</span>:</div><div class=\"line\">    naturalCount = <span class=\"string\">\"thousands of\"</span></div><div class=\"line\"><span class=\"keyword\">default</span>:</div><div class=\"line\">    naturalCount = <span class=\"string\">\"millions and millions of\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"There are \\(naturalCount) stars in the Milky Way.\"</span>)</div><div class=\"line\"><span class=\"comment\">// 输出 \"There are hundreds of stars in the Milk Way.\"</span></div></pre></td></tr></table></figure>\n<p>在C语言中，通常使用<code>break</code>，避免执行了一个<code>case</code>语句后继续执行下一个<code>case</code>语句。在Swift语言中不需要添加<code>break</code>，<code>switch</code>语句只执行最前面一个符合条件的<code>case</code>语句。<br><code>case</code>语句可以接类似于<code>1...3</code>的区间。<br><code>case</code>语句可以接多个情况，用逗号隔开，<code>switch value { case value1, value2: statements }</code></p>\n<h2 id=\"元组\"><a href=\"#元组\" class=\"headerlink\" title=\"元组\"></a>元组</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> somePoint = (<span class=\"number\">1</span>, <span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"keyword\">switch</span> somePoint &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> (<span class=\"number\">0</span>, <span class=\"number\">0</span>):</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"(0, 0) is at the origin\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> (<span class=\"number\">_</span>, <span class=\"number\">0</span>):</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"(\\(somePoint.0), 0) is on the x-axis\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> (<span class=\"number\">0</span>, <span class=\"number\">_</span>):</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"(0, \\(somePoint.1)) is on the y-axis\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> (-<span class=\"number\">2</span>...<span class=\"number\">2</span>, -<span class=\"number\">2</span>...<span class=\"number\">2</span>):</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"(\\(somePoint.0), \\(somePoint.1)) is inside the box\"</span>)</div><div class=\"line\"><span class=\"keyword\">default</span>:</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"(\\(somePoint.0), \\(somePoint.1)) is outside of the box\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"(1, 1) is inside the box\"</span></div><div class=\"line\">``` </div><div class=\"line\">元组也可以用来判断条件，`<span class=\"number\">_</span>`用来匹配所有可能的值，也就是需要忽略的值。</div><div class=\"line\"></div><div class=\"line\">## 值绑定</div><div class=\"line\">``` swift</div><div class=\"line\"><span class=\"keyword\">let</span> anotherPoint = (<span class=\"number\">2</span>, <span class=\"number\">0</span>)</div><div class=\"line\"><span class=\"keyword\">switch</span> anotherPoint &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> (<span class=\"keyword\">let</span> x, <span class=\"number\">0</span>):</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"on the x-axis with an x value of \\(x)\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> (<span class=\"number\">0</span>, <span class=\"keyword\">let</span> y):</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"on the y-axis with a y value of \\(y)\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> (x, y):</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"somewhere else at (\\(x), \\(y))\"</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><code>case</code>语句中，可以用临时的常量变量去绑定值并使用。</p>\n<h2 id=\"额外条件（Where语句）\"><a href=\"#额外条件（Where语句）\" class=\"headerlink\" title=\"额外条件（Where语句）\"></a>额外条件（Where语句）</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> yetAnotherPoint = (<span class=\"number\">1</span>, -<span class=\"number\">1</span>)</div><div class=\"line\"><span class=\"keyword\">switch</span> yetAnotherPoint &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> (x, y) <span class=\"keyword\">where</span> x == y:</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"(\\(x), \\(y)) is on the line x == y\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> (x, y) <span class=\"keyword\">where</span> x == -y:</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"(\\(x), \\(y)) is on the line x == -y\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"keyword\">let</span> (x, y):</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"(\\(x), \\(y)) is just some arbitrary point\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"(1, -1) is on the line x == -y\"</span></div></pre></td></tr></table></figure>\n<p><code>case</code>语句中可以使用<code>where</code>语句跟在条件后作为额外的补充条件，需要同时满足两个条件才可以执行。</p>\n<h1 id=\"控制转移语句\"><a href=\"#控制转移语句\" class=\"headerlink\" title=\"控制转移语句\"></a>控制转移语句</h1><p>Swift一共有四种控制转移语句：<br>-continue<br>-break<br>-fallthrough<br>-return</p>\n<p><code>continue</code>，<code>break</code>和<code>return</code>用法和C语言基本一致。<br>在<code>switch</code>语句中，<code>continue</code>和<code>break</code>都针对整个<code>switch</code>语句，而不是C语言中的一个<code>case</code>语句。遇到<code>break</code>后直接退出整个<code>switch</code>语句，而不是判断下一个<code>case</code>，<code>continue</code>同理。</p>\n<h2 id=\"贯穿语句（Fallthrough语句）\"><a href=\"#贯穿语句（Fallthrough语句）\" class=\"headerlink\" title=\"贯穿语句（Fallthrough语句）\"></a>贯穿语句（Fallthrough语句）</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> integerToDescribe = <span class=\"number\">5</span></div><div class=\"line\"><span class=\"keyword\">var</span> description = <span class=\"string\">\"The number \\(integerToDescribe) is\"</span></div><div class=\"line\"><span class=\"keyword\">switch</span> integerToDescribe &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">19</span>:</div><div class=\"line\">    description += <span class=\"string\">\" a prime number, and also\"</span></div><div class=\"line\">    <span class=\"keyword\">fallthrough</span></div><div class=\"line\"><span class=\"keyword\">default</span>:</div><div class=\"line\">    description += <span class=\"string\">\" an integer.\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">println</span>(description)</div><div class=\"line\"><span class=\"comment\">// 输出 \"The number 5 is a prime number, and also an integer.\"</span></div></pre></td></tr></table></figure>\n<p>Swift语言不支持在<code>switch</code>语句中贯穿多个<code>case</code>语句的情况，但有时我们需要这么做。这时我们可以加上关键字<code>fallthrough</code>，当遇到<code>fallthrough</code>时，就会继续执行下一个<code>case</code>语句。<br>注意：遇到<code>fallthrough</code>时会直接<strong>执行</strong>下一个<code>case</code>语句，而不是去<strong>判断</strong>条件。</p>\n<h2 id=\"精确控制转移\"><a href=\"#精确控制转移\" class=\"headerlink\" title=\"精确控制转移\"></a>精确控制转移</h2><p>Swift语言中可以让<code>break</code>和<code>continue</code>精确地表示针对哪一个循环或条件语句，这称为带标签的语句（<em>Labeled Statements</em>）。<br><code>label name: while condition { statements }</code>，之后再执行<code>break label name</code>或<code>continue label name</code>。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//求第一个质数</span></div><div class=\"line\">loop: <span class=\"keyword\">for</span> integer <span class=\"keyword\">in</span> <span class=\"number\">1</span>...<span class=\"number\">10</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> integer &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>, <span class=\"number\">17</span>, <span class=\"number\">19</span>:</div><div class=\"line\">        <span class=\"built_in\">println</span>(<span class=\"string\">\"\\(integer) is a prime number\"</span>)</div><div class=\"line\">        <span class=\"keyword\">break</span> loop</div><div class=\"line\">    <span class=\"keyword\">default</span>:</div><div class=\"line\">        <span class=\"built_in\">println</span>(<span class=\"string\">\"\\(integer) is not a prime number\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>上面代码中，给<code>for-in</code>循环指定了标签<code>loop</code>，我们要求得到第一个质数，所以当遇到质数后用<code>break loop</code>结束循环。如果不加标签，<code>break</code>只能结束<code>switch</code>语句，会继续执行循环，不能达到目的。</p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>"},{"title":"Swift基础入门(3)：数组，集合和字典","date":"2015-07-15T09:04:30.000Z","toc":true,"_content":"\n本篇介绍Swift的基础知识：数组（Array），集合（Set）和字符（Dictionary）。\n\n<!--more-->\n**Title: [Swift基础入门(3)：数组，集合和字典](https://aidaizyy.github.io/swift_3)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-07-16](http://aidaizyy.github.io)**\n\n# 数组\n\n## 构造\n``` swift\nvar shoppinglist = [\"Eggs\", \"Milk\"]\t//初始化为字符串数组，没有指定数据类型，通过添加数据自动判断为String数组\n\nvar someInts1 = [2, 3]\nvar someInts2: [Int] = [2, 3]\t\t//等价于上一句，初始化为整数数组，指定了数据类型Int，只能添加Int数据，并添加了元素2，3\nvar someInts3: Array<Int> = [2, 3]\t//等价于上一句\n\nvar someInts4 = Array<Int>()\t\t//初始化为整数数组，指定了数据类型Int，只能添加Int数据，没有添加元素\nvar someInts5 = [Int]()\t\t\t//等价于上一句\n\nvar someDoubles = []\t\t\t//初始化为空数组，没有指定数据类型，通过添加数据自动判断\nsomeDoubles.append(2.3)\t\t\t//通过添加数据自动判断为Double数组\n\nvar threeDoubles = [Double](count: 3, repeatedValue: 0.0)\n//(count: , repeatedValue: )形式，指定了重复的值和重复的次数，构造数组{0.0, 0.0, 0.0}\n```\n数组的元素只能有一种数据类型。\n\n## 数量\n- Array.count：属性`count`表示数组`Array`的元素个数。\n- Array.isEmpty：属性`isEmpty`表示数组`Array`的元素是否为0个，结果为`true`或`false`。\n\n## 访问\n- Array[i]：通过下标`[i]`访问数组`Array`的第`i`位，可修改。\n\n## 遍历\n``` swift\nvar shoppinglist = [\"Eggs\", \"Milk\"]\nfor item in shoppingList {\n\tprintln(item)\n}\n//Eggs\n//Milk\n```\n\n## 添加\n- Array.append(Item)：将元素`Item`添加到数组`Array`的尾部。\n- Array.imsert(Item, atIndex: i)：将元素`Item`添加到数组`Array`的第`i`位。\n- Array += [Item1, Item2]：将元素`Item1`和`Item2`添加到数组`Array`的尾部。\n\n## 删除\n- Array.removeAtIndex(i)：删除数组`Array`的第`i`位。\n- Array.removeLast()：删除数组`Array`的最后一位。\n\n## 替换\n- Array[m...n] = [Item1, Item2]：用元素`Item1`和`Item2`替换数组`Array`的第`m`位到第`n`位。这种方法不能用于添加新元素。\n\n#  集合\n集合中的元素没有确定顺序，且每个元素只出现一次。\n\n## 构造\n``` swift\nvar shoppinglist: Set = [\"Eggs\", \"Milk\"]\t//初始化为字符串集合，没有指定数据类型，通过添加数据自动判断为String集合\n\nvar someInts1: Set = [2, 3]\t\t\t\nvar someInts2: Set<Int> = [2, 3]\t\t//等价于上一句，初始化为整数集合，指定了数据类型Int，只能添加Int数据，并添加了元素2，3\n\nvar someInts3 = Set<Int>()\t\t\t//初始化为整数集合，指定了数据类型Int，只能添加Int数据，没有添加元素\n\nvar someDoubles: Set = []\t\t\t//初始化为空集合，没有指定数据类型，通过添加数据自动判断\nsomeDoubles.insert(2.3)\t\t\t\t//通过添加数据自动判断为Double集合\n```\n集合的元素只能有一种数据类型。\n\n## 数量\n- Set.count：属性`count`表示集合`Set`的元素个数。\n- Set.isEmpty：属性`isEmpty`表示集合`Set`的元素是否为0个，结果为`true`或`false`。\n\n## 遍历\n``` swift\nvar shoppinglist1: Set = [\"Milk\", \"Eggs\"]\nfor item in shoppingList {\n\tprintln(item)\n}\n//Milk\n//Eggs\n\nvar shoppinglist2: Set = [\"Milk\", \"Eggs\"]\nfor item in sorted(shoppingList) {\n\tprintln(item)\n}\n//Eggs\n//Milk\n```\n因为`Set`中没有确定顺序，可以通过`sorted(Set)`函数返回一个排序的集合。\n\n## 添加\n- Set.imsert(Item)：将元素`Item`添加到集合`Set`中。\n\n## 删除\n- Set.remove(Item)：删除集合`Set`中的元素`Item`，成功则返回`Item`，如果集合中不包含`Item`则返回`nil`。\n- Set.removeAll()：删除集合`Set`中的所有元素\n\n## 包含\n- Set.contains(Item)：检查集合`Set`是否包含元素`Item`，返回`true`或`false`。\n\n## 比较\n``` swift\nlet s1: Set = [1, 2]\nlet s2: Set = [3, 4, 5, 1, 2]\nlet cityAnimals: Set = [6, 7]\ns1.isSubsetOf(s2)\n// true\ns2.isSuperSetOf(s1)\n// true\ns2.isDisjointWith(s3)\n// true\n```\n- ==：判断两个集合是否相等\n- Set1.isSubsetOf(Set2)：判断`Set1`是否是`Set2`的子集\n- Set1.isSupersetOf(Set2)：判断`Set1`是否是`Set2`的父集\n- Set1.isStrictSubsetOf(Set2)，Set1.isStrictSupersetOf(Set2)：和上面方法相似，不过两个集合不能相等。\n- Set1.isDisjoinWith(Set2)：判断`Set1`和`Set2`是否完成没有一个相同元素\n上述方法都返回`true`或`false`。\n\n## 操作\n``` swift\nlet oddDigits: Set = [1, 3, 5, 7, 9]\nlet evenDigits: Set = [0, 2, 4, 6, 8]\nlet singleDigitPrimeNumbers: Set = [2, 3, 5, 7]\nsorted(oddDigits.union(evenDigits))\n// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nsorted(oddDigits.intersect(evenDigits))\n// []\nsorted(oddDigits.subtract(singleDigitPrimeNumbers))\n// [1, 9]\nsorted(oddDigits.exclusiveOr(singleDigitPrimeNumbers))\n// [1, 2, 9]\n```\n- Set1.intersects(Set2)：返回`Set1`和`Set2`的交集，即两个集合中都有的元素\n- Set1.union(Set2)：返回`Set1`和`Set2`的并集，即两个集合中的所有元素\n- Set1.subtract(Set2)：返回`Set1`和`Set2`的差集，即`Set1`中有的且`Set2`中没有的元素\n- Set1.exclusiverOr(Set2)：返回并集减去并集的集合，即`Set1`中独有的和`Set2`中独有的元素，也就是所有元素减去两个集合中都有的元素。\n\n## 哈希值\nSwift中的所有基本类型默认都是可哈希的，通过`a.hashValue`求得哈希值。哈希值相等可以判断对象相同，如`a == b`即`a.hashValue == b.hashValue`。\n\n# 字典\n字典中每个值（_Value_）都关联唯一的建（_key_）。\n\n## 构造\n在构造过程中，键值对默认用`[key 1: value 1, key 2: value 2, key 3: value 3]`的形式。\n``` swift\nvar airports1 = [\"TYO\": \"Tokyo\", \"DUB\": \"Dublin\"]\t\t\t\t//初始化为[String: String]字典，没有指定数据类型，通过添加数据自动判断\nvar airports2: [String: String] = [\"TYO\": \"Tokyo\", \"DUB\": \"Dublin\"]\t\t//等价于上一句\nvar airports3: Dictionary<Stringr, String> = [\"TYO\": \"Tokyo\", \"DUB\": \"Dublin\"]\t//等价于上一句\n\nvar airports4 = Dictionary<String, Sting>()\t//初始化为[Sting: String]空字典，指定了数据类型[String: String]，只能添加[String:String]数据，没有添加元素\nvar airports5 = [String: String]()\t\t//等价于上一句\n\nvar airports6 = [:]\t//初始化为空字典，没有指定数据类型，通过添加数据自动判断\nairports6[2] = 3\t//通过添加数据自动判断为[Int: Int]字典\n```\n\n## 数量\n- Dictionary.count：属性`count`表示字典`Dictionary`的元素个数。\n- Dictionary.isEmpty：属性`isEmpty`表示字典`Dictionary`的元素是否为0个，结果为`true`或`false`。\n\n## 访问\n- Dictionary[key]：通过下标`[key]`访问字典`Dictionary`的键`key`对应的值，可修改。\n\n## 遍历\n``` swift\nfor (airportCode, airportName) in airports {\n    println(\"\\(airportCode): \\(airportName)\")\n}\n// TYO: Tokyo\n// DUB: Dublin\n\nfor airportCode in airports.keys {\n    println(\"Airport code: \\(airportCode)\")\n}\n// Airport code: TYO\n// Airport code: DUB\n\nfor airportName in airports.values {\n    println(\"Airport name: \\(airportName)\")\n}\n// Airport name: Tokyo\n// Airport name: Dublin\n```\n`for-in`可便利字典，可便利键值对`(key, value)`，也可以通过属性`keys`或`values`只便利键值其中一项。\n字典的属性`keys`和`values`返回数组。\n``` swift\nlet airportCodes = Array(airports.keys)\n// airportCodes is [\"TYO\", \"DUB\"]\n\nlet airportNames = Array(airports.values)\n// airportNames is [\"Tokyo\", \"Dublin\"]\n```\n## 添加\n- Dictionary[key] = value：更新字典`Dictionary`中键`key`对应的值，如果不存在，则将键值对<key, valye>添加到字典`Dictionary`中。\n- Dicitonary.updateValue(value, forkey: key)：更新字典`Dictionary`中键`key`对应的值，如果不存在，则将键值对<key, value>添加到字典`Dictionary`。\n注意：该方法返回**原值**，即执行`updateValue`方法之前键`key`对应的值，如果不存在，则返回`nil`。\n\n## 删除\n- Dictionary[key] = nil：删除字典`Dictionary`中键`key`对应的值。\n- Dictionary.removeValueForKey(key)：删除字典`Dictionary`中键`key`对应的值，返回删除的值，如果不存在，则返回`nil`。\n\n添加操作和删除操作返回值有可能为`nil`，都是可选类型，使用时需要进行判断是否有值。\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","source":"_posts/swift_3.md","raw":"title: \"Swift基础入门(3)：数组，集合和字典\"\ndate: 2015-07-15 17:04:30\ntags:\n- swift\ncategories: swift\ntoc: true\n---\n\n本篇介绍Swift的基础知识：数组（Array），集合（Set）和字符（Dictionary）。\n\n<!--more-->\n**Title: [Swift基础入门(3)：数组，集合和字典](https://aidaizyy.github.io/swift_3)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-07-16](http://aidaizyy.github.io)**\n\n# 数组\n\n## 构造\n``` swift\nvar shoppinglist = [\"Eggs\", \"Milk\"]\t//初始化为字符串数组，没有指定数据类型，通过添加数据自动判断为String数组\n\nvar someInts1 = [2, 3]\nvar someInts2: [Int] = [2, 3]\t\t//等价于上一句，初始化为整数数组，指定了数据类型Int，只能添加Int数据，并添加了元素2，3\nvar someInts3: Array<Int> = [2, 3]\t//等价于上一句\n\nvar someInts4 = Array<Int>()\t\t//初始化为整数数组，指定了数据类型Int，只能添加Int数据，没有添加元素\nvar someInts5 = [Int]()\t\t\t//等价于上一句\n\nvar someDoubles = []\t\t\t//初始化为空数组，没有指定数据类型，通过添加数据自动判断\nsomeDoubles.append(2.3)\t\t\t//通过添加数据自动判断为Double数组\n\nvar threeDoubles = [Double](count: 3, repeatedValue: 0.0)\n//(count: , repeatedValue: )形式，指定了重复的值和重复的次数，构造数组{0.0, 0.0, 0.0}\n```\n数组的元素只能有一种数据类型。\n\n## 数量\n- Array.count：属性`count`表示数组`Array`的元素个数。\n- Array.isEmpty：属性`isEmpty`表示数组`Array`的元素是否为0个，结果为`true`或`false`。\n\n## 访问\n- Array[i]：通过下标`[i]`访问数组`Array`的第`i`位，可修改。\n\n## 遍历\n``` swift\nvar shoppinglist = [\"Eggs\", \"Milk\"]\nfor item in shoppingList {\n\tprintln(item)\n}\n//Eggs\n//Milk\n```\n\n## 添加\n- Array.append(Item)：将元素`Item`添加到数组`Array`的尾部。\n- Array.imsert(Item, atIndex: i)：将元素`Item`添加到数组`Array`的第`i`位。\n- Array += [Item1, Item2]：将元素`Item1`和`Item2`添加到数组`Array`的尾部。\n\n## 删除\n- Array.removeAtIndex(i)：删除数组`Array`的第`i`位。\n- Array.removeLast()：删除数组`Array`的最后一位。\n\n## 替换\n- Array[m...n] = [Item1, Item2]：用元素`Item1`和`Item2`替换数组`Array`的第`m`位到第`n`位。这种方法不能用于添加新元素。\n\n#  集合\n集合中的元素没有确定顺序，且每个元素只出现一次。\n\n## 构造\n``` swift\nvar shoppinglist: Set = [\"Eggs\", \"Milk\"]\t//初始化为字符串集合，没有指定数据类型，通过添加数据自动判断为String集合\n\nvar someInts1: Set = [2, 3]\t\t\t\nvar someInts2: Set<Int> = [2, 3]\t\t//等价于上一句，初始化为整数集合，指定了数据类型Int，只能添加Int数据，并添加了元素2，3\n\nvar someInts3 = Set<Int>()\t\t\t//初始化为整数集合，指定了数据类型Int，只能添加Int数据，没有添加元素\n\nvar someDoubles: Set = []\t\t\t//初始化为空集合，没有指定数据类型，通过添加数据自动判断\nsomeDoubles.insert(2.3)\t\t\t\t//通过添加数据自动判断为Double集合\n```\n集合的元素只能有一种数据类型。\n\n## 数量\n- Set.count：属性`count`表示集合`Set`的元素个数。\n- Set.isEmpty：属性`isEmpty`表示集合`Set`的元素是否为0个，结果为`true`或`false`。\n\n## 遍历\n``` swift\nvar shoppinglist1: Set = [\"Milk\", \"Eggs\"]\nfor item in shoppingList {\n\tprintln(item)\n}\n//Milk\n//Eggs\n\nvar shoppinglist2: Set = [\"Milk\", \"Eggs\"]\nfor item in sorted(shoppingList) {\n\tprintln(item)\n}\n//Eggs\n//Milk\n```\n因为`Set`中没有确定顺序，可以通过`sorted(Set)`函数返回一个排序的集合。\n\n## 添加\n- Set.imsert(Item)：将元素`Item`添加到集合`Set`中。\n\n## 删除\n- Set.remove(Item)：删除集合`Set`中的元素`Item`，成功则返回`Item`，如果集合中不包含`Item`则返回`nil`。\n- Set.removeAll()：删除集合`Set`中的所有元素\n\n## 包含\n- Set.contains(Item)：检查集合`Set`是否包含元素`Item`，返回`true`或`false`。\n\n## 比较\n``` swift\nlet s1: Set = [1, 2]\nlet s2: Set = [3, 4, 5, 1, 2]\nlet cityAnimals: Set = [6, 7]\ns1.isSubsetOf(s2)\n// true\ns2.isSuperSetOf(s1)\n// true\ns2.isDisjointWith(s3)\n// true\n```\n- ==：判断两个集合是否相等\n- Set1.isSubsetOf(Set2)：判断`Set1`是否是`Set2`的子集\n- Set1.isSupersetOf(Set2)：判断`Set1`是否是`Set2`的父集\n- Set1.isStrictSubsetOf(Set2)，Set1.isStrictSupersetOf(Set2)：和上面方法相似，不过两个集合不能相等。\n- Set1.isDisjoinWith(Set2)：判断`Set1`和`Set2`是否完成没有一个相同元素\n上述方法都返回`true`或`false`。\n\n## 操作\n``` swift\nlet oddDigits: Set = [1, 3, 5, 7, 9]\nlet evenDigits: Set = [0, 2, 4, 6, 8]\nlet singleDigitPrimeNumbers: Set = [2, 3, 5, 7]\nsorted(oddDigits.union(evenDigits))\n// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nsorted(oddDigits.intersect(evenDigits))\n// []\nsorted(oddDigits.subtract(singleDigitPrimeNumbers))\n// [1, 9]\nsorted(oddDigits.exclusiveOr(singleDigitPrimeNumbers))\n// [1, 2, 9]\n```\n- Set1.intersects(Set2)：返回`Set1`和`Set2`的交集，即两个集合中都有的元素\n- Set1.union(Set2)：返回`Set1`和`Set2`的并集，即两个集合中的所有元素\n- Set1.subtract(Set2)：返回`Set1`和`Set2`的差集，即`Set1`中有的且`Set2`中没有的元素\n- Set1.exclusiverOr(Set2)：返回并集减去并集的集合，即`Set1`中独有的和`Set2`中独有的元素，也就是所有元素减去两个集合中都有的元素。\n\n## 哈希值\nSwift中的所有基本类型默认都是可哈希的，通过`a.hashValue`求得哈希值。哈希值相等可以判断对象相同，如`a == b`即`a.hashValue == b.hashValue`。\n\n# 字典\n字典中每个值（_Value_）都关联唯一的建（_key_）。\n\n## 构造\n在构造过程中，键值对默认用`[key 1: value 1, key 2: value 2, key 3: value 3]`的形式。\n``` swift\nvar airports1 = [\"TYO\": \"Tokyo\", \"DUB\": \"Dublin\"]\t\t\t\t//初始化为[String: String]字典，没有指定数据类型，通过添加数据自动判断\nvar airports2: [String: String] = [\"TYO\": \"Tokyo\", \"DUB\": \"Dublin\"]\t\t//等价于上一句\nvar airports3: Dictionary<Stringr, String> = [\"TYO\": \"Tokyo\", \"DUB\": \"Dublin\"]\t//等价于上一句\n\nvar airports4 = Dictionary<String, Sting>()\t//初始化为[Sting: String]空字典，指定了数据类型[String: String]，只能添加[String:String]数据，没有添加元素\nvar airports5 = [String: String]()\t\t//等价于上一句\n\nvar airports6 = [:]\t//初始化为空字典，没有指定数据类型，通过添加数据自动判断\nairports6[2] = 3\t//通过添加数据自动判断为[Int: Int]字典\n```\n\n## 数量\n- Dictionary.count：属性`count`表示字典`Dictionary`的元素个数。\n- Dictionary.isEmpty：属性`isEmpty`表示字典`Dictionary`的元素是否为0个，结果为`true`或`false`。\n\n## 访问\n- Dictionary[key]：通过下标`[key]`访问字典`Dictionary`的键`key`对应的值，可修改。\n\n## 遍历\n``` swift\nfor (airportCode, airportName) in airports {\n    println(\"\\(airportCode): \\(airportName)\")\n}\n// TYO: Tokyo\n// DUB: Dublin\n\nfor airportCode in airports.keys {\n    println(\"Airport code: \\(airportCode)\")\n}\n// Airport code: TYO\n// Airport code: DUB\n\nfor airportName in airports.values {\n    println(\"Airport name: \\(airportName)\")\n}\n// Airport name: Tokyo\n// Airport name: Dublin\n```\n`for-in`可便利字典，可便利键值对`(key, value)`，也可以通过属性`keys`或`values`只便利键值其中一项。\n字典的属性`keys`和`values`返回数组。\n``` swift\nlet airportCodes = Array(airports.keys)\n// airportCodes is [\"TYO\", \"DUB\"]\n\nlet airportNames = Array(airports.values)\n// airportNames is [\"Tokyo\", \"Dublin\"]\n```\n## 添加\n- Dictionary[key] = value：更新字典`Dictionary`中键`key`对应的值，如果不存在，则将键值对<key, valye>添加到字典`Dictionary`中。\n- Dicitonary.updateValue(value, forkey: key)：更新字典`Dictionary`中键`key`对应的值，如果不存在，则将键值对<key, value>添加到字典`Dictionary`。\n注意：该方法返回**原值**，即执行`updateValue`方法之前键`key`对应的值，如果不存在，则返回`nil`。\n\n## 删除\n- Dictionary[key] = nil：删除字典`Dictionary`中键`key`对应的值。\n- Dictionary.removeValueForKey(key)：删除字典`Dictionary`中键`key`对应的值，返回删除的值，如果不存在，则返回`nil`。\n\n添加操作和删除操作返回值有可能为`nil`，都是可选类型，使用时需要进行判断是否有值。\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","slug":"swift_3","published":1,"updated":"2017-05-08T16:40:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2gdu6ky001av1o3zh0mzd30","content":"<p>本篇介绍Swift的基础知识：数组（Array），集合（Set）和字符（Dictionary）。</p>\n<a id=\"more\"></a>\n<p><strong>Title: <a href=\"https://aidaizyy.github.io/swift_3\" target=\"_blank\" rel=\"external\">Swift基础入门(3)：数组，集合和字典</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#x6d;&#97;&#x69;&#108;&#x74;&#x6f;&#x3a;&#x61;&#x69;&#100;&#x61;&#x69;&#x7a;&#121;&#x79;&#64;&#x67;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;\">&#x61;&#x69;&#100;&#x61;&#x69;&#x7a;&#121;&#x79;&#64;&#x67;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-07-16</a></strong></p>\n<h1 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h1><h2 id=\"构造\"><a href=\"#构造\" class=\"headerlink\" title=\"构造\"></a>构造</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> shoppinglist = [<span class=\"string\">\"Eggs\"</span>, <span class=\"string\">\"Milk\"</span>]\t<span class=\"comment\">//初始化为字符串数组，没有指定数据类型，通过添加数据自动判断为String数组</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> someInts1 = [<span class=\"number\">2</span>, <span class=\"number\">3</span>]</div><div class=\"line\"><span class=\"keyword\">var</span> someInts2: [<span class=\"type\">Int</span>] = [<span class=\"number\">2</span>, <span class=\"number\">3</span>]\t\t<span class=\"comment\">//等价于上一句，初始化为整数数组，指定了数据类型Int，只能添加Int数据，并添加了元素2，3</span></div><div class=\"line\"><span class=\"keyword\">var</span> someInts3: <span class=\"type\">Array</span>&lt;<span class=\"type\">Int</span>&gt; = [<span class=\"number\">2</span>, <span class=\"number\">3</span>]\t<span class=\"comment\">//等价于上一句</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> someInts4 = <span class=\"type\">Array</span>&lt;<span class=\"type\">Int</span>&gt;()\t\t<span class=\"comment\">//初始化为整数数组，指定了数据类型Int，只能添加Int数据，没有添加元素</span></div><div class=\"line\"><span class=\"keyword\">var</span> someInts5 = [<span class=\"type\">Int</span>]()\t\t\t<span class=\"comment\">//等价于上一句</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> someDoubles = []\t\t\t<span class=\"comment\">//初始化为空数组，没有指定数据类型，通过添加数据自动判断</span></div><div class=\"line\">someDoubles.append(<span class=\"number\">2.3</span>)\t\t\t<span class=\"comment\">//通过添加数据自动判断为Double数组</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> threeDoubles = [<span class=\"type\">Double</span>](<span class=\"built_in\">count</span>: <span class=\"number\">3</span>, repeatedValue: <span class=\"number\">0.0</span>)</div><div class=\"line\"><span class=\"comment\">//(count: , repeatedValue: )形式，指定了重复的值和重复的次数，构造数组&#123;0.0, 0.0, 0.0&#125;</span></div></pre></td></tr></table></figure>\n<p>数组的元素只能有一种数据类型。</p>\n<h2 id=\"数量\"><a href=\"#数量\" class=\"headerlink\" title=\"数量\"></a>数量</h2><ul>\n<li>Array.count：属性<code>count</code>表示数组<code>Array</code>的元素个数。</li>\n<li>Array.isEmpty：属性<code>isEmpty</code>表示数组<code>Array</code>的元素是否为0个，结果为<code>true</code>或<code>false</code>。</li>\n</ul>\n<h2 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h2><ul>\n<li>Array[i]：通过下标<code>[i]</code>访问数组<code>Array</code>的第<code>i</code>位，可修改。</li>\n</ul>\n<h2 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> shoppinglist = [<span class=\"string\">\"Eggs\"</span>, <span class=\"string\">\"Milk\"</span>]</div><div class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> shoppingList &#123;</div><div class=\"line\">\t<span class=\"built_in\">println</span>(item)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//Eggs</span></div><div class=\"line\"><span class=\"comment\">//Milk</span></div></pre></td></tr></table></figure>\n<h2 id=\"添加\"><a href=\"#添加\" class=\"headerlink\" title=\"添加\"></a>添加</h2><ul>\n<li>Array.append(Item)：将元素<code>Item</code>添加到数组<code>Array</code>的尾部。</li>\n<li>Array.imsert(Item, atIndex: i)：将元素<code>Item</code>添加到数组<code>Array</code>的第<code>i</code>位。</li>\n<li>Array += [Item1, Item2]：将元素<code>Item1</code>和<code>Item2</code>添加到数组<code>Array</code>的尾部。</li>\n</ul>\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><ul>\n<li>Array.removeAtIndex(i)：删除数组<code>Array</code>的第<code>i</code>位。</li>\n<li>Array.removeLast()：删除数组<code>Array</code>的最后一位。</li>\n</ul>\n<h2 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h2><ul>\n<li>Array[m…n] = [Item1, Item2]：用元素<code>Item1</code>和<code>Item2</code>替换数组<code>Array</code>的第<code>m</code>位到第<code>n</code>位。这种方法不能用于添加新元素。</li>\n</ul>\n<h1 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h1><p>集合中的元素没有确定顺序，且每个元素只出现一次。</p>\n<h2 id=\"构造-1\"><a href=\"#构造-1\" class=\"headerlink\" title=\"构造\"></a>构造</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> shoppinglist: <span class=\"type\">Set</span> = [<span class=\"string\">\"Eggs\"</span>, <span class=\"string\">\"Milk\"</span>]\t<span class=\"comment\">//初始化为字符串集合，没有指定数据类型，通过添加数据自动判断为String集合</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> someInts1: <span class=\"type\">Set</span> = [<span class=\"number\">2</span>, <span class=\"number\">3</span>]\t\t\t</div><div class=\"line\"><span class=\"keyword\">var</span> someInts2: <span class=\"type\">Set</span>&lt;<span class=\"type\">Int</span>&gt; = [<span class=\"number\">2</span>, <span class=\"number\">3</span>]\t\t<span class=\"comment\">//等价于上一句，初始化为整数集合，指定了数据类型Int，只能添加Int数据，并添加了元素2，3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> someInts3 = <span class=\"type\">Set</span>&lt;<span class=\"type\">Int</span>&gt;()\t\t\t<span class=\"comment\">//初始化为整数集合，指定了数据类型Int，只能添加Int数据，没有添加元素</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> someDoubles: <span class=\"type\">Set</span> = []\t\t\t<span class=\"comment\">//初始化为空集合，没有指定数据类型，通过添加数据自动判断</span></div><div class=\"line\">someDoubles.insert(<span class=\"number\">2.3</span>)\t\t\t\t<span class=\"comment\">//通过添加数据自动判断为Double集合</span></div></pre></td></tr></table></figure>\n<p>集合的元素只能有一种数据类型。</p>\n<h2 id=\"数量-1\"><a href=\"#数量-1\" class=\"headerlink\" title=\"数量\"></a>数量</h2><ul>\n<li>Set.count：属性<code>count</code>表示集合<code>Set</code>的元素个数。</li>\n<li>Set.isEmpty：属性<code>isEmpty</code>表示集合<code>Set</code>的元素是否为0个，结果为<code>true</code>或<code>false</code>。</li>\n</ul>\n<h2 id=\"遍历-1\"><a href=\"#遍历-1\" class=\"headerlink\" title=\"遍历\"></a>遍历</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> shoppinglist1: <span class=\"type\">Set</span> = [<span class=\"string\">\"Milk\"</span>, <span class=\"string\">\"Eggs\"</span>]</div><div class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> shoppingList &#123;</div><div class=\"line\">\t<span class=\"built_in\">println</span>(item)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//Milk</span></div><div class=\"line\"><span class=\"comment\">//Eggs</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> shoppinglist2: <span class=\"type\">Set</span> = [<span class=\"string\">\"Milk\"</span>, <span class=\"string\">\"Eggs\"</span>]</div><div class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> sorted(shoppingList) &#123;</div><div class=\"line\">\t<span class=\"built_in\">println</span>(item)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//Eggs</span></div><div class=\"line\"><span class=\"comment\">//Milk</span></div></pre></td></tr></table></figure>\n<p>因为<code>Set</code>中没有确定顺序，可以通过<code>sorted(Set)</code>函数返回一个排序的集合。</p>\n<h2 id=\"添加-1\"><a href=\"#添加-1\" class=\"headerlink\" title=\"添加\"></a>添加</h2><ul>\n<li>Set.imsert(Item)：将元素<code>Item</code>添加到集合<code>Set</code>中。</li>\n</ul>\n<h2 id=\"删除-1\"><a href=\"#删除-1\" class=\"headerlink\" title=\"删除\"></a>删除</h2><ul>\n<li>Set.remove(Item)：删除集合<code>Set</code>中的元素<code>Item</code>，成功则返回<code>Item</code>，如果集合中不包含<code>Item</code>则返回<code>nil</code>。</li>\n<li>Set.removeAll()：删除集合<code>Set</code>中的所有元素</li>\n</ul>\n<h2 id=\"包含\"><a href=\"#包含\" class=\"headerlink\" title=\"包含\"></a>包含</h2><ul>\n<li>Set.contains(Item)：检查集合<code>Set</code>是否包含元素<code>Item</code>，返回<code>true</code>或<code>false</code>。</li>\n</ul>\n<h2 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> s1: <span class=\"type\">Set</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> s2: <span class=\"type\">Set</span> = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> cityAnimals: <span class=\"type\">Set</span> = [<span class=\"number\">6</span>, <span class=\"number\">7</span>]</div><div class=\"line\">s1.isSubsetOf(s2)</div><div class=\"line\"><span class=\"comment\">// true</span></div><div class=\"line\">s2.isSuperSetOf(s1)</div><div class=\"line\"><span class=\"comment\">// true</span></div><div class=\"line\">s2.isDisjointWith(s3)</div><div class=\"line\"><span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<ul>\n<li>==：判断两个集合是否相等</li>\n<li>Set1.isSubsetOf(Set2)：判断<code>Set1</code>是否是<code>Set2</code>的子集</li>\n<li>Set1.isSupersetOf(Set2)：判断<code>Set1</code>是否是<code>Set2</code>的父集</li>\n<li>Set1.isStrictSubsetOf(Set2)，Set1.isStrictSupersetOf(Set2)：和上面方法相似，不过两个集合不能相等。</li>\n<li>Set1.isDisjoinWith(Set2)：判断<code>Set1</code>和<code>Set2</code>是否完成没有一个相同元素<br>上述方法都返回<code>true</code>或<code>false</code>。</li>\n</ul>\n<h2 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> oddDigits: <span class=\"type\">Set</span> = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> evenDigits: <span class=\"type\">Set</span> = [<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> singleDigitPrimeNumbers: <span class=\"type\">Set</span> = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]</div><div class=\"line\">sorted(oddDigits.union(evenDigits))</div><div class=\"line\"><span class=\"comment\">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></div><div class=\"line\">sorted(oddDigits.intersect(evenDigits))</div><div class=\"line\"><span class=\"comment\">// []</span></div><div class=\"line\">sorted(oddDigits.subtract(singleDigitPrimeNumbers))</div><div class=\"line\"><span class=\"comment\">// [1, 9]</span></div><div class=\"line\">sorted(oddDigits.exclusiveOr(singleDigitPrimeNumbers))</div><div class=\"line\"><span class=\"comment\">// [1, 2, 9]</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Set1.intersects(Set2)：返回<code>Set1</code>和<code>Set2</code>的交集，即两个集合中都有的元素</li>\n<li>Set1.union(Set2)：返回<code>Set1</code>和<code>Set2</code>的并集，即两个集合中的所有元素</li>\n<li>Set1.subtract(Set2)：返回<code>Set1</code>和<code>Set2</code>的差集，即<code>Set1</code>中有的且<code>Set2</code>中没有的元素</li>\n<li>Set1.exclusiverOr(Set2)：返回并集减去并集的集合，即<code>Set1</code>中独有的和<code>Set2</code>中独有的元素，也就是所有元素减去两个集合中都有的元素。</li>\n</ul>\n<h2 id=\"哈希值\"><a href=\"#哈希值\" class=\"headerlink\" title=\"哈希值\"></a>哈希值</h2><p>Swift中的所有基本类型默认都是可哈希的，通过<code>a.hashValue</code>求得哈希值。哈希值相等可以判断对象相同，如<code>a == b</code>即<code>a.hashValue == b.hashValue</code>。</p>\n<h1 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h1><p>字典中每个值（<em>Value</em>）都关联唯一的建（<em>key</em>）。</p>\n<h2 id=\"构造-2\"><a href=\"#构造-2\" class=\"headerlink\" title=\"构造\"></a>构造</h2><p>在构造过程中，键值对默认用<code>[key 1: value 1, key 2: value 2, key 3: value 3]</code>的形式。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> airports1 = [<span class=\"string\">\"TYO\"</span>: <span class=\"string\">\"Tokyo\"</span>, <span class=\"string\">\"DUB\"</span>: <span class=\"string\">\"Dublin\"</span>]\t\t\t\t<span class=\"comment\">//初始化为[String: String]字典，没有指定数据类型，通过添加数据自动判断</span></div><div class=\"line\"><span class=\"keyword\">var</span> airports2: [<span class=\"type\">String</span>: <span class=\"type\">String</span>] = [<span class=\"string\">\"TYO\"</span>: <span class=\"string\">\"Tokyo\"</span>, <span class=\"string\">\"DUB\"</span>: <span class=\"string\">\"Dublin\"</span>]\t\t<span class=\"comment\">//等价于上一句</span></div><div class=\"line\"><span class=\"keyword\">var</span> airports3: <span class=\"type\">Dictionary</span>&lt;<span class=\"type\">Stringr</span>, <span class=\"type\">String</span>&gt; = [<span class=\"string\">\"TYO\"</span>: <span class=\"string\">\"Tokyo\"</span>, <span class=\"string\">\"DUB\"</span>: <span class=\"string\">\"Dublin\"</span>]\t<span class=\"comment\">//等价于上一句</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> airports4 = <span class=\"type\">Dictionary</span>&lt;<span class=\"type\">String</span>, <span class=\"type\">Sting</span>&gt;()\t<span class=\"comment\">//初始化为[Sting: String]空字典，指定了数据类型[String: String]，只能添加[String:String]数据，没有添加元素</span></div><div class=\"line\"><span class=\"keyword\">var</span> airports5 = [<span class=\"type\">String</span>: <span class=\"type\">String</span>]()\t\t<span class=\"comment\">//等价于上一句</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> airports6 = [:]\t<span class=\"comment\">//初始化为空字典，没有指定数据类型，通过添加数据自动判断</span></div><div class=\"line\">airports6[<span class=\"number\">2</span>] = <span class=\"number\">3</span>\t<span class=\"comment\">//通过添加数据自动判断为[Int: Int]字典</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"数量-2\"><a href=\"#数量-2\" class=\"headerlink\" title=\"数量\"></a>数量</h2><ul>\n<li>Dictionary.count：属性<code>count</code>表示字典<code>Dictionary</code>的元素个数。</li>\n<li>Dictionary.isEmpty：属性<code>isEmpty</code>表示字典<code>Dictionary</code>的元素是否为0个，结果为<code>true</code>或<code>false</code>。</li>\n</ul>\n<h2 id=\"访问-1\"><a href=\"#访问-1\" class=\"headerlink\" title=\"访问\"></a>访问</h2><ul>\n<li>Dictionary[key]：通过下标<code>[key]</code>访问字典<code>Dictionary</code>的键<code>key</code>对应的值，可修改。</li>\n</ul>\n<h2 id=\"遍历-2\"><a href=\"#遍历-2\" class=\"headerlink\" title=\"遍历\"></a>遍历</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (airportCode, airportName) <span class=\"keyword\">in</span> airports &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"\\(airportCode): \\(airportName)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// TYO: Tokyo</span></div><div class=\"line\"><span class=\"comment\">// DUB: Dublin</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> airportCode <span class=\"keyword\">in</span> airports.keys &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Airport code: \\(airportCode)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Airport code: TYO</span></div><div class=\"line\"><span class=\"comment\">// Airport code: DUB</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> airportName <span class=\"keyword\">in</span> airports.values &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Airport name: \\(airportName)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Airport name: Tokyo</span></div><div class=\"line\"><span class=\"comment\">// Airport name: Dublin</span></div></pre></td></tr></table></figure>\n<p><code>for-in</code>可便利字典，可便利键值对<code>(key, value)</code>，也可以通过属性<code>keys</code>或<code>values</code>只便利键值其中一项。<br>字典的属性<code>keys</code>和<code>values</code>返回数组。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> airportCodes = <span class=\"type\">Array</span>(airports.keys)</div><div class=\"line\"><span class=\"comment\">// airportCodes is [\"TYO\", \"DUB\"]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> airportNames = <span class=\"type\">Array</span>(airports.values)</div><div class=\"line\"><span class=\"comment\">// airportNames is [\"Tokyo\", \"Dublin\"]</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"添加-2\"><a href=\"#添加-2\" class=\"headerlink\" title=\"添加\"></a>添加</h2><ul>\n<li>Dictionary[key] = value：更新字典<code>Dictionary</code>中键<code>key</code>对应的值，如果不存在，则将键值对<key, valye=\"\">添加到字典<code>Dictionary</code>中。</key,></li>\n<li>Dicitonary.updateValue(value, forkey: key)：更新字典<code>Dictionary</code>中键<code>key</code>对应的值，如果不存在，则将键值对<key, value=\"\">添加到字典<code>Dictionary</code>。<br>注意：该方法返回<strong>原值</strong>，即执行<code>updateValue</code>方法之前键<code>key</code>对应的值，如果不存在，则返回<code>nil</code>。</key,></li>\n</ul>\n<h2 id=\"删除-2\"><a href=\"#删除-2\" class=\"headerlink\" title=\"删除\"></a>删除</h2><ul>\n<li>Dictionary[key] = nil：删除字典<code>Dictionary</code>中键<code>key</code>对应的值。</li>\n<li>Dictionary.removeValueForKey(key)：删除字典<code>Dictionary</code>中键<code>key</code>对应的值，返回删除的值，如果不存在，则返回<code>nil</code>。</li>\n</ul>\n<p>添加操作和删除操作返回值有可能为<code>nil</code>，都是可选类型，使用时需要进行判断是否有值。</p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>本篇介绍Swift的基础知识：数组（Array），集合（Set）和字符（Dictionary）。</p>","more":"<p><strong>Title: <a href=\"https://aidaizyy.github.io/swift_3\" target=\"_blank\" rel=\"external\">Swift基础入门(3)：数组，集合和字典</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#x6d;&#97;&#x69;&#108;&#x74;&#x6f;&#x3a;&#x61;&#x69;&#100;&#x61;&#x69;&#x7a;&#121;&#x79;&#64;&#x67;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;\">&#x61;&#x69;&#100;&#x61;&#x69;&#x7a;&#121;&#x79;&#64;&#x67;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-07-16</a></strong></p>\n<h1 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h1><h2 id=\"构造\"><a href=\"#构造\" class=\"headerlink\" title=\"构造\"></a>构造</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> shoppinglist = [<span class=\"string\">\"Eggs\"</span>, <span class=\"string\">\"Milk\"</span>]\t<span class=\"comment\">//初始化为字符串数组，没有指定数据类型，通过添加数据自动判断为String数组</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> someInts1 = [<span class=\"number\">2</span>, <span class=\"number\">3</span>]</div><div class=\"line\"><span class=\"keyword\">var</span> someInts2: [<span class=\"type\">Int</span>] = [<span class=\"number\">2</span>, <span class=\"number\">3</span>]\t\t<span class=\"comment\">//等价于上一句，初始化为整数数组，指定了数据类型Int，只能添加Int数据，并添加了元素2，3</span></div><div class=\"line\"><span class=\"keyword\">var</span> someInts3: <span class=\"type\">Array</span>&lt;<span class=\"type\">Int</span>&gt; = [<span class=\"number\">2</span>, <span class=\"number\">3</span>]\t<span class=\"comment\">//等价于上一句</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> someInts4 = <span class=\"type\">Array</span>&lt;<span class=\"type\">Int</span>&gt;()\t\t<span class=\"comment\">//初始化为整数数组，指定了数据类型Int，只能添加Int数据，没有添加元素</span></div><div class=\"line\"><span class=\"keyword\">var</span> someInts5 = [<span class=\"type\">Int</span>]()\t\t\t<span class=\"comment\">//等价于上一句</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> someDoubles = []\t\t\t<span class=\"comment\">//初始化为空数组，没有指定数据类型，通过添加数据自动判断</span></div><div class=\"line\">someDoubles.append(<span class=\"number\">2.3</span>)\t\t\t<span class=\"comment\">//通过添加数据自动判断为Double数组</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> threeDoubles = [<span class=\"type\">Double</span>](<span class=\"built_in\">count</span>: <span class=\"number\">3</span>, repeatedValue: <span class=\"number\">0.0</span>)</div><div class=\"line\"><span class=\"comment\">//(count: , repeatedValue: )形式，指定了重复的值和重复的次数，构造数组&#123;0.0, 0.0, 0.0&#125;</span></div></pre></td></tr></table></figure>\n<p>数组的元素只能有一种数据类型。</p>\n<h2 id=\"数量\"><a href=\"#数量\" class=\"headerlink\" title=\"数量\"></a>数量</h2><ul>\n<li>Array.count：属性<code>count</code>表示数组<code>Array</code>的元素个数。</li>\n<li>Array.isEmpty：属性<code>isEmpty</code>表示数组<code>Array</code>的元素是否为0个，结果为<code>true</code>或<code>false</code>。</li>\n</ul>\n<h2 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h2><ul>\n<li>Array[i]：通过下标<code>[i]</code>访问数组<code>Array</code>的第<code>i</code>位，可修改。</li>\n</ul>\n<h2 id=\"遍历\"><a href=\"#遍历\" class=\"headerlink\" title=\"遍历\"></a>遍历</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> shoppinglist = [<span class=\"string\">\"Eggs\"</span>, <span class=\"string\">\"Milk\"</span>]</div><div class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> shoppingList &#123;</div><div class=\"line\">\t<span class=\"built_in\">println</span>(item)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//Eggs</span></div><div class=\"line\"><span class=\"comment\">//Milk</span></div></pre></td></tr></table></figure>\n<h2 id=\"添加\"><a href=\"#添加\" class=\"headerlink\" title=\"添加\"></a>添加</h2><ul>\n<li>Array.append(Item)：将元素<code>Item</code>添加到数组<code>Array</code>的尾部。</li>\n<li>Array.imsert(Item, atIndex: i)：将元素<code>Item</code>添加到数组<code>Array</code>的第<code>i</code>位。</li>\n<li>Array += [Item1, Item2]：将元素<code>Item1</code>和<code>Item2</code>添加到数组<code>Array</code>的尾部。</li>\n</ul>\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><ul>\n<li>Array.removeAtIndex(i)：删除数组<code>Array</code>的第<code>i</code>位。</li>\n<li>Array.removeLast()：删除数组<code>Array</code>的最后一位。</li>\n</ul>\n<h2 id=\"替换\"><a href=\"#替换\" class=\"headerlink\" title=\"替换\"></a>替换</h2><ul>\n<li>Array[m…n] = [Item1, Item2]：用元素<code>Item1</code>和<code>Item2</code>替换数组<code>Array</code>的第<code>m</code>位到第<code>n</code>位。这种方法不能用于添加新元素。</li>\n</ul>\n<h1 id=\"集合\"><a href=\"#集合\" class=\"headerlink\" title=\"集合\"></a>集合</h1><p>集合中的元素没有确定顺序，且每个元素只出现一次。</p>\n<h2 id=\"构造-1\"><a href=\"#构造-1\" class=\"headerlink\" title=\"构造\"></a>构造</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> shoppinglist: <span class=\"type\">Set</span> = [<span class=\"string\">\"Eggs\"</span>, <span class=\"string\">\"Milk\"</span>]\t<span class=\"comment\">//初始化为字符串集合，没有指定数据类型，通过添加数据自动判断为String集合</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> someInts1: <span class=\"type\">Set</span> = [<span class=\"number\">2</span>, <span class=\"number\">3</span>]\t\t\t</div><div class=\"line\"><span class=\"keyword\">var</span> someInts2: <span class=\"type\">Set</span>&lt;<span class=\"type\">Int</span>&gt; = [<span class=\"number\">2</span>, <span class=\"number\">3</span>]\t\t<span class=\"comment\">//等价于上一句，初始化为整数集合，指定了数据类型Int，只能添加Int数据，并添加了元素2，3</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> someInts3 = <span class=\"type\">Set</span>&lt;<span class=\"type\">Int</span>&gt;()\t\t\t<span class=\"comment\">//初始化为整数集合，指定了数据类型Int，只能添加Int数据，没有添加元素</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> someDoubles: <span class=\"type\">Set</span> = []\t\t\t<span class=\"comment\">//初始化为空集合，没有指定数据类型，通过添加数据自动判断</span></div><div class=\"line\">someDoubles.insert(<span class=\"number\">2.3</span>)\t\t\t\t<span class=\"comment\">//通过添加数据自动判断为Double集合</span></div></pre></td></tr></table></figure>\n<p>集合的元素只能有一种数据类型。</p>\n<h2 id=\"数量-1\"><a href=\"#数量-1\" class=\"headerlink\" title=\"数量\"></a>数量</h2><ul>\n<li>Set.count：属性<code>count</code>表示集合<code>Set</code>的元素个数。</li>\n<li>Set.isEmpty：属性<code>isEmpty</code>表示集合<code>Set</code>的元素是否为0个，结果为<code>true</code>或<code>false</code>。</li>\n</ul>\n<h2 id=\"遍历-1\"><a href=\"#遍历-1\" class=\"headerlink\" title=\"遍历\"></a>遍历</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> shoppinglist1: <span class=\"type\">Set</span> = [<span class=\"string\">\"Milk\"</span>, <span class=\"string\">\"Eggs\"</span>]</div><div class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> shoppingList &#123;</div><div class=\"line\">\t<span class=\"built_in\">println</span>(item)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//Milk</span></div><div class=\"line\"><span class=\"comment\">//Eggs</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> shoppinglist2: <span class=\"type\">Set</span> = [<span class=\"string\">\"Milk\"</span>, <span class=\"string\">\"Eggs\"</span>]</div><div class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> sorted(shoppingList) &#123;</div><div class=\"line\">\t<span class=\"built_in\">println</span>(item)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//Eggs</span></div><div class=\"line\"><span class=\"comment\">//Milk</span></div></pre></td></tr></table></figure>\n<p>因为<code>Set</code>中没有确定顺序，可以通过<code>sorted(Set)</code>函数返回一个排序的集合。</p>\n<h2 id=\"添加-1\"><a href=\"#添加-1\" class=\"headerlink\" title=\"添加\"></a>添加</h2><ul>\n<li>Set.imsert(Item)：将元素<code>Item</code>添加到集合<code>Set</code>中。</li>\n</ul>\n<h2 id=\"删除-1\"><a href=\"#删除-1\" class=\"headerlink\" title=\"删除\"></a>删除</h2><ul>\n<li>Set.remove(Item)：删除集合<code>Set</code>中的元素<code>Item</code>，成功则返回<code>Item</code>，如果集合中不包含<code>Item</code>则返回<code>nil</code>。</li>\n<li>Set.removeAll()：删除集合<code>Set</code>中的所有元素</li>\n</ul>\n<h2 id=\"包含\"><a href=\"#包含\" class=\"headerlink\" title=\"包含\"></a>包含</h2><ul>\n<li>Set.contains(Item)：检查集合<code>Set</code>是否包含元素<code>Item</code>，返回<code>true</code>或<code>false</code>。</li>\n</ul>\n<h2 id=\"比较\"><a href=\"#比较\" class=\"headerlink\" title=\"比较\"></a>比较</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> s1: <span class=\"type\">Set</span> = [<span class=\"number\">1</span>, <span class=\"number\">2</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> s2: <span class=\"type\">Set</span> = [<span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> cityAnimals: <span class=\"type\">Set</span> = [<span class=\"number\">6</span>, <span class=\"number\">7</span>]</div><div class=\"line\">s1.isSubsetOf(s2)</div><div class=\"line\"><span class=\"comment\">// true</span></div><div class=\"line\">s2.isSuperSetOf(s1)</div><div class=\"line\"><span class=\"comment\">// true</span></div><div class=\"line\">s2.isDisjointWith(s3)</div><div class=\"line\"><span class=\"comment\">// true</span></div></pre></td></tr></table></figure>\n<ul>\n<li>==：判断两个集合是否相等</li>\n<li>Set1.isSubsetOf(Set2)：判断<code>Set1</code>是否是<code>Set2</code>的子集</li>\n<li>Set1.isSupersetOf(Set2)：判断<code>Set1</code>是否是<code>Set2</code>的父集</li>\n<li>Set1.isStrictSubsetOf(Set2)，Set1.isStrictSupersetOf(Set2)：和上面方法相似，不过两个集合不能相等。</li>\n<li>Set1.isDisjoinWith(Set2)：判断<code>Set1</code>和<code>Set2</code>是否完成没有一个相同元素<br>上述方法都返回<code>true</code>或<code>false</code>。</li>\n</ul>\n<h2 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> oddDigits: <span class=\"type\">Set</span> = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> evenDigits: <span class=\"type\">Set</span> = [<span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>]</div><div class=\"line\"><span class=\"keyword\">let</span> singleDigitPrimeNumbers: <span class=\"type\">Set</span> = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>]</div><div class=\"line\">sorted(oddDigits.union(evenDigits))</div><div class=\"line\"><span class=\"comment\">// [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></div><div class=\"line\">sorted(oddDigits.intersect(evenDigits))</div><div class=\"line\"><span class=\"comment\">// []</span></div><div class=\"line\">sorted(oddDigits.subtract(singleDigitPrimeNumbers))</div><div class=\"line\"><span class=\"comment\">// [1, 9]</span></div><div class=\"line\">sorted(oddDigits.exclusiveOr(singleDigitPrimeNumbers))</div><div class=\"line\"><span class=\"comment\">// [1, 2, 9]</span></div></pre></td></tr></table></figure>\n<ul>\n<li>Set1.intersects(Set2)：返回<code>Set1</code>和<code>Set2</code>的交集，即两个集合中都有的元素</li>\n<li>Set1.union(Set2)：返回<code>Set1</code>和<code>Set2</code>的并集，即两个集合中的所有元素</li>\n<li>Set1.subtract(Set2)：返回<code>Set1</code>和<code>Set2</code>的差集，即<code>Set1</code>中有的且<code>Set2</code>中没有的元素</li>\n<li>Set1.exclusiverOr(Set2)：返回并集减去并集的集合，即<code>Set1</code>中独有的和<code>Set2</code>中独有的元素，也就是所有元素减去两个集合中都有的元素。</li>\n</ul>\n<h2 id=\"哈希值\"><a href=\"#哈希值\" class=\"headerlink\" title=\"哈希值\"></a>哈希值</h2><p>Swift中的所有基本类型默认都是可哈希的，通过<code>a.hashValue</code>求得哈希值。哈希值相等可以判断对象相同，如<code>a == b</code>即<code>a.hashValue == b.hashValue</code>。</p>\n<h1 id=\"字典\"><a href=\"#字典\" class=\"headerlink\" title=\"字典\"></a>字典</h1><p>字典中每个值（<em>Value</em>）都关联唯一的建（<em>key</em>）。</p>\n<h2 id=\"构造-2\"><a href=\"#构造-2\" class=\"headerlink\" title=\"构造\"></a>构造</h2><p>在构造过程中，键值对默认用<code>[key 1: value 1, key 2: value 2, key 3: value 3]</code>的形式。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> airports1 = [<span class=\"string\">\"TYO\"</span>: <span class=\"string\">\"Tokyo\"</span>, <span class=\"string\">\"DUB\"</span>: <span class=\"string\">\"Dublin\"</span>]\t\t\t\t<span class=\"comment\">//初始化为[String: String]字典，没有指定数据类型，通过添加数据自动判断</span></div><div class=\"line\"><span class=\"keyword\">var</span> airports2: [<span class=\"type\">String</span>: <span class=\"type\">String</span>] = [<span class=\"string\">\"TYO\"</span>: <span class=\"string\">\"Tokyo\"</span>, <span class=\"string\">\"DUB\"</span>: <span class=\"string\">\"Dublin\"</span>]\t\t<span class=\"comment\">//等价于上一句</span></div><div class=\"line\"><span class=\"keyword\">var</span> airports3: <span class=\"type\">Dictionary</span>&lt;<span class=\"type\">Stringr</span>, <span class=\"type\">String</span>&gt; = [<span class=\"string\">\"TYO\"</span>: <span class=\"string\">\"Tokyo\"</span>, <span class=\"string\">\"DUB\"</span>: <span class=\"string\">\"Dublin\"</span>]\t<span class=\"comment\">//等价于上一句</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> airports4 = <span class=\"type\">Dictionary</span>&lt;<span class=\"type\">String</span>, <span class=\"type\">Sting</span>&gt;()\t<span class=\"comment\">//初始化为[Sting: String]空字典，指定了数据类型[String: String]，只能添加[String:String]数据，没有添加元素</span></div><div class=\"line\"><span class=\"keyword\">var</span> airports5 = [<span class=\"type\">String</span>: <span class=\"type\">String</span>]()\t\t<span class=\"comment\">//等价于上一句</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> airports6 = [:]\t<span class=\"comment\">//初始化为空字典，没有指定数据类型，通过添加数据自动判断</span></div><div class=\"line\">airports6[<span class=\"number\">2</span>] = <span class=\"number\">3</span>\t<span class=\"comment\">//通过添加数据自动判断为[Int: Int]字典</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"数量-2\"><a href=\"#数量-2\" class=\"headerlink\" title=\"数量\"></a>数量</h2><ul>\n<li>Dictionary.count：属性<code>count</code>表示字典<code>Dictionary</code>的元素个数。</li>\n<li>Dictionary.isEmpty：属性<code>isEmpty</code>表示字典<code>Dictionary</code>的元素是否为0个，结果为<code>true</code>或<code>false</code>。</li>\n</ul>\n<h2 id=\"访问-1\"><a href=\"#访问-1\" class=\"headerlink\" title=\"访问\"></a>访问</h2><ul>\n<li>Dictionary[key]：通过下标<code>[key]</code>访问字典<code>Dictionary</code>的键<code>key</code>对应的值，可修改。</li>\n</ul>\n<h2 id=\"遍历-2\"><a href=\"#遍历-2\" class=\"headerlink\" title=\"遍历\"></a>遍历</h2><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">for</span> (airportCode, airportName) <span class=\"keyword\">in</span> airports &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"\\(airportCode): \\(airportName)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// TYO: Tokyo</span></div><div class=\"line\"><span class=\"comment\">// DUB: Dublin</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> airportCode <span class=\"keyword\">in</span> airports.keys &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Airport code: \\(airportCode)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Airport code: TYO</span></div><div class=\"line\"><span class=\"comment\">// Airport code: DUB</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">for</span> airportName <span class=\"keyword\">in</span> airports.values &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Airport name: \\(airportName)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// Airport name: Tokyo</span></div><div class=\"line\"><span class=\"comment\">// Airport name: Dublin</span></div></pre></td></tr></table></figure>\n<p><code>for-in</code>可便利字典，可便利键值对<code>(key, value)</code>，也可以通过属性<code>keys</code>或<code>values</code>只便利键值其中一项。<br>字典的属性<code>keys</code>和<code>values</code>返回数组。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> airportCodes = <span class=\"type\">Array</span>(airports.keys)</div><div class=\"line\"><span class=\"comment\">// airportCodes is [\"TYO\", \"DUB\"]</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> airportNames = <span class=\"type\">Array</span>(airports.values)</div><div class=\"line\"><span class=\"comment\">// airportNames is [\"Tokyo\", \"Dublin\"]</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"添加-2\"><a href=\"#添加-2\" class=\"headerlink\" title=\"添加\"></a>添加</h2><ul>\n<li>Dictionary[key] = value：更新字典<code>Dictionary</code>中键<code>key</code>对应的值，如果不存在，则将键值对<key, valye=\"\">添加到字典<code>Dictionary</code>中。</key,></li>\n<li>Dicitonary.updateValue(value, forkey: key)：更新字典<code>Dictionary</code>中键<code>key</code>对应的值，如果不存在，则将键值对<key, value=\"\">添加到字典<code>Dictionary</code>。<br>注意：该方法返回<strong>原值</strong>，即执行<code>updateValue</code>方法之前键<code>key</code>对应的值，如果不存在，则返回<code>nil</code>。</key,></li>\n</ul>\n<h2 id=\"删除-2\"><a href=\"#删除-2\" class=\"headerlink\" title=\"删除\"></a>删除</h2><ul>\n<li>Dictionary[key] = nil：删除字典<code>Dictionary</code>中键<code>key</code>对应的值。</li>\n<li>Dictionary.removeValueForKey(key)：删除字典<code>Dictionary</code>中键<code>key</code>对应的值，返回删除的值，如果不存在，则返回<code>nil</code>。</li>\n</ul>\n<p>添加操作和删除操作返回值有可能为<code>nil</code>，都是可选类型，使用时需要进行判断是否有值。</p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>"},{"title":"Swift基础入门(5)：函数和闭包","date":"2015-07-16T09:11:53.000Z","toc":true,"_content":"\n本篇介绍Swift的基础知识：函数和闭包（Closure）。\n\n<!--more-->\n**Title: [Swift基础入门(5)：函数和闭包](https://aidaizyy.github.io/swift_5)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-07-22](http://aidaizyy.github.io)**\n\n# 函数\n## 函数原型\n`func functionName(parameters) -> returnType { statements }`\n``` swift\nfunc halfOpenRangeLength(start: Int, end: Int) -> Int {\n    return end - start\n}\nprintln(halfOpenRangeLength(1, 10))\n// prints \"9\"\n```\n函数前必须加标识符`func`，函数名`halfOpenRangeLength`需要传入两个参数`start`和`end`，都是`Int`类型，返回`Int`类型。\n可以没有参数，也可以没有返回值，则写作`func halfOpenRangeLength() { statements }`，`statements`中不带`return`语句。\n\n函数可以有多个返回值，用元组表示返回值。\n``` swift\nfunc count(string: String) -> (vowels: Int, consonants: Int, others: Int) {\n    var vowels = 0, consonants = 0, others = 0\n    for character in string {\n        switch String(character).lowercaseString {\n        case \"a\", \"e\", \"i\", \"o\", \"u\":\n            ++vowels\n        case \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\",\n          \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\":\n            ++consonants\n        default:\n            ++others\n        }\n    }\n    return (vowels, consonants, others)\n}\n\nlet total = count(\"some arbitrary string!\")\nprintln(\"\\(total.vowels) vowels and \\(total.consonants) consonants\")\n// prints \"6 vowels and 13 consonants\"\n```\n`func count(String) -> (Int, Int, Int)`函数，传入一个`String`值，返回一个带3个`Int`值的元组。\n返回的元组成员不需要再命名，因为在函数定义时已经命名了返回元组成员的名称。\n当然也可以不命名，返回类型写作`(Int, Int, Int)`的形式，用`total.0`，`total.1`和`total.2`去获取元组`total`的第1个，第2个和第3个成员的值。\n\n## 函数参数\n\n### 外部参数名\n函数参数的名称作为局部参数名，只能在函数中使用。定义外部参数名，可以在函数外部使用帮助函数参数的意图清晰，`func functionName(externalParameterName localParameterName: dataType) { statements }`。\n注意：但是一旦定义了外部参数名，在函数调用时就**必须使用**。\n外部参数名和局部参数名如果一致，可在局部参数名前加`#`表示，`func functionName(#parameterName: dataType) { statements }`。\n``` swift\nfunc containsCharacter(str string: String, #characterToFind: Character) -> Bool {\n    for character in string {\n        if character == characterToFind {\n            return true\n        }\n    }\n    return false\n}\nlet containsAVee = containsCharacter(str: \"aardvark\", characterToFind: \"v\")\n// containsAVee equals true, because \"aardvark\" contains a \"v”\n```\n\n### 默认参数值\n函数参数可以定义默认值，但必须在函数参数列表的最后。调用时，如果不指定参数的值，则使用默认值。\n定义了默认值的函数参数会自动提供外部参数名，和局部参数名一样，也可以自己提供，如果不使用默认值，则必须在调用时使用外部参数名。\n``` swift\nfunc join(s1: String, s2: String, joiner: String = \" \", flag: String = \"!\") -> String {\n    return s1 + joiner + s2 + flag\n}\n\njoin(\"hello\", \"world\", joiner: \"-\")\n// returns \"hello-world!\"\n```\n第3个参数`joiner`和第四个参数`flag`都是提供了默认参数值，自动提供了外部参数名`joiner`和`flag`，与局部参数名一致。\n`joiner`提供了值，则必须使用参数名`joiner: \"-\"`。\n`flag`使用默认值，则不需要在调用时出现。\n\n### 可变参数\n可变参数（_variadic parameter_）表示不确定数量的输入参数，在参数后加`...`表示。一个函数最多只能有一个可变参数， 且必须是参数列表的最后一个参数。\n``` swift\nfunc arithmeticMean(numbers: Double...) -> Double {\n    var total: Double = 0\n    for number in numbers {\n        total += number\n    }\n    return total / Double(numbers.count)\n}\narithmeticMean(1, 2, 3, 4, 5)\n// returns 3.0, which is the arithmetic mean of these five numbers\narithmeticMean(3, 8, 19)\n// returns 10.0, which is the arithmetic mean of these three numbers\n```\n\n### 变量参数\nSwift的函数参数采用值拷贝传递，传递进去的参数是不能进行修改的，如果我们需要，可以定义变量参数。在参数前加`var`定义变量参数。\n``` swift\nfunc appendCharacter(var string: String, flag: Character) -> String {\n    string.append(flag)\n    return string\n}\nlet originalString = \"hello\"\nlet paddedString = appendCharacter(originalString, \"!\")\n// paddedString is equal to \"hello!\"\n```\n`string`在函数内被修改了，但是作为局部变量，只能在函数内部使用。\n\n### 输入输出参数\nSwift的函数参数不能被修改，使用变量参数修改后也不能传递到外部，采用输入输出参数可以解决这个问题。\n在参数前加`inout`定义输入输出参数。\n- 函数调用时，输入输出参数只能传入变量\n- 输入输出参数不能有默认参数值。\n- 输入输出参数不能是可变参数。\n``` swift\nfunc appendCharacter(inout string: String, flag: Character) {\n    string.append(flag)\n}\nvar originalString = \"hello\"\nappendCharacter(&originalString, \"!\")\n// originalString is equal to \"hello!\"\n```\n`appendCharacter`函数传入参数时，在输入输出参数前必须加`&`前缀。\n\n## 函数类型\n\n函数类型和其他类型一样，可以定义并赋值，如：\n``` swift\nfunc addTwoInts(a: Int, b: Int) -> Int {\n    return a + b\n}\n\nvar mathFunciton1: (Int, Int) -> Int =addTwoInts\n\nvar mathFunciton2 = addTwoInts\t\t//通过赋值自动判断mathFunction类型为函数类型\n\nprintln(\"Result: \\(mathFunction1(2, 3))\")\n// prints \"Result: 5\"\nprintln(\"Result: \\(mathFunction2(2, 3))\")\n// prints \"Result: 5\"\n```\n\n同样函数类型可以作为函数的参数类型和返回类型，形式如`func printMathResult(mathFunction: (Int, Int) -> Int, a: Int, b: Int)`和`func chooseStepFunction(backwards: Bool) -> (Int) -> Int`。前者的一个参数为`mathFunction: (Int, Int) -> Int`，后者的返回`(Int) -> Int`，都没有`func`关键字。\n\n函数也支持嵌套函数，在函数A内部定义的函数B只能在函数A内调用。\n\n# 闭包\n\n## 闭包表达式\n闭包指自包含的函数代码块，可以在代码中被传递和使用。\n函数就是特殊的闭包。\n闭包的一般形式：`{ (parameters) -> returnType in statements }\n和函数不同的是，用`in`替代了原本函数的大括号，并在最外层加上大括号。\n``` swift\nfunc backwards(s1: String, s2: String) -> Bool {\n    return s1 > s2\n}\nvar reversed = sorted(names, backwards)\n// reversed 为 [\"Ewa\", \"Daniella\", \"Chris\", \"Barry\", \"Alex\"]\n```\n`sorted`函数需要两个参数，第一个参数是需要排序的数组，第二个参数是确定排序顺序的闭包函数，传入与数组类型相同的两个值，并返回`Bool`值。如果第二个参数返回`true`则两个数组元素顺序不变；如果第二个参数返回`false`则两个数组元素顺序相反。\n所以闭包函数中定义`return s1 > s2`，如果`s1`大于`s2`顺序不变，如果`s1`不大于`s2`则交换`s1`和`s2`的顺序，使值大的元素排在数组的前列，也就是逆序排列。\n就上面的代码改为闭包表达式的形式为：\n``` swift\nreversed = sorted(names, { (s1: String, s2: String) -> Bool in\n    return s1 > s2\n})\n```\n用闭包表达式代替了闭包函数，`in`替换函数的大括号，并在外层添加大括号。\n\n闭包表达式的参数类型由第一个参数数组元素的类型决定，返回类型确定为`Bool`型，创建闭包时可以省略已知的信息：\n``` swift\nreversed = sorted(names, { s1, s2 in return s1 > s2 })\n```\n闭包表达式中，如果只有单行表达式，比如`return s1 > s2`一行，可以省略`return`关键字：\n``` swift\nreversed = sorted(names, { s1, s2 in s1 > s2 })\n```\n闭包表达式的参数名称可以缩写成$0，$1，$2等，来顺序调用闭包参数：\n``` swift\nreversed = sorted(names, { $0 > $1 })\n```\n另外，还可以用运算符函数（operator function）使闭包表达式更简短。因为`>`的定义就是接收两个参数，并返回`Bool`类型值，所以可以写：\n``` swift\nreversed = sorted(names, >)\n```\n尾随闭包（trailing closure）：如果闭包表达是是函数的最后一个参数，可以把闭包放到函数的小括号后面，增强可读性：\n``` swift\nreversed = sorted(names, { $0 > $1 })\t//闭包表达式\n\nreversed = sorted(names) { $0 > $1 }\t//尾随闭包\n```\n如果闭包很长，尾随闭包就会非常有用。\n如果函数中只有闭包一个参数，则可以省略小括号，写成`reversed = sorted { $0 < $1 }`的形式。\n\n## 嵌套函数\n嵌套函数是最简单的闭包形式。嵌套函数可以捕获外部函数的参数和定义的常量变量。\n``` swift\nfunc makeIncrementor(forIncrement amount: Int) -> () -> Int {\n    var runningTotal = 0\n    func incrementor() -> Int {\n        runningTotal += amount\n        return runningTotal\n    }\n    return incrementor\n}\n```\n`incrementor`函数调用的`amount`是外部函数的参数，捕获并存储了副本；`runningTotal`会被修改，所以不可以是副本，而是捕获了一个引用，就算外部函数结束都不会消失。Swift会自动决定捕获引用还是副本。\n``` swift\nlet incrementByTen = makeIncrementor(forIncrement: 10)\n\nincrementByTen()\n// 返回的值为10\nincrementByTen()\n// 返回的值为20\nincrementByTen()\n// 返回的值为30\n\nlet incrementBySeven = makeIncrementor(forIncrement: 7)\nincrementBySeven()\n// 返回的值为7\nincrementByTen()\n// 返回的值为40\n```\n`incrementByTen`创建时，`runningTotal`也创建了，每调用一次函数其值就会增加10。\n`incremetnBySeven`创建时，一个新的`runningTotal`也创建了，每调用一次函数其值就会增加7。这个变量和`incrementByTen`中的变量没有任何关系，互不干扰。\n\n注意：无论是函数还是闭包，在赋值给常量或变量时都是**引用拷贝**，指向的是同一个函数/闭包对象。\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","source":"_posts/swift_5.md","raw":"title: \"Swift基础入门(5)：函数和闭包\"\ndate: 2015-07-16 17:11:53\ntags:\n- swift\ncategories: swift\ntoc: true\n---\n\n本篇介绍Swift的基础知识：函数和闭包（Closure）。\n\n<!--more-->\n**Title: [Swift基础入门(5)：函数和闭包](https://aidaizyy.github.io/swift_5)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-07-22](http://aidaizyy.github.io)**\n\n# 函数\n## 函数原型\n`func functionName(parameters) -> returnType { statements }`\n``` swift\nfunc halfOpenRangeLength(start: Int, end: Int) -> Int {\n    return end - start\n}\nprintln(halfOpenRangeLength(1, 10))\n// prints \"9\"\n```\n函数前必须加标识符`func`，函数名`halfOpenRangeLength`需要传入两个参数`start`和`end`，都是`Int`类型，返回`Int`类型。\n可以没有参数，也可以没有返回值，则写作`func halfOpenRangeLength() { statements }`，`statements`中不带`return`语句。\n\n函数可以有多个返回值，用元组表示返回值。\n``` swift\nfunc count(string: String) -> (vowels: Int, consonants: Int, others: Int) {\n    var vowels = 0, consonants = 0, others = 0\n    for character in string {\n        switch String(character).lowercaseString {\n        case \"a\", \"e\", \"i\", \"o\", \"u\":\n            ++vowels\n        case \"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\",\n          \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\":\n            ++consonants\n        default:\n            ++others\n        }\n    }\n    return (vowels, consonants, others)\n}\n\nlet total = count(\"some arbitrary string!\")\nprintln(\"\\(total.vowels) vowels and \\(total.consonants) consonants\")\n// prints \"6 vowels and 13 consonants\"\n```\n`func count(String) -> (Int, Int, Int)`函数，传入一个`String`值，返回一个带3个`Int`值的元组。\n返回的元组成员不需要再命名，因为在函数定义时已经命名了返回元组成员的名称。\n当然也可以不命名，返回类型写作`(Int, Int, Int)`的形式，用`total.0`，`total.1`和`total.2`去获取元组`total`的第1个，第2个和第3个成员的值。\n\n## 函数参数\n\n### 外部参数名\n函数参数的名称作为局部参数名，只能在函数中使用。定义外部参数名，可以在函数外部使用帮助函数参数的意图清晰，`func functionName(externalParameterName localParameterName: dataType) { statements }`。\n注意：但是一旦定义了外部参数名，在函数调用时就**必须使用**。\n外部参数名和局部参数名如果一致，可在局部参数名前加`#`表示，`func functionName(#parameterName: dataType) { statements }`。\n``` swift\nfunc containsCharacter(str string: String, #characterToFind: Character) -> Bool {\n    for character in string {\n        if character == characterToFind {\n            return true\n        }\n    }\n    return false\n}\nlet containsAVee = containsCharacter(str: \"aardvark\", characterToFind: \"v\")\n// containsAVee equals true, because \"aardvark\" contains a \"v”\n```\n\n### 默认参数值\n函数参数可以定义默认值，但必须在函数参数列表的最后。调用时，如果不指定参数的值，则使用默认值。\n定义了默认值的函数参数会自动提供外部参数名，和局部参数名一样，也可以自己提供，如果不使用默认值，则必须在调用时使用外部参数名。\n``` swift\nfunc join(s1: String, s2: String, joiner: String = \" \", flag: String = \"!\") -> String {\n    return s1 + joiner + s2 + flag\n}\n\njoin(\"hello\", \"world\", joiner: \"-\")\n// returns \"hello-world!\"\n```\n第3个参数`joiner`和第四个参数`flag`都是提供了默认参数值，自动提供了外部参数名`joiner`和`flag`，与局部参数名一致。\n`joiner`提供了值，则必须使用参数名`joiner: \"-\"`。\n`flag`使用默认值，则不需要在调用时出现。\n\n### 可变参数\n可变参数（_variadic parameter_）表示不确定数量的输入参数，在参数后加`...`表示。一个函数最多只能有一个可变参数， 且必须是参数列表的最后一个参数。\n``` swift\nfunc arithmeticMean(numbers: Double...) -> Double {\n    var total: Double = 0\n    for number in numbers {\n        total += number\n    }\n    return total / Double(numbers.count)\n}\narithmeticMean(1, 2, 3, 4, 5)\n// returns 3.0, which is the arithmetic mean of these five numbers\narithmeticMean(3, 8, 19)\n// returns 10.0, which is the arithmetic mean of these three numbers\n```\n\n### 变量参数\nSwift的函数参数采用值拷贝传递，传递进去的参数是不能进行修改的，如果我们需要，可以定义变量参数。在参数前加`var`定义变量参数。\n``` swift\nfunc appendCharacter(var string: String, flag: Character) -> String {\n    string.append(flag)\n    return string\n}\nlet originalString = \"hello\"\nlet paddedString = appendCharacter(originalString, \"!\")\n// paddedString is equal to \"hello!\"\n```\n`string`在函数内被修改了，但是作为局部变量，只能在函数内部使用。\n\n### 输入输出参数\nSwift的函数参数不能被修改，使用变量参数修改后也不能传递到外部，采用输入输出参数可以解决这个问题。\n在参数前加`inout`定义输入输出参数。\n- 函数调用时，输入输出参数只能传入变量\n- 输入输出参数不能有默认参数值。\n- 输入输出参数不能是可变参数。\n``` swift\nfunc appendCharacter(inout string: String, flag: Character) {\n    string.append(flag)\n}\nvar originalString = \"hello\"\nappendCharacter(&originalString, \"!\")\n// originalString is equal to \"hello!\"\n```\n`appendCharacter`函数传入参数时，在输入输出参数前必须加`&`前缀。\n\n## 函数类型\n\n函数类型和其他类型一样，可以定义并赋值，如：\n``` swift\nfunc addTwoInts(a: Int, b: Int) -> Int {\n    return a + b\n}\n\nvar mathFunciton1: (Int, Int) -> Int =addTwoInts\n\nvar mathFunciton2 = addTwoInts\t\t//通过赋值自动判断mathFunction类型为函数类型\n\nprintln(\"Result: \\(mathFunction1(2, 3))\")\n// prints \"Result: 5\"\nprintln(\"Result: \\(mathFunction2(2, 3))\")\n// prints \"Result: 5\"\n```\n\n同样函数类型可以作为函数的参数类型和返回类型，形式如`func printMathResult(mathFunction: (Int, Int) -> Int, a: Int, b: Int)`和`func chooseStepFunction(backwards: Bool) -> (Int) -> Int`。前者的一个参数为`mathFunction: (Int, Int) -> Int`，后者的返回`(Int) -> Int`，都没有`func`关键字。\n\n函数也支持嵌套函数，在函数A内部定义的函数B只能在函数A内调用。\n\n# 闭包\n\n## 闭包表达式\n闭包指自包含的函数代码块，可以在代码中被传递和使用。\n函数就是特殊的闭包。\n闭包的一般形式：`{ (parameters) -> returnType in statements }\n和函数不同的是，用`in`替代了原本函数的大括号，并在最外层加上大括号。\n``` swift\nfunc backwards(s1: String, s2: String) -> Bool {\n    return s1 > s2\n}\nvar reversed = sorted(names, backwards)\n// reversed 为 [\"Ewa\", \"Daniella\", \"Chris\", \"Barry\", \"Alex\"]\n```\n`sorted`函数需要两个参数，第一个参数是需要排序的数组，第二个参数是确定排序顺序的闭包函数，传入与数组类型相同的两个值，并返回`Bool`值。如果第二个参数返回`true`则两个数组元素顺序不变；如果第二个参数返回`false`则两个数组元素顺序相反。\n所以闭包函数中定义`return s1 > s2`，如果`s1`大于`s2`顺序不变，如果`s1`不大于`s2`则交换`s1`和`s2`的顺序，使值大的元素排在数组的前列，也就是逆序排列。\n就上面的代码改为闭包表达式的形式为：\n``` swift\nreversed = sorted(names, { (s1: String, s2: String) -> Bool in\n    return s1 > s2\n})\n```\n用闭包表达式代替了闭包函数，`in`替换函数的大括号，并在外层添加大括号。\n\n闭包表达式的参数类型由第一个参数数组元素的类型决定，返回类型确定为`Bool`型，创建闭包时可以省略已知的信息：\n``` swift\nreversed = sorted(names, { s1, s2 in return s1 > s2 })\n```\n闭包表达式中，如果只有单行表达式，比如`return s1 > s2`一行，可以省略`return`关键字：\n``` swift\nreversed = sorted(names, { s1, s2 in s1 > s2 })\n```\n闭包表达式的参数名称可以缩写成$0，$1，$2等，来顺序调用闭包参数：\n``` swift\nreversed = sorted(names, { $0 > $1 })\n```\n另外，还可以用运算符函数（operator function）使闭包表达式更简短。因为`>`的定义就是接收两个参数，并返回`Bool`类型值，所以可以写：\n``` swift\nreversed = sorted(names, >)\n```\n尾随闭包（trailing closure）：如果闭包表达是是函数的最后一个参数，可以把闭包放到函数的小括号后面，增强可读性：\n``` swift\nreversed = sorted(names, { $0 > $1 })\t//闭包表达式\n\nreversed = sorted(names) { $0 > $1 }\t//尾随闭包\n```\n如果闭包很长，尾随闭包就会非常有用。\n如果函数中只有闭包一个参数，则可以省略小括号，写成`reversed = sorted { $0 < $1 }`的形式。\n\n## 嵌套函数\n嵌套函数是最简单的闭包形式。嵌套函数可以捕获外部函数的参数和定义的常量变量。\n``` swift\nfunc makeIncrementor(forIncrement amount: Int) -> () -> Int {\n    var runningTotal = 0\n    func incrementor() -> Int {\n        runningTotal += amount\n        return runningTotal\n    }\n    return incrementor\n}\n```\n`incrementor`函数调用的`amount`是外部函数的参数，捕获并存储了副本；`runningTotal`会被修改，所以不可以是副本，而是捕获了一个引用，就算外部函数结束都不会消失。Swift会自动决定捕获引用还是副本。\n``` swift\nlet incrementByTen = makeIncrementor(forIncrement: 10)\n\nincrementByTen()\n// 返回的值为10\nincrementByTen()\n// 返回的值为20\nincrementByTen()\n// 返回的值为30\n\nlet incrementBySeven = makeIncrementor(forIncrement: 7)\nincrementBySeven()\n// 返回的值为7\nincrementByTen()\n// 返回的值为40\n```\n`incrementByTen`创建时，`runningTotal`也创建了，每调用一次函数其值就会增加10。\n`incremetnBySeven`创建时，一个新的`runningTotal`也创建了，每调用一次函数其值就会增加7。这个变量和`incrementByTen`中的变量没有任何关系，互不干扰。\n\n注意：无论是函数还是闭包，在赋值给常量或变量时都是**引用拷贝**，指向的是同一个函数/闭包对象。\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","slug":"swift_5","published":1,"updated":"2017-05-08T16:40:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2gdu6l1001dv1o3gagoshcj","content":"<p>本篇介绍Swift的基础知识：函数和闭包（Closure）。</p>\n<a id=\"more\"></a>\n<p><strong>Title: <a href=\"https://aidaizyy.github.io/swift_5\" target=\"_blank\" rel=\"external\">Swift基础入门(5)：函数和闭包</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#x6d;&#97;&#105;&#108;&#116;&#111;&#58;&#97;&#x69;&#x64;&#x61;&#x69;&#122;&#121;&#x79;&#x40;&#x67;&#109;&#97;&#x69;&#108;&#46;&#99;&#111;&#109;\">&#97;&#x69;&#x64;&#x61;&#x69;&#122;&#121;&#x79;&#x40;&#x67;&#109;&#97;&#x69;&#108;&#46;&#99;&#111;&#109;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-07-22</a></strong></p>\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><h2 id=\"函数原型\"><a href=\"#函数原型\" class=\"headerlink\" title=\"函数原型\"></a>函数原型</h2><p><code>func functionName(parameters) -&gt; returnType { statements }</code><br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">halfOpenRangeLength</span><span class=\"params\">(start: Int, end: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> end - start</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">println</span>(halfOpenRangeLength(<span class=\"number\">1</span>, <span class=\"number\">10</span>))</div><div class=\"line\"><span class=\"comment\">// prints \"9\"</span></div></pre></td></tr></table></figure></p>\n<p>函数前必须加标识符<code>func</code>，函数名<code>halfOpenRangeLength</code>需要传入两个参数<code>start</code>和<code>end</code>，都是<code>Int</code>类型，返回<code>Int</code>类型。<br>可以没有参数，也可以没有返回值，则写作<code>func halfOpenRangeLength() { statements }</code>，<code>statements</code>中不带<code>return</code>语句。</p>\n<p>函数可以有多个返回值，用元组表示返回值。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">count</span><span class=\"params\">(string: String)</span></span> -&gt; (vowels: <span class=\"type\">Int</span>, consonants: <span class=\"type\">Int</span>, others: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> vowels = <span class=\"number\">0</span>, consonants = <span class=\"number\">0</span>, others = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> character <span class=\"keyword\">in</span> string &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> <span class=\"type\">String</span>(character).lowercaseString &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"a\"</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"i\"</span>, <span class=\"string\">\"o\"</span>, <span class=\"string\">\"u\"</span>:</div><div class=\"line\">            ++vowels</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"f\"</span>, <span class=\"string\">\"g\"</span>, <span class=\"string\">\"h\"</span>, <span class=\"string\">\"j\"</span>, <span class=\"string\">\"k\"</span>, <span class=\"string\">\"l\"</span>, <span class=\"string\">\"m\"</span>,</div><div class=\"line\">          <span class=\"string\">\"n\"</span>, <span class=\"string\">\"p\"</span>, <span class=\"string\">\"q\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"string\">\"s\"</span>, <span class=\"string\">\"t\"</span>, <span class=\"string\">\"v\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"string\">\"x\"</span>, <span class=\"string\">\"y\"</span>, <span class=\"string\">\"z\"</span>:</div><div class=\"line\">            ++consonants</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            ++others</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> (vowels, consonants, others)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> total = <span class=\"built_in\">count</span>(<span class=\"string\">\"some arbitrary string!\"</span>)</div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"\\(total.vowels) vowels and \\(total.consonants) consonants\"</span>)</div><div class=\"line\"><span class=\"comment\">// prints \"6 vowels and 13 consonants\"</span></div></pre></td></tr></table></figure></p>\n<p><code>func count(String) -&gt; (Int, Int, Int)</code>函数，传入一个<code>String</code>值，返回一个带3个<code>Int</code>值的元组。<br>返回的元组成员不需要再命名，因为在函数定义时已经命名了返回元组成员的名称。<br>当然也可以不命名，返回类型写作<code>(Int, Int, Int)</code>的形式，用<code>total.0</code>，<code>total.1</code>和<code>total.2</code>去获取元组<code>total</code>的第1个，第2个和第3个成员的值。</p>\n<h2 id=\"函数参数\"><a href=\"#函数参数\" class=\"headerlink\" title=\"函数参数\"></a>函数参数</h2><h3 id=\"外部参数名\"><a href=\"#外部参数名\" class=\"headerlink\" title=\"外部参数名\"></a>外部参数名</h3><p>函数参数的名称作为局部参数名，只能在函数中使用。定义外部参数名，可以在函数外部使用帮助函数参数的意图清晰，<code>func functionName(externalParameterName localParameterName: dataType) { statements }</code>。<br>注意：但是一旦定义了外部参数名，在函数调用时就<strong>必须使用</strong>。<br>外部参数名和局部参数名如果一致，可在局部参数名前加<code>#</code>表示，<code>func functionName(#parameterName: dataType) { statements }</code>。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">containsCharacter</span><span class=\"params\">(str string: String, #characterToFind: Character)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> character <span class=\"keyword\">in</span> string &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> character == characterToFind &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> containsAVee = containsCharacter(str: <span class=\"string\">\"aardvark\"</span>, characterToFind: <span class=\"string\">\"v\"</span>)</div><div class=\"line\"><span class=\"comment\">// containsAVee equals true, because \"aardvark\" contains a \"v”</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"默认参数值\"><a href=\"#默认参数值\" class=\"headerlink\" title=\"默认参数值\"></a>默认参数值</h3><p>函数参数可以定义默认值，但必须在函数参数列表的最后。调用时，如果不指定参数的值，则使用默认值。<br>定义了默认值的函数参数会自动提供外部参数名，和局部参数名一样，也可以自己提供，如果不使用默认值，则必须在调用时使用外部参数名。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">join</span><span class=\"params\">(s1: String, s2: String, joiner: String = <span class=\"string\">\" \"</span>, flag: String = <span class=\"string\">\"!\"</span>)</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> s1 + joiner + s2 + flag</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">join</span>(<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>, joiner: <span class=\"string\">\"-\"</span>)</div><div class=\"line\"><span class=\"comment\">// returns \"hello-world!\"</span></div></pre></td></tr></table></figure></p>\n<p>第3个参数<code>joiner</code>和第四个参数<code>flag</code>都是提供了默认参数值，自动提供了外部参数名<code>joiner</code>和<code>flag</code>，与局部参数名一致。<br><code>joiner</code>提供了值，则必须使用参数名<code>joiner: &quot;-&quot;</code>。<br><code>flag</code>使用默认值，则不需要在调用时出现。</p>\n<h3 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h3><p>可变参数（<em>variadic parameter</em>）表示不确定数量的输入参数，在参数后加<code>...</code>表示。一个函数最多只能有一个可变参数， 且必须是参数列表的最后一个参数。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">arithmeticMean</span><span class=\"params\">(numbers: Double...)</span></span> -&gt; <span class=\"type\">Double</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> total: <span class=\"type\">Double</span> = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> numbers &#123;</div><div class=\"line\">        total += number</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> total / <span class=\"type\">Double</span>(numbers.<span class=\"built_in\">count</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">arithmeticMean(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"comment\">// returns 3.0, which is the arithmetic mean of these five numbers</span></div><div class=\"line\">arithmeticMean(<span class=\"number\">3</span>, <span class=\"number\">8</span>, <span class=\"number\">19</span>)</div><div class=\"line\"><span class=\"comment\">// returns 10.0, which is the arithmetic mean of these three numbers</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"变量参数\"><a href=\"#变量参数\" class=\"headerlink\" title=\"变量参数\"></a>变量参数</h3><p>Swift的函数参数采用值拷贝传递，传递进去的参数是不能进行修改的，如果我们需要，可以定义变量参数。在参数前加<code>var</code>定义变量参数。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">appendCharacter</span><span class=\"params\">(<span class=\"keyword\">var</span> string: String, flag: Character)</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">    string.append(flag)</div><div class=\"line\">    <span class=\"keyword\">return</span> string</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> originalString = <span class=\"string\">\"hello\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> paddedString = appendCharacter(originalString, <span class=\"string\">\"!\"</span>)</div><div class=\"line\"><span class=\"comment\">// paddedString is equal to \"hello!\"</span></div></pre></td></tr></table></figure></p>\n<p><code>string</code>在函数内被修改了，但是作为局部变量，只能在函数内部使用。</p>\n<h3 id=\"输入输出参数\"><a href=\"#输入输出参数\" class=\"headerlink\" title=\"输入输出参数\"></a>输入输出参数</h3><p>Swift的函数参数不能被修改，使用变量参数修改后也不能传递到外部，采用输入输出参数可以解决这个问题。<br>在参数前加<code>inout</code>定义输入输出参数。</p>\n<ul>\n<li>函数调用时，输入输出参数只能传入变量</li>\n<li>输入输出参数不能有默认参数值。</li>\n<li>输入输出参数不能是可变参数。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">appendCharacter</span><span class=\"params\">(<span class=\"keyword\">inout</span> string: String, flag: Character)</span></span> &#123;</div><div class=\"line\">    string.append(flag)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> originalString = <span class=\"string\">\"hello\"</span></div><div class=\"line\">appendCharacter(&amp;originalString, <span class=\"string\">\"!\"</span>)</div><div class=\"line\"><span class=\"comment\">// originalString is equal to \"hello!\"</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><code>appendCharacter</code>函数传入参数时，在输入输出参数前必须加<code>&amp;</code>前缀。</p>\n<h2 id=\"函数类型\"><a href=\"#函数类型\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h2><p>函数类型和其他类型一样，可以定义并赋值，如：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addTwoInts</span><span class=\"params\">(a: Int, b: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a + b</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> mathFunciton1: (<span class=\"type\">Int</span>, <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> =addTwoInts</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> mathFunciton2 = addTwoInts\t\t<span class=\"comment\">//通过赋值自动判断mathFunction类型为函数类型</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"Result: \\(mathFunction1(2, 3))\"</span>)</div><div class=\"line\"><span class=\"comment\">// prints \"Result: 5\"</span></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"Result: \\(mathFunction2(2, 3))\"</span>)</div><div class=\"line\"><span class=\"comment\">// prints \"Result: 5\"</span></div></pre></td></tr></table></figure></p>\n<p>同样函数类型可以作为函数的参数类型和返回类型，形式如<code>func printMathResult(mathFunction: (Int, Int) -&gt; Int, a: Int, b: Int)</code>和<code>func chooseStepFunction(backwards: Bool) -&gt; (Int) -&gt; Int</code>。前者的一个参数为<code>mathFunction: (Int, Int) -&gt; Int</code>，后者的返回<code>(Int) -&gt; Int</code>，都没有<code>func</code>关键字。</p>\n<p>函数也支持嵌套函数，在函数A内部定义的函数B只能在函数A内调用。</p>\n<h1 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h1><h2 id=\"闭包表达式\"><a href=\"#闭包表达式\" class=\"headerlink\" title=\"闭包表达式\"></a>闭包表达式</h2><p>闭包指自包含的函数代码块，可以在代码中被传递和使用。<br>函数就是特殊的闭包。<br>闭包的一般形式：<code>{ (parameters) -&gt; returnType in statements }\n和函数不同的是，用</code>in`替代了原本函数的大括号，并在最外层加上大括号。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">backwards</span><span class=\"params\">(s1: String, s2: String)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> s1 &gt; s2</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> reversed = sorted(names, backwards)</div><div class=\"line\"><span class=\"comment\">// reversed 为 [\"Ewa\", \"Daniella\", \"Chris\", \"Barry\", \"Alex\"]</span></div></pre></td></tr></table></figure></p>\n<p><code>sorted</code>函数需要两个参数，第一个参数是需要排序的数组，第二个参数是确定排序顺序的闭包函数，传入与数组类型相同的两个值，并返回<code>Bool</code>值。如果第二个参数返回<code>true</code>则两个数组元素顺序不变；如果第二个参数返回<code>false</code>则两个数组元素顺序相反。<br>所以闭包函数中定义<code>return s1 &gt; s2</code>，如果<code>s1</code>大于<code>s2</code>顺序不变，如果<code>s1</code>不大于<code>s2</code>则交换<code>s1</code>和<code>s2</code>的顺序，使值大的元素排在数组的前列，也就是逆序排列。<br>就上面的代码改为闭包表达式的形式为：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">reversed = sorted(names, &#123; (s1: <span class=\"type\">String</span>, s2: <span class=\"type\">String</span>) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></div><div class=\"line\">    <span class=\"keyword\">return</span> s1 &gt; s2</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>用闭包表达式代替了闭包函数，<code>in</code>替换函数的大括号，并在外层添加大括号。</p>\n<p>闭包表达式的参数类型由第一个参数数组元素的类型决定，返回类型确定为<code>Bool</code>型，创建闭包时可以省略已知的信息：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reversed = sorted(names, &#123; s1, s2 <span class=\"keyword\">in</span> <span class=\"keyword\">return</span> s1 &gt; s2 &#125;)</div></pre></td></tr></table></figure></p>\n<p>闭包表达式中，如果只有单行表达式，比如<code>return s1 &gt; s2</code>一行，可以省略<code>return</code>关键字：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reversed = sorted(names, &#123; s1, s2 <span class=\"keyword\">in</span> s1 &gt; s2 &#125;)</div></pre></td></tr></table></figure></p>\n<p>闭包表达式的参数名称可以缩写成$0，$1，$2等，来顺序调用闭包参数：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reversed = sorted(names, &#123; $<span class=\"number\">0</span> &gt; $<span class=\"number\">1</span> &#125;)</div></pre></td></tr></table></figure></p>\n<p>另外，还可以用运算符函数（operator function）使闭包表达式更简短。因为<code>&gt;</code>的定义就是接收两个参数，并返回<code>Bool</code>类型值，所以可以写：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reversed = sorted(names, &gt;)</div></pre></td></tr></table></figure></p>\n<p>尾随闭包（trailing closure）：如果闭包表达是是函数的最后一个参数，可以把闭包放到函数的小括号后面，增强可读性：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">reversed = sorted(names, &#123; $<span class=\"number\">0</span> &gt; $<span class=\"number\">1</span> &#125;)\t<span class=\"comment\">//闭包表达式</span></div><div class=\"line\"></div><div class=\"line\">reversed = sorted(names) &#123; $<span class=\"number\">0</span> &gt; $<span class=\"number\">1</span> &#125;\t<span class=\"comment\">//尾随闭包</span></div></pre></td></tr></table></figure></p>\n<p>如果闭包很长，尾随闭包就会非常有用。<br>如果函数中只有闭包一个参数，则可以省略小括号，写成<code>reversed = sorted { $0 &lt; $1 }</code>的形式。</p>\n<h2 id=\"嵌套函数\"><a href=\"#嵌套函数\" class=\"headerlink\" title=\"嵌套函数\"></a>嵌套函数</h2><p>嵌套函数是最简单的闭包形式。嵌套函数可以捕获外部函数的参数和定义的常量变量。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeIncrementor</span><span class=\"params\">(forIncrement amount: Int)</span></span> -&gt; () -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> runningTotal = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">incrementor</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">        runningTotal += amount</div><div class=\"line\">        <span class=\"keyword\">return</span> runningTotal</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> incrementor</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>incrementor</code>函数调用的<code>amount</code>是外部函数的参数，捕获并存储了副本；<code>runningTotal</code>会被修改，所以不可以是副本，而是捕获了一个引用，就算外部函数结束都不会消失。Swift会自动决定捕获引用还是副本。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> incrementByTen = makeIncrementor(forIncrement: <span class=\"number\">10</span>)</div><div class=\"line\"></div><div class=\"line\">incrementByTen()</div><div class=\"line\"><span class=\"comment\">// 返回的值为10</span></div><div class=\"line\">incrementByTen()</div><div class=\"line\"><span class=\"comment\">// 返回的值为20</span></div><div class=\"line\">incrementByTen()</div><div class=\"line\"><span class=\"comment\">// 返回的值为30</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> incrementBySeven = makeIncrementor(forIncrement: <span class=\"number\">7</span>)</div><div class=\"line\">incrementBySeven()</div><div class=\"line\"><span class=\"comment\">// 返回的值为7</span></div><div class=\"line\">incrementByTen()</div><div class=\"line\"><span class=\"comment\">// 返回的值为40</span></div></pre></td></tr></table></figure></p>\n<p><code>incrementByTen</code>创建时，<code>runningTotal</code>也创建了，每调用一次函数其值就会增加10。<br><code>incremetnBySeven</code>创建时，一个新的<code>runningTotal</code>也创建了，每调用一次函数其值就会增加7。这个变量和<code>incrementByTen</code>中的变量没有任何关系，互不干扰。</p>\n<p>注意：无论是函数还是闭包，在赋值给常量或变量时都是<strong>引用拷贝</strong>，指向的是同一个函数/闭包对象。</p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>本篇介绍Swift的基础知识：函数和闭包（Closure）。</p>","more":"<p><strong>Title: <a href=\"https://aidaizyy.github.io/swift_5\" target=\"_blank\" rel=\"external\">Swift基础入门(5)：函数和闭包</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#x6d;&#97;&#105;&#108;&#116;&#111;&#58;&#97;&#x69;&#x64;&#x61;&#x69;&#122;&#121;&#x79;&#x40;&#x67;&#109;&#97;&#x69;&#108;&#46;&#99;&#111;&#109;\">&#97;&#x69;&#x64;&#x61;&#x69;&#122;&#121;&#x79;&#x40;&#x67;&#109;&#97;&#x69;&#108;&#46;&#99;&#111;&#109;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-07-22</a></strong></p>\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><h2 id=\"函数原型\"><a href=\"#函数原型\" class=\"headerlink\" title=\"函数原型\"></a>函数原型</h2><p><code>func functionName(parameters) -&gt; returnType { statements }</code><br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">halfOpenRangeLength</span><span class=\"params\">(start: Int, end: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> end - start</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"built_in\">println</span>(halfOpenRangeLength(<span class=\"number\">1</span>, <span class=\"number\">10</span>))</div><div class=\"line\"><span class=\"comment\">// prints \"9\"</span></div></pre></td></tr></table></figure></p>\n<p>函数前必须加标识符<code>func</code>，函数名<code>halfOpenRangeLength</code>需要传入两个参数<code>start</code>和<code>end</code>，都是<code>Int</code>类型，返回<code>Int</code>类型。<br>可以没有参数，也可以没有返回值，则写作<code>func halfOpenRangeLength() { statements }</code>，<code>statements</code>中不带<code>return</code>语句。</p>\n<p>函数可以有多个返回值，用元组表示返回值。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">count</span><span class=\"params\">(string: String)</span></span> -&gt; (vowels: <span class=\"type\">Int</span>, consonants: <span class=\"type\">Int</span>, others: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> vowels = <span class=\"number\">0</span>, consonants = <span class=\"number\">0</span>, others = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> character <span class=\"keyword\">in</span> string &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> <span class=\"type\">String</span>(character).lowercaseString &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"a\"</span>, <span class=\"string\">\"e\"</span>, <span class=\"string\">\"i\"</span>, <span class=\"string\">\"o\"</span>, <span class=\"string\">\"u\"</span>:</div><div class=\"line\">            ++vowels</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>, <span class=\"string\">\"f\"</span>, <span class=\"string\">\"g\"</span>, <span class=\"string\">\"h\"</span>, <span class=\"string\">\"j\"</span>, <span class=\"string\">\"k\"</span>, <span class=\"string\">\"l\"</span>, <span class=\"string\">\"m\"</span>,</div><div class=\"line\">          <span class=\"string\">\"n\"</span>, <span class=\"string\">\"p\"</span>, <span class=\"string\">\"q\"</span>, <span class=\"string\">\"r\"</span>, <span class=\"string\">\"s\"</span>, <span class=\"string\">\"t\"</span>, <span class=\"string\">\"v\"</span>, <span class=\"string\">\"w\"</span>, <span class=\"string\">\"x\"</span>, <span class=\"string\">\"y\"</span>, <span class=\"string\">\"z\"</span>:</div><div class=\"line\">            ++consonants</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            ++others</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> (vowels, consonants, others)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> total = <span class=\"built_in\">count</span>(<span class=\"string\">\"some arbitrary string!\"</span>)</div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"\\(total.vowels) vowels and \\(total.consonants) consonants\"</span>)</div><div class=\"line\"><span class=\"comment\">// prints \"6 vowels and 13 consonants\"</span></div></pre></td></tr></table></figure></p>\n<p><code>func count(String) -&gt; (Int, Int, Int)</code>函数，传入一个<code>String</code>值，返回一个带3个<code>Int</code>值的元组。<br>返回的元组成员不需要再命名，因为在函数定义时已经命名了返回元组成员的名称。<br>当然也可以不命名，返回类型写作<code>(Int, Int, Int)</code>的形式，用<code>total.0</code>，<code>total.1</code>和<code>total.2</code>去获取元组<code>total</code>的第1个，第2个和第3个成员的值。</p>\n<h2 id=\"函数参数\"><a href=\"#函数参数\" class=\"headerlink\" title=\"函数参数\"></a>函数参数</h2><h3 id=\"外部参数名\"><a href=\"#外部参数名\" class=\"headerlink\" title=\"外部参数名\"></a>外部参数名</h3><p>函数参数的名称作为局部参数名，只能在函数中使用。定义外部参数名，可以在函数外部使用帮助函数参数的意图清晰，<code>func functionName(externalParameterName localParameterName: dataType) { statements }</code>。<br>注意：但是一旦定义了外部参数名，在函数调用时就<strong>必须使用</strong>。<br>外部参数名和局部参数名如果一致，可在局部参数名前加<code>#</code>表示，<code>func functionName(#parameterName: dataType) { statements }</code>。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">containsCharacter</span><span class=\"params\">(str string: String, #characterToFind: Character)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">for</span> character <span class=\"keyword\">in</span> string &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> character == characterToFind &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> containsAVee = containsCharacter(str: <span class=\"string\">\"aardvark\"</span>, characterToFind: <span class=\"string\">\"v\"</span>)</div><div class=\"line\"><span class=\"comment\">// containsAVee equals true, because \"aardvark\" contains a \"v”</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"默认参数值\"><a href=\"#默认参数值\" class=\"headerlink\" title=\"默认参数值\"></a>默认参数值</h3><p>函数参数可以定义默认值，但必须在函数参数列表的最后。调用时，如果不指定参数的值，则使用默认值。<br>定义了默认值的函数参数会自动提供外部参数名，和局部参数名一样，也可以自己提供，如果不使用默认值，则必须在调用时使用外部参数名。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">join</span><span class=\"params\">(s1: String, s2: String, joiner: String = <span class=\"string\">\" \"</span>, flag: String = <span class=\"string\">\"!\"</span>)</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> s1 + joiner + s2 + flag</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">join</span>(<span class=\"string\">\"hello\"</span>, <span class=\"string\">\"world\"</span>, joiner: <span class=\"string\">\"-\"</span>)</div><div class=\"line\"><span class=\"comment\">// returns \"hello-world!\"</span></div></pre></td></tr></table></figure></p>\n<p>第3个参数<code>joiner</code>和第四个参数<code>flag</code>都是提供了默认参数值，自动提供了外部参数名<code>joiner</code>和<code>flag</code>，与局部参数名一致。<br><code>joiner</code>提供了值，则必须使用参数名<code>joiner: &quot;-&quot;</code>。<br><code>flag</code>使用默认值，则不需要在调用时出现。</p>\n<h3 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h3><p>可变参数（<em>variadic parameter</em>）表示不确定数量的输入参数，在参数后加<code>...</code>表示。一个函数最多只能有一个可变参数， 且必须是参数列表的最后一个参数。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">arithmeticMean</span><span class=\"params\">(numbers: Double...)</span></span> -&gt; <span class=\"type\">Double</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> total: <span class=\"type\">Double</span> = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">for</span> number <span class=\"keyword\">in</span> numbers &#123;</div><div class=\"line\">        total += number</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> total / <span class=\"type\">Double</span>(numbers.<span class=\"built_in\">count</span>)</div><div class=\"line\">&#125;</div><div class=\"line\">arithmeticMean(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"comment\">// returns 3.0, which is the arithmetic mean of these five numbers</span></div><div class=\"line\">arithmeticMean(<span class=\"number\">3</span>, <span class=\"number\">8</span>, <span class=\"number\">19</span>)</div><div class=\"line\"><span class=\"comment\">// returns 10.0, which is the arithmetic mean of these three numbers</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"变量参数\"><a href=\"#变量参数\" class=\"headerlink\" title=\"变量参数\"></a>变量参数</h3><p>Swift的函数参数采用值拷贝传递，传递进去的参数是不能进行修改的，如果我们需要，可以定义变量参数。在参数前加<code>var</code>定义变量参数。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">appendCharacter</span><span class=\"params\">(<span class=\"keyword\">var</span> string: String, flag: Character)</span></span> -&gt; <span class=\"type\">String</span> &#123;</div><div class=\"line\">    string.append(flag)</div><div class=\"line\">    <span class=\"keyword\">return</span> string</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> originalString = <span class=\"string\">\"hello\"</span></div><div class=\"line\"><span class=\"keyword\">let</span> paddedString = appendCharacter(originalString, <span class=\"string\">\"!\"</span>)</div><div class=\"line\"><span class=\"comment\">// paddedString is equal to \"hello!\"</span></div></pre></td></tr></table></figure></p>\n<p><code>string</code>在函数内被修改了，但是作为局部变量，只能在函数内部使用。</p>\n<h3 id=\"输入输出参数\"><a href=\"#输入输出参数\" class=\"headerlink\" title=\"输入输出参数\"></a>输入输出参数</h3><p>Swift的函数参数不能被修改，使用变量参数修改后也不能传递到外部，采用输入输出参数可以解决这个问题。<br>在参数前加<code>inout</code>定义输入输出参数。</p>\n<ul>\n<li>函数调用时，输入输出参数只能传入变量</li>\n<li>输入输出参数不能有默认参数值。</li>\n<li>输入输出参数不能是可变参数。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">appendCharacter</span><span class=\"params\">(<span class=\"keyword\">inout</span> string: String, flag: Character)</span></span> &#123;</div><div class=\"line\">    string.append(flag)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> originalString = <span class=\"string\">\"hello\"</span></div><div class=\"line\">appendCharacter(&amp;originalString, <span class=\"string\">\"!\"</span>)</div><div class=\"line\"><span class=\"comment\">// originalString is equal to \"hello!\"</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><code>appendCharacter</code>函数传入参数时，在输入输出参数前必须加<code>&amp;</code>前缀。</p>\n<h2 id=\"函数类型\"><a href=\"#函数类型\" class=\"headerlink\" title=\"函数类型\"></a>函数类型</h2><p>函数类型和其他类型一样，可以定义并赋值，如：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">addTwoInts</span><span class=\"params\">(a: Int, b: Int)</span></span> -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> a + b</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> mathFunciton1: (<span class=\"type\">Int</span>, <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> =addTwoInts</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> mathFunciton2 = addTwoInts\t\t<span class=\"comment\">//通过赋值自动判断mathFunction类型为函数类型</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"Result: \\(mathFunction1(2, 3))\"</span>)</div><div class=\"line\"><span class=\"comment\">// prints \"Result: 5\"</span></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"Result: \\(mathFunction2(2, 3))\"</span>)</div><div class=\"line\"><span class=\"comment\">// prints \"Result: 5\"</span></div></pre></td></tr></table></figure></p>\n<p>同样函数类型可以作为函数的参数类型和返回类型，形式如<code>func printMathResult(mathFunction: (Int, Int) -&gt; Int, a: Int, b: Int)</code>和<code>func chooseStepFunction(backwards: Bool) -&gt; (Int) -&gt; Int</code>。前者的一个参数为<code>mathFunction: (Int, Int) -&gt; Int</code>，后者的返回<code>(Int) -&gt; Int</code>，都没有<code>func</code>关键字。</p>\n<p>函数也支持嵌套函数，在函数A内部定义的函数B只能在函数A内调用。</p>\n<h1 id=\"闭包\"><a href=\"#闭包\" class=\"headerlink\" title=\"闭包\"></a>闭包</h1><h2 id=\"闭包表达式\"><a href=\"#闭包表达式\" class=\"headerlink\" title=\"闭包表达式\"></a>闭包表达式</h2><p>闭包指自包含的函数代码块，可以在代码中被传递和使用。<br>函数就是特殊的闭包。<br>闭包的一般形式：<code>{ (parameters) -&gt; returnType in statements }\n和函数不同的是，用</code>in`替代了原本函数的大括号，并在最外层加上大括号。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">backwards</span><span class=\"params\">(s1: String, s2: String)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> s1 &gt; s2</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> reversed = sorted(names, backwards)</div><div class=\"line\"><span class=\"comment\">// reversed 为 [\"Ewa\", \"Daniella\", \"Chris\", \"Barry\", \"Alex\"]</span></div></pre></td></tr></table></figure></p>\n<p><code>sorted</code>函数需要两个参数，第一个参数是需要排序的数组，第二个参数是确定排序顺序的闭包函数，传入与数组类型相同的两个值，并返回<code>Bool</code>值。如果第二个参数返回<code>true</code>则两个数组元素顺序不变；如果第二个参数返回<code>false</code>则两个数组元素顺序相反。<br>所以闭包函数中定义<code>return s1 &gt; s2</code>，如果<code>s1</code>大于<code>s2</code>顺序不变，如果<code>s1</code>不大于<code>s2</code>则交换<code>s1</code>和<code>s2</code>的顺序，使值大的元素排在数组的前列，也就是逆序排列。<br>就上面的代码改为闭包表达式的形式为：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">reversed = sorted(names, &#123; (s1: <span class=\"type\">String</span>, s2: <span class=\"type\">String</span>) -&gt; <span class=\"type\">Bool</span> <span class=\"keyword\">in</span></div><div class=\"line\">    <span class=\"keyword\">return</span> s1 &gt; s2</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>用闭包表达式代替了闭包函数，<code>in</code>替换函数的大括号，并在外层添加大括号。</p>\n<p>闭包表达式的参数类型由第一个参数数组元素的类型决定，返回类型确定为<code>Bool</code>型，创建闭包时可以省略已知的信息：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reversed = sorted(names, &#123; s1, s2 <span class=\"keyword\">in</span> <span class=\"keyword\">return</span> s1 &gt; s2 &#125;)</div></pre></td></tr></table></figure></p>\n<p>闭包表达式中，如果只有单行表达式，比如<code>return s1 &gt; s2</code>一行，可以省略<code>return</code>关键字：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reversed = sorted(names, &#123; s1, s2 <span class=\"keyword\">in</span> s1 &gt; s2 &#125;)</div></pre></td></tr></table></figure></p>\n<p>闭包表达式的参数名称可以缩写成$0，$1，$2等，来顺序调用闭包参数：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reversed = sorted(names, &#123; $<span class=\"number\">0</span> &gt; $<span class=\"number\">1</span> &#125;)</div></pre></td></tr></table></figure></p>\n<p>另外，还可以用运算符函数（operator function）使闭包表达式更简短。因为<code>&gt;</code>的定义就是接收两个参数，并返回<code>Bool</code>类型值，所以可以写：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">reversed = sorted(names, &gt;)</div></pre></td></tr></table></figure></p>\n<p>尾随闭包（trailing closure）：如果闭包表达是是函数的最后一个参数，可以把闭包放到函数的小括号后面，增强可读性：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">reversed = sorted(names, &#123; $<span class=\"number\">0</span> &gt; $<span class=\"number\">1</span> &#125;)\t<span class=\"comment\">//闭包表达式</span></div><div class=\"line\"></div><div class=\"line\">reversed = sorted(names) &#123; $<span class=\"number\">0</span> &gt; $<span class=\"number\">1</span> &#125;\t<span class=\"comment\">//尾随闭包</span></div></pre></td></tr></table></figure></p>\n<p>如果闭包很长，尾随闭包就会非常有用。<br>如果函数中只有闭包一个参数，则可以省略小括号，写成<code>reversed = sorted { $0 &lt; $1 }</code>的形式。</p>\n<h2 id=\"嵌套函数\"><a href=\"#嵌套函数\" class=\"headerlink\" title=\"嵌套函数\"></a>嵌套函数</h2><p>嵌套函数是最简单的闭包形式。嵌套函数可以捕获外部函数的参数和定义的常量变量。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeIncrementor</span><span class=\"params\">(forIncrement amount: Int)</span></span> -&gt; () -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> runningTotal = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">incrementor</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">        runningTotal += amount</div><div class=\"line\">        <span class=\"keyword\">return</span> runningTotal</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> incrementor</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>incrementor</code>函数调用的<code>amount</code>是外部函数的参数，捕获并存储了副本；<code>runningTotal</code>会被修改，所以不可以是副本，而是捕获了一个引用，就算外部函数结束都不会消失。Swift会自动决定捕获引用还是副本。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> incrementByTen = makeIncrementor(forIncrement: <span class=\"number\">10</span>)</div><div class=\"line\"></div><div class=\"line\">incrementByTen()</div><div class=\"line\"><span class=\"comment\">// 返回的值为10</span></div><div class=\"line\">incrementByTen()</div><div class=\"line\"><span class=\"comment\">// 返回的值为20</span></div><div class=\"line\">incrementByTen()</div><div class=\"line\"><span class=\"comment\">// 返回的值为30</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> incrementBySeven = makeIncrementor(forIncrement: <span class=\"number\">7</span>)</div><div class=\"line\">incrementBySeven()</div><div class=\"line\"><span class=\"comment\">// 返回的值为7</span></div><div class=\"line\">incrementByTen()</div><div class=\"line\"><span class=\"comment\">// 返回的值为40</span></div></pre></td></tr></table></figure></p>\n<p><code>incrementByTen</code>创建时，<code>runningTotal</code>也创建了，每调用一次函数其值就会增加10。<br><code>incremetnBySeven</code>创建时，一个新的<code>runningTotal</code>也创建了，每调用一次函数其值就会增加7。这个变量和<code>incrementByTen</code>中的变量没有任何关系，互不干扰。</p>\n<p>注意：无论是函数还是闭包，在赋值给常量或变量时都是<strong>引用拷贝</strong>，指向的是同一个函数/闭包对象。</p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>"},{"title":"Swift基础入门(6)：枚举，类和结构体","date":"2015-07-19T14:47:43.000Z","toc":true,"_content":"\n本篇介绍Swift的基础知识：枚举，类和结构体的基本概念和语法。\n\n<!--more-->\n**Title: [Swift基础入门(6)：枚举，类和结构体](https://aidaizyy.github.io/swift_6)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-07-24](http://aidaizyy.github.io)**\n\n# 枚举\n\n## 枚举语法\n枚举定义了一个通用来兴的一组相关的值。\n``` swift\nenum CompassPoint {\n    case North, South\n    case East\n    case West\n}\n```\n`enum`关键字把枚举的整个定义放在大括号中，`CompassPoint`是它的名称。`case`表明新的一行成员值被定义，同一行中可以定义多个成员值，用`,`隔开，这里的成员值为`North`，`South`，`East`，`West`。\n``` swift\nvar directionToHead = CompassPoint.West\ndirectionToHead = .East\n```\n变量的类型经过第一次赋值确定后，再次赋值可省略枚举类型名称，这里`directionToHead`已经被确定为`CompassPoint`的成员值，再次赋值用`.East`的形式就可以了。\n定义的枚举成员是没有值的，不会自动分配值。后面会介绍存储原始值，不仅可以存储整数，也可以存储浮点数字符串等其他类型。\n\n## 成员值\n枚举类型用`switch`匹配时，必须每个成员值都考虑到，否则编译无法通过，可用`default`替代其他成员值。\n``` swift\ndirectionToHead = .South\nswitch directionToHead {\ncase .North:\n    println(\"Lots of planets have a north\")\ncase .South:\n    println(\"Watch out for penguins\")\ncase .East:\n    println(\"Where the sun rises\")\ncase .West:\n    println(\"Where the skies are blue\")\n}\n// 输出 \"Watch out for penguins”\n```\n\n## 相关值\n枚举类型的用法比较像C语言中的联合体（_union_），可以为成员值提供其他类型的相关值，即成员值之外的自定义信息。\n相关值可以是任何类型，每个成员的数据类型也可以不一样。\n``` swift\nenum Barcode {\n  case UPCA(Int, Int, Int)\n  case QRCode(String)\n}\n```\n枚举类型`Barcode`有两个成员值，一个是`UPCA`，它的相关值是`(Int, Int, int)`，一个是`QRCode`，它的相关值是`(String)`\n``` swift\nvar productBarcode = Barcode.UPCA(8, 85909_51226, 3)\nproductBarcode = .QRCode(\"ABCDEFGHIJKLMNOP\")\n```\n\n# 类和结构体\n\n类（_Class_）和结构体（_Struct_）的用法和其他语言类似。\n主要区别在于，类允许继承，而结构体不行；类是引用传递，而结构体是值传递。\n\n``` swift\nstruct Resolution {\n    var width = 0\n    var height = 0\n}\nclass VideoMode {\n    var resolution = Resolution()\n    var interlaced = false\n    var frameRate = 0.0\n    var name: String?\n}\n\nvar someResolution = Resolution(width: 1920, height: 1080)\nlet someVideoMode = VideoMode()\nsomeVideoMode.resolution = someResolution;\nsomeVideoMode.interlaced = true;\nsomeVideoMode.name = \"1080i\"\nsomeVideoMode.frameRate = 25.0\n\nvar otherResolution = someResolution;\nlet otherVideoMode = someVideoMode;\n\nsomeResolution.width = 2048\nprintln(\"someResolution is now  \\(someResolution.width) pixels wide\")\n// 输出 \"someResolution is now 2048 pixels wide\"\nprintln(\"otherResolution is now  \\(otherResolution.width) pixels wide\")\n// 输出 \"otherResolution is now 1920 pixels wide\"\n\nsomeVideoMode.resolution.width = 1280\nprintln(\"The width of someVideoMode is now \\(someVideoMode.resolution.width)\")\n// 输出 \"The width of someVideoMode is now 1280\"\nprintln(\"The width of otherVideoMode is now \\(otherVideoMode.resolution.width)\")\n// 输出 \"The width of otherVideoMode is now 1280\"\n\nif someVideoMode === otherVideoMode {\n    println(\"someVideoMode and otherVideoMode refer to the same VideoMode instance.\")\n}\n//输出 \"someVideoMode and otherVideoMode refer to the same VideoMode instance.\"\n```\n第1-10行是类和结构体的定义，分别用`class`和`struct`表示。\n\n第12-17行是给类和结构体创建实例，并赋值。\n结构体可以在构造时逐一初始化成员，`(width: 1920, height: 1080)`，而类不可以。\n\n第19-20行，分别用类和结构体的实例去赋值变量或常量。\n\n第22-26行，变量`otherResolution`被结构体`someResolution`赋值时采用的是值传递，因此相互是独立的，只是成员值一样。\n改变了`someResolutin`的属性`width`的值后，`otherResolution`并未受到影响。\n\n第28-32行，常量`otherVideoMode`被类`otherVideoMode`赋值时采用的是引用传递，指向的是同一个对象。\n改变了`someVideoMode`的属性`reoulution.width`的值后，`otherVideoMode`的相应属性也随之变化。\n`someVideoMode`和`otherVideoMode`被声明为常量,也可以改变其中的成员属性：\n因为他们都不存储实例，只存储了引用对象，没有改变引用对象，只改变了被引用的基础`VideoMode`的成员属性。\nSwift中，几乎所有的基本类型，包括字符串，数组和字典等都是值传递。\n\n第34-37行，因为两者指向同一对象，不仅仅是成员值相等的关系了，`==`等于符号并不足以描述这样的关系。\n`====`恒等运算符用来形容两者指向同一对象，表示两个实例等价。\n\n枚举，类和结构体的其他特性，参见：\n[Swift基础入门(7)：属性，方法和下标](http://aidaizyy.github.io/swift_7)\n[Swift基础入门(8)：继承，构造，析构和嵌套类型](http://aidaizyy.github.io/swift_8)\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","source":"_posts/swift_6.md","raw":"title: \"Swift基础入门(6)：枚举，类和结构体\"\ndate: 2015-07-19 22:47:43\ntags:\n- swift\ncategories: swift \ntoc: true\n---\n\n本篇介绍Swift的基础知识：枚举，类和结构体的基本概念和语法。\n\n<!--more-->\n**Title: [Swift基础入门(6)：枚举，类和结构体](https://aidaizyy.github.io/swift_6)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-07-24](http://aidaizyy.github.io)**\n\n# 枚举\n\n## 枚举语法\n枚举定义了一个通用来兴的一组相关的值。\n``` swift\nenum CompassPoint {\n    case North, South\n    case East\n    case West\n}\n```\n`enum`关键字把枚举的整个定义放在大括号中，`CompassPoint`是它的名称。`case`表明新的一行成员值被定义，同一行中可以定义多个成员值，用`,`隔开，这里的成员值为`North`，`South`，`East`，`West`。\n``` swift\nvar directionToHead = CompassPoint.West\ndirectionToHead = .East\n```\n变量的类型经过第一次赋值确定后，再次赋值可省略枚举类型名称，这里`directionToHead`已经被确定为`CompassPoint`的成员值，再次赋值用`.East`的形式就可以了。\n定义的枚举成员是没有值的，不会自动分配值。后面会介绍存储原始值，不仅可以存储整数，也可以存储浮点数字符串等其他类型。\n\n## 成员值\n枚举类型用`switch`匹配时，必须每个成员值都考虑到，否则编译无法通过，可用`default`替代其他成员值。\n``` swift\ndirectionToHead = .South\nswitch directionToHead {\ncase .North:\n    println(\"Lots of planets have a north\")\ncase .South:\n    println(\"Watch out for penguins\")\ncase .East:\n    println(\"Where the sun rises\")\ncase .West:\n    println(\"Where the skies are blue\")\n}\n// 输出 \"Watch out for penguins”\n```\n\n## 相关值\n枚举类型的用法比较像C语言中的联合体（_union_），可以为成员值提供其他类型的相关值，即成员值之外的自定义信息。\n相关值可以是任何类型，每个成员的数据类型也可以不一样。\n``` swift\nenum Barcode {\n  case UPCA(Int, Int, Int)\n  case QRCode(String)\n}\n```\n枚举类型`Barcode`有两个成员值，一个是`UPCA`，它的相关值是`(Int, Int, int)`，一个是`QRCode`，它的相关值是`(String)`\n``` swift\nvar productBarcode = Barcode.UPCA(8, 85909_51226, 3)\nproductBarcode = .QRCode(\"ABCDEFGHIJKLMNOP\")\n```\n\n# 类和结构体\n\n类（_Class_）和结构体（_Struct_）的用法和其他语言类似。\n主要区别在于，类允许继承，而结构体不行；类是引用传递，而结构体是值传递。\n\n``` swift\nstruct Resolution {\n    var width = 0\n    var height = 0\n}\nclass VideoMode {\n    var resolution = Resolution()\n    var interlaced = false\n    var frameRate = 0.0\n    var name: String?\n}\n\nvar someResolution = Resolution(width: 1920, height: 1080)\nlet someVideoMode = VideoMode()\nsomeVideoMode.resolution = someResolution;\nsomeVideoMode.interlaced = true;\nsomeVideoMode.name = \"1080i\"\nsomeVideoMode.frameRate = 25.0\n\nvar otherResolution = someResolution;\nlet otherVideoMode = someVideoMode;\n\nsomeResolution.width = 2048\nprintln(\"someResolution is now  \\(someResolution.width) pixels wide\")\n// 输出 \"someResolution is now 2048 pixels wide\"\nprintln(\"otherResolution is now  \\(otherResolution.width) pixels wide\")\n// 输出 \"otherResolution is now 1920 pixels wide\"\n\nsomeVideoMode.resolution.width = 1280\nprintln(\"The width of someVideoMode is now \\(someVideoMode.resolution.width)\")\n// 输出 \"The width of someVideoMode is now 1280\"\nprintln(\"The width of otherVideoMode is now \\(otherVideoMode.resolution.width)\")\n// 输出 \"The width of otherVideoMode is now 1280\"\n\nif someVideoMode === otherVideoMode {\n    println(\"someVideoMode and otherVideoMode refer to the same VideoMode instance.\")\n}\n//输出 \"someVideoMode and otherVideoMode refer to the same VideoMode instance.\"\n```\n第1-10行是类和结构体的定义，分别用`class`和`struct`表示。\n\n第12-17行是给类和结构体创建实例，并赋值。\n结构体可以在构造时逐一初始化成员，`(width: 1920, height: 1080)`，而类不可以。\n\n第19-20行，分别用类和结构体的实例去赋值变量或常量。\n\n第22-26行，变量`otherResolution`被结构体`someResolution`赋值时采用的是值传递，因此相互是独立的，只是成员值一样。\n改变了`someResolutin`的属性`width`的值后，`otherResolution`并未受到影响。\n\n第28-32行，常量`otherVideoMode`被类`otherVideoMode`赋值时采用的是引用传递，指向的是同一个对象。\n改变了`someVideoMode`的属性`reoulution.width`的值后，`otherVideoMode`的相应属性也随之变化。\n`someVideoMode`和`otherVideoMode`被声明为常量,也可以改变其中的成员属性：\n因为他们都不存储实例，只存储了引用对象，没有改变引用对象，只改变了被引用的基础`VideoMode`的成员属性。\nSwift中，几乎所有的基本类型，包括字符串，数组和字典等都是值传递。\n\n第34-37行，因为两者指向同一对象，不仅仅是成员值相等的关系了，`==`等于符号并不足以描述这样的关系。\n`====`恒等运算符用来形容两者指向同一对象，表示两个实例等价。\n\n枚举，类和结构体的其他特性，参见：\n[Swift基础入门(7)：属性，方法和下标](http://aidaizyy.github.io/swift_7)\n[Swift基础入门(8)：继承，构造，析构和嵌套类型](http://aidaizyy.github.io/swift_8)\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","slug":"swift_6","published":1,"updated":"2017-05-08T16:40:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2gdu6l6001fv1o3g257wvue","content":"<p>本篇介绍Swift的基础知识：枚举，类和结构体的基本概念和语法。</p>\n<a id=\"more\"></a>\n<p><strong>Title: <a href=\"https://aidaizyy.github.io/swift_6\" target=\"_blank\" rel=\"external\">Swift基础入门(6)：枚举，类和结构体</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#x6d;&#97;&#105;&#x6c;&#116;&#x6f;&#x3a;&#x61;&#105;&#x64;&#x61;&#x69;&#122;&#x79;&#121;&#64;&#x67;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#x6d;\">&#x61;&#105;&#x64;&#x61;&#x69;&#122;&#x79;&#121;&#64;&#x67;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#x6d;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-07-24</a></strong></p>\n<h1 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h1><h2 id=\"枚举语法\"><a href=\"#枚举语法\" class=\"headerlink\" title=\"枚举语法\"></a>枚举语法</h2><p>枚举定义了一个通用来兴的一组相关的值。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">CompassPoint</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">North</span>, <span class=\"type\">South</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">East</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">West</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>enum</code>关键字把枚举的整个定义放在大括号中，<code>CompassPoint</code>是它的名称。<code>case</code>表明新的一行成员值被定义，同一行中可以定义多个成员值，用<code>,</code>隔开，这里的成员值为<code>North</code>，<code>South</code>，<code>East</code>，<code>West</code>。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> directionToHead = <span class=\"type\">CompassPoint</span>.<span class=\"type\">West</span></div><div class=\"line\">directionToHead = .<span class=\"type\">East</span></div></pre></td></tr></table></figure></p>\n<p>变量的类型经过第一次赋值确定后，再次赋值可省略枚举类型名称，这里<code>directionToHead</code>已经被确定为<code>CompassPoint</code>的成员值，再次赋值用<code>.East</code>的形式就可以了。<br>定义的枚举成员是没有值的，不会自动分配值。后面会介绍存储原始值，不仅可以存储整数，也可以存储浮点数字符串等其他类型。</p>\n<h2 id=\"成员值\"><a href=\"#成员值\" class=\"headerlink\" title=\"成员值\"></a>成员值</h2><p>枚举类型用<code>switch</code>匹配时，必须每个成员值都考虑到，否则编译无法通过，可用<code>default</code>替代其他成员值。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">directionToHead = .<span class=\"type\">South</span></div><div class=\"line\"><span class=\"keyword\">switch</span> directionToHead &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">North</span>:</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Lots of planets have a north\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">South</span>:</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Watch out for penguins\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">East</span>:</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Where the sun rises\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">West</span>:</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Where the skies are blue\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"Watch out for penguins”</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"相关值\"><a href=\"#相关值\" class=\"headerlink\" title=\"相关值\"></a>相关值</h2><p>枚举类型的用法比较像C语言中的联合体（<em>union</em>），可以为成员值提供其他类型的相关值，即成员值之外的自定义信息。<br>相关值可以是任何类型，每个成员的数据类型也可以不一样。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Barcode</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">UPCA</span>(<span class=\"type\">Int</span>, <span class=\"type\">Int</span>, <span class=\"type\">Int</span>)</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">QRCode</span>(<span class=\"type\">String</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>枚举类型<code>Barcode</code>有两个成员值，一个是<code>UPCA</code>，它的相关值是<code>(Int, Int, int)</code>，一个是<code>QRCode</code>，它的相关值是<code>(String)</code><br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> productBarcode = <span class=\"type\">Barcode</span>.<span class=\"type\">UPCA</span>(<span class=\"number\">8</span>, <span class=\"number\">85909_51226</span>, <span class=\"number\">3</span>)</div><div class=\"line\">productBarcode = .<span class=\"type\">QRCode</span>(<span class=\"string\">\"ABCDEFGHIJKLMNOP\"</span>)</div></pre></td></tr></table></figure></p>\n<h1 id=\"类和结构体\"><a href=\"#类和结构体\" class=\"headerlink\" title=\"类和结构体\"></a>类和结构体</h1><p>类（<em>Class</em>）和结构体（<em>Struct</em>）的用法和其他语言类似。<br>主要区别在于，类允许继承，而结构体不行；类是引用传递，而结构体是值传递。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Resolution</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> width = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">var</span> height = <span class=\"number\">0</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VideoMode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> resolution = <span class=\"type\">Resolution</span>()</div><div class=\"line\">    <span class=\"keyword\">var</span> interlaced = <span class=\"literal\">false</span></div><div class=\"line\">    <span class=\"keyword\">var</span> frameRate = <span class=\"number\">0.0</span></div><div class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span>?</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> someResolution = <span class=\"type\">Resolution</span>(width: <span class=\"number\">1920</span>, height: <span class=\"number\">1080</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> someVideoMode = <span class=\"type\">VideoMode</span>()</div><div class=\"line\">someVideoMode.resolution = someResolution;</div><div class=\"line\">someVideoMode.interlaced = <span class=\"literal\">true</span>;</div><div class=\"line\">someVideoMode.name = <span class=\"string\">\"1080i\"</span></div><div class=\"line\">someVideoMode.frameRate = <span class=\"number\">25.0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> otherResolution = someResolution;</div><div class=\"line\"><span class=\"keyword\">let</span> otherVideoMode = someVideoMode;</div><div class=\"line\"></div><div class=\"line\">someResolution.width = <span class=\"number\">2048</span></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"someResolution is now  \\(someResolution.width) pixels wide\"</span>)</div><div class=\"line\"><span class=\"comment\">// 输出 \"someResolution is now 2048 pixels wide\"</span></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"otherResolution is now  \\(otherResolution.width) pixels wide\"</span>)</div><div class=\"line\"><span class=\"comment\">// 输出 \"otherResolution is now 1920 pixels wide\"</span></div><div class=\"line\"></div><div class=\"line\">someVideoMode.resolution.width = <span class=\"number\">1280</span></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"The width of someVideoMode is now \\(someVideoMode.resolution.width)\"</span>)</div><div class=\"line\"><span class=\"comment\">// 输出 \"The width of someVideoMode is now 1280\"</span></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"The width of otherVideoMode is now \\(otherVideoMode.resolution.width)\"</span>)</div><div class=\"line\"><span class=\"comment\">// 输出 \"The width of otherVideoMode is now 1280\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> someVideoMode === otherVideoMode &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"someVideoMode and otherVideoMode refer to the same VideoMode instance.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//输出 \"someVideoMode and otherVideoMode refer to the same VideoMode instance.\"</span></div></pre></td></tr></table></figure>\n<p>第1-10行是类和结构体的定义，分别用<code>class</code>和<code>struct</code>表示。</p>\n<p>第12-17行是给类和结构体创建实例，并赋值。<br>结构体可以在构造时逐一初始化成员，<code>(width: 1920, height: 1080)</code>，而类不可以。</p>\n<p>第19-20行，分别用类和结构体的实例去赋值变量或常量。</p>\n<p>第22-26行，变量<code>otherResolution</code>被结构体<code>someResolution</code>赋值时采用的是值传递，因此相互是独立的，只是成员值一样。<br>改变了<code>someResolutin</code>的属性<code>width</code>的值后，<code>otherResolution</code>并未受到影响。</p>\n<p>第28-32行，常量<code>otherVideoMode</code>被类<code>otherVideoMode</code>赋值时采用的是引用传递，指向的是同一个对象。<br>改变了<code>someVideoMode</code>的属性<code>reoulution.width</code>的值后，<code>otherVideoMode</code>的相应属性也随之变化。<br><code>someVideoMode</code>和<code>otherVideoMode</code>被声明为常量,也可以改变其中的成员属性：<br>因为他们都不存储实例，只存储了引用对象，没有改变引用对象，只改变了被引用的基础<code>VideoMode</code>的成员属性。<br>Swift中，几乎所有的基本类型，包括字符串，数组和字典等都是值传递。</p>\n<p>第34-37行，因为两者指向同一对象，不仅仅是成员值相等的关系了，<code>==</code>等于符号并不足以描述这样的关系。<br><code>====</code>恒等运算符用来形容两者指向同一对象，表示两个实例等价。</p>\n<p>枚举，类和结构体的其他特性，参见：<br><a href=\"http://aidaizyy.github.io/swift_7\" target=\"_blank\" rel=\"external\">Swift基础入门(7)：属性，方法和下标</a><br><a href=\"http://aidaizyy.github.io/swift_8\" target=\"_blank\" rel=\"external\">Swift基础入门(8)：继承，构造，析构和嵌套类型</a></p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>本篇介绍Swift的基础知识：枚举，类和结构体的基本概念和语法。</p>","more":"<p><strong>Title: <a href=\"https://aidaizyy.github.io/swift_6\" target=\"_blank\" rel=\"external\">Swift基础入门(6)：枚举，类和结构体</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#x6d;&#97;&#105;&#x6c;&#116;&#x6f;&#x3a;&#x61;&#105;&#x64;&#x61;&#x69;&#122;&#x79;&#121;&#64;&#x67;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#x6d;\">&#x61;&#105;&#x64;&#x61;&#x69;&#122;&#x79;&#121;&#64;&#x67;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#x6d;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-07-24</a></strong></p>\n<h1 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h1><h2 id=\"枚举语法\"><a href=\"#枚举语法\" class=\"headerlink\" title=\"枚举语法\"></a>枚举语法</h2><p>枚举定义了一个通用来兴的一组相关的值。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">CompassPoint</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">North</span>, <span class=\"type\">South</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">East</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">West</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>enum</code>关键字把枚举的整个定义放在大括号中，<code>CompassPoint</code>是它的名称。<code>case</code>表明新的一行成员值被定义，同一行中可以定义多个成员值，用<code>,</code>隔开，这里的成员值为<code>North</code>，<code>South</code>，<code>East</code>，<code>West</code>。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> directionToHead = <span class=\"type\">CompassPoint</span>.<span class=\"type\">West</span></div><div class=\"line\">directionToHead = .<span class=\"type\">East</span></div></pre></td></tr></table></figure></p>\n<p>变量的类型经过第一次赋值确定后，再次赋值可省略枚举类型名称，这里<code>directionToHead</code>已经被确定为<code>CompassPoint</code>的成员值，再次赋值用<code>.East</code>的形式就可以了。<br>定义的枚举成员是没有值的，不会自动分配值。后面会介绍存储原始值，不仅可以存储整数，也可以存储浮点数字符串等其他类型。</p>\n<h2 id=\"成员值\"><a href=\"#成员值\" class=\"headerlink\" title=\"成员值\"></a>成员值</h2><p>枚举类型用<code>switch</code>匹配时，必须每个成员值都考虑到，否则编译无法通过，可用<code>default</code>替代其他成员值。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">directionToHead = .<span class=\"type\">South</span></div><div class=\"line\"><span class=\"keyword\">switch</span> directionToHead &#123;</div><div class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">North</span>:</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Lots of planets have a north\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">South</span>:</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Watch out for penguins\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">East</span>:</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Where the sun rises\"</span>)</div><div class=\"line\"><span class=\"keyword\">case</span> .<span class=\"type\">West</span>:</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Where the skies are blue\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 输出 \"Watch out for penguins”</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"相关值\"><a href=\"#相关值\" class=\"headerlink\" title=\"相关值\"></a>相关值</h2><p>枚举类型的用法比较像C语言中的联合体（<em>union</em>），可以为成员值提供其他类型的相关值，即成员值之外的自定义信息。<br>相关值可以是任何类型，每个成员的数据类型也可以不一样。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Barcode</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">UPCA</span>(<span class=\"type\">Int</span>, <span class=\"type\">Int</span>, <span class=\"type\">Int</span>)</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">QRCode</span>(<span class=\"type\">String</span>)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>枚举类型<code>Barcode</code>有两个成员值，一个是<code>UPCA</code>，它的相关值是<code>(Int, Int, int)</code>，一个是<code>QRCode</code>，它的相关值是<code>(String)</code><br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> productBarcode = <span class=\"type\">Barcode</span>.<span class=\"type\">UPCA</span>(<span class=\"number\">8</span>, <span class=\"number\">85909_51226</span>, <span class=\"number\">3</span>)</div><div class=\"line\">productBarcode = .<span class=\"type\">QRCode</span>(<span class=\"string\">\"ABCDEFGHIJKLMNOP\"</span>)</div></pre></td></tr></table></figure></p>\n<h1 id=\"类和结构体\"><a href=\"#类和结构体\" class=\"headerlink\" title=\"类和结构体\"></a>类和结构体</h1><p>类（<em>Class</em>）和结构体（<em>Struct</em>）的用法和其他语言类似。<br>主要区别在于，类允许继承，而结构体不行；类是引用传递，而结构体是值传递。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Resolution</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> width = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"keyword\">var</span> height = <span class=\"number\">0</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">VideoMode</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> resolution = <span class=\"type\">Resolution</span>()</div><div class=\"line\">    <span class=\"keyword\">var</span> interlaced = <span class=\"literal\">false</span></div><div class=\"line\">    <span class=\"keyword\">var</span> frameRate = <span class=\"number\">0.0</span></div><div class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span>?</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> someResolution = <span class=\"type\">Resolution</span>(width: <span class=\"number\">1920</span>, height: <span class=\"number\">1080</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> someVideoMode = <span class=\"type\">VideoMode</span>()</div><div class=\"line\">someVideoMode.resolution = someResolution;</div><div class=\"line\">someVideoMode.interlaced = <span class=\"literal\">true</span>;</div><div class=\"line\">someVideoMode.name = <span class=\"string\">\"1080i\"</span></div><div class=\"line\">someVideoMode.frameRate = <span class=\"number\">25.0</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> otherResolution = someResolution;</div><div class=\"line\"><span class=\"keyword\">let</span> otherVideoMode = someVideoMode;</div><div class=\"line\"></div><div class=\"line\">someResolution.width = <span class=\"number\">2048</span></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"someResolution is now  \\(someResolution.width) pixels wide\"</span>)</div><div class=\"line\"><span class=\"comment\">// 输出 \"someResolution is now 2048 pixels wide\"</span></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"otherResolution is now  \\(otherResolution.width) pixels wide\"</span>)</div><div class=\"line\"><span class=\"comment\">// 输出 \"otherResolution is now 1920 pixels wide\"</span></div><div class=\"line\"></div><div class=\"line\">someVideoMode.resolution.width = <span class=\"number\">1280</span></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"The width of someVideoMode is now \\(someVideoMode.resolution.width)\"</span>)</div><div class=\"line\"><span class=\"comment\">// 输出 \"The width of someVideoMode is now 1280\"</span></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"The width of otherVideoMode is now \\(otherVideoMode.resolution.width)\"</span>)</div><div class=\"line\"><span class=\"comment\">// 输出 \"The width of otherVideoMode is now 1280\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> someVideoMode === otherVideoMode &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"someVideoMode and otherVideoMode refer to the same VideoMode instance.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//输出 \"someVideoMode and otherVideoMode refer to the same VideoMode instance.\"</span></div></pre></td></tr></table></figure>\n<p>第1-10行是类和结构体的定义，分别用<code>class</code>和<code>struct</code>表示。</p>\n<p>第12-17行是给类和结构体创建实例，并赋值。<br>结构体可以在构造时逐一初始化成员，<code>(width: 1920, height: 1080)</code>，而类不可以。</p>\n<p>第19-20行，分别用类和结构体的实例去赋值变量或常量。</p>\n<p>第22-26行，变量<code>otherResolution</code>被结构体<code>someResolution</code>赋值时采用的是值传递，因此相互是独立的，只是成员值一样。<br>改变了<code>someResolutin</code>的属性<code>width</code>的值后，<code>otherResolution</code>并未受到影响。</p>\n<p>第28-32行，常量<code>otherVideoMode</code>被类<code>otherVideoMode</code>赋值时采用的是引用传递，指向的是同一个对象。<br>改变了<code>someVideoMode</code>的属性<code>reoulution.width</code>的值后，<code>otherVideoMode</code>的相应属性也随之变化。<br><code>someVideoMode</code>和<code>otherVideoMode</code>被声明为常量,也可以改变其中的成员属性：<br>因为他们都不存储实例，只存储了引用对象，没有改变引用对象，只改变了被引用的基础<code>VideoMode</code>的成员属性。<br>Swift中，几乎所有的基本类型，包括字符串，数组和字典等都是值传递。</p>\n<p>第34-37行，因为两者指向同一对象，不仅仅是成员值相等的关系了，<code>==</code>等于符号并不足以描述这样的关系。<br><code>====</code>恒等运算符用来形容两者指向同一对象，表示两个实例等价。</p>\n<p>枚举，类和结构体的其他特性，参见：<br><a href=\"http://aidaizyy.github.io/swift_7\" target=\"_blank\" rel=\"external\">Swift基础入门(7)：属性，方法和下标</a><br><a href=\"http://aidaizyy.github.io/swift_8\" target=\"_blank\" rel=\"external\">Swift基础入门(8)：继承，构造，析构和嵌套类型</a></p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>"},{"title":"Swift基础入门(7)：属性，方法和下标","date":"2015-07-20T02:10:20.000Z","toc":true,"_content":"\n本篇介绍Swift的基础知识：枚举，结构体和类的属性，方法和下标。\n\n<!--more-->\n**Title: [Swift基础入门(7)：属性，方法和下标](https://aidaizyy.github.io/swift_7)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-07-27](http://aidaizyy.github.io)**\n\n# 属性\n属性分为存储属性（只能用于类和结构体）和计算属性（可用于类，结构体和枚举）。\n\n## 存储属性\n存储属性可用`var`或`let`修饰。\n结构体用`let`修饰，属性不可以更改，因为结构体是值类型。\n类用`let`修饰，属性可以更改，因为类是引用类型。\n结构体可以在构造时逐一初始化属性，而类不可以，参见[类和结构体](http://aidaizyy.github.io/swift_6/#类和结构体)。\n- 延迟属性\n延迟属性用`lazy`标示，且必须使用`var`关键字，只有在第一次被调用时才会计算其初始值，在构造时不会计算初始值。\n``` swift\nclass DataImporter {\n    /*\n    DataImporter 是一个将外部文件中的数据导入的类。\n    这个类的初始化会消耗不少时间。\n    */\n    var fileName = \"data.txt\"\n    // 这是提供数据导入功能\n}\n\nclass DataManager {\n    lazy var importer = DataImporter()\n    var data = [String]()\n    // 这是提供数据管理功能\n}\n\nlet manager = DataManager()\nmanager.data.append(\"Some data\")\nmanager.data.append(\"Some more data\")\n// DataImporter 实例的 importer 属性还没有被创建\n\nprintln(manager.importer.fileName)\n// DataImporter 实例的 importer 属性现在被创建了\n// 输出 \"data.txt”\n```\n以上并未给出全部代码，类`DataManager`中声明了延迟属性`importer`。\n类`DataImporter`实现数据导入功能，会消耗不少时间。\n初始化类`DataManager`时，延迟属性并不会创建。\n只有在`println(manager.importer.fileName)`时，属性`importer`第一次被调用时，才会创建延迟属性`importer`，完成数据导入功能。\n\n## 计算属性\n计算属性不直接存储值，提供getter获取值和可选的setter来间接设置其他属性的值，必须用`var`修饰。\n``` swift\nstruct Point {\n    var x = 0.0, y = 0.0\n}\nstruct Size {\n    var width = 0.0, height = 0.0\n}\nstruct Rect {\n    var origin = Point()\n    var size = Size()\n    var center: Point {\n    get {\n        let centerX = origin.x + (size.width / 2)\n        let centerY = origin.y + (size.height / 2)\n        return Point(x: centerX, y: centerY)\n    }\n    set(newCenter) {\n        origin.x = newCenter.x - (size.width / 2)\n        origin.y = newCenter.y - (size.height / 2)\n    }\n    }\n}\nvar square = Rect(origin: Point(x: 0.0, y: 0.0),\n    size: Size(width: 10.0, height: 10.0))\nlet initialSquareCenter = square.center\nsquare.center = Point(x: 15.0, y: 15.0)\nprintln(\"square.origin is now at (\\(square.origin.x), \\(square.origin.y))\")\n// 输出 \"square.origin is now at (10.0, 10.0)”\n```\n在结构体`Rect`中，属性`center`是计算属性，分别设置了`get`方法和`set`方法。\n`set`方法可以不指定新值的参数名称，比如`newCenter`，在方法中直接使用默认名称`newValue`，上面可写作：\n``` swift\nset {\n        origin.x = newValue.x - (size.width / 2)\n        origin.y = newValue.y - (size.height / 2)\n    }\n```\n- 只读计算属性\n不设置setter，只设置getter的计算属性称为只读计算属性。\n``` swift\nstruct Cuboid {\n    var width = 0.0, height = 0.0, depth = 0.0\n    var volume: Double {\n    return width * height * depth\n    }\n}\nlet fourByFiveByTwo = Cuboid(width: 4.0, height: 5.0, depth: 2.0)\nprintln(\"the volume of fourByFiveByTwo is \\(fourByFiveByTwo.volume)\")\n// 输出 \"the volume of fourByFiveByTwo is 40.0\"\n```\n只读计算属性可省略`get`关键字。\n\n## 属性观察器\n属性观察器可以监控和响应属性值的变化。\n- willSet 在设置新值之前调用\n- didSet 在设置新值之后调用\n``` swift\nclass StepCounter {\n    var totalSteps: Int = 0 {\n    willSet(newTotalSteps) {\n        println(\"About to set totalSteps to \\(newTotalSteps)\")\n    }\n    didSet(oldTotalSteps) {\n        if totalSteps > oldTotalSteps  {\n            println(\"Added \\(totalSteps - oldTotalSteps) steps\")\n        }\n    }\n    }\n}\nlet stepCounter = StepCounter()\nstepCounter.totalSteps = 200\n// About to set totalSteps to 200\n// Added 200 steps\nstepCounter.totalSteps = 360\n// About to set totalSteps to 360\n// Added 160 steps\nstepCounter.totalSteps = 896\n// About to set totalSteps to 896\n// Added 536 steps\n```\n`willSet`如果不指定新值参数名，可用`newValue`替代。\n`didSet`如果不指定旧值参数名，可用`oldValue`替代。\n通过重写的方式可以为继承来的存储属性和计算属性添加属性观察器。\n\n计算属性和属性观察器也可以用于全局变量和局部变量。\n全局的常量变量都是延迟计算的，不需要标记`lazy`。而局部的常量变量不会延迟计算。\n\n## 类型属性\n类型属性指所有类型实例公用的属性，类似于其他语言中的静态属性（_static_）。\n值类型（枚举和结构体）可以定义存储型和计算型的类型属性。\n引用类型（类）只能定义计算型的类型属性。\n存储型的类型属性必须指定默认值。\n\n值类型（枚举和结构体）中在类型属性前加上关键字`static`，而引用类型（类）中在类型属性前加上关键字`class`。\n``` swift\nstruct SomeStructure {\n    static var storedTypeProperty = \"Some value.\"\n    static var computedTypeProperty: Int {\n    // 这里返回一个 Int 值\n    }\n}\nenum SomeEnumeration {\n    static var storedTypeProperty = \"Some value.\"\n    static var computedTypeProperty: Int {\n    // 这里返回一个 Int 值\n    }\n}\nclass SomeClass {\n    class var computedTypeProperty: Int {\n    // 这里返回一个 Int 值\n    }\n}\n\nprintln(SomeClass.computedTypeProperty)\n// 输出 \"42\"\n\nprintln(SomeStructure.storedTypeProperty)\n// 输出 \"Some value.\"\nSomeStructure.storedTypeProperty = \"Another value.\"\nprintln(SomeStructure.storedTypeProperty)\n// 输出 \"Another value.”\n```\n这里计算型类型属性都是只读型，也可以定义为可读可写。\n\n# 方法\n\n## 实例方法\n方法是定义在类，结构体和枚举中的方法，和函数类似。\n类，结构体和枚举创建实例后，其中的方法被称为实例方法，只属于当前实例。\n``` swift\nclass Counter {\n  var count = 0\n  func increment() {\n    count++\n  }\n  func incrementBy(amount: Int) {\n    count += amount\n  }\n  func reset() {\n    count = 0\n  }\n}\n\nlet counter = Counter()\n// 初始计数值是0\ncounter.increment()\n// 计数值现在是1\ncounter.incrementBy(5)\n// 计数值现在是6\ncounter.reset()\n// 计数值现在是0\n```\n### 外部参数名\n方法默认第一个参数没有外部参数名，第二个及以后参数默认有外部参数名，和参数名一致，相当于默认在参数前加上了`#`。\n``` swift\nclass Counter {\n  var count: Int = 0\n  func incrementBy(amount: Int, numberOfTimes: Int) {\n    count += amount * numberOfTimes\n  }\n}\n\nlet counter = Counter()\ncounter.incrementBy(5, numberOfTimes: 3)\n// counter value is now 15\n```\n也可以在第一个参数名添加外部参数名，也可以用_放在第二个及以后的参数名前取消默认的外部参数名。\n``` swift\nclass Counter {\n    var count: Int = 0\n    func incrementBy(#amount: Int, _ numberOfTimes: Int) {\n        count += amount * numberOfTimes\n    }\n}\n\nlet counter = Counter()\ncounter.incrementBy(amount: 5, 3)\nprintln(counter.count)\n// counter value is now 15\n```\n关于外部参数名，参见[函数的外部参数名](http://aidaizyy.github.io/swift_5/#外部参数名)。\n\n### self属性\n在每个实例中，都有一个隐藏属性`self`，指代实例变身，以便方法调用实例本身。\n``` swift\nfunc increment() {\n  self.count++\n}\n```\n\n### 变异方法\n结构体和枚举是值类型。值类型的属性不可以在实例方法中被修改。\n变异方法可以完成对属性的修改，在`func`前加上`mutating`关键字。\n``` swift\nstruct Point {\n  var x = 0.0, y = 0.0\n  mutating func moveByX(deltaX: Double, y deltaY: Double) {\n    x += deltaX\n    y += deltaY\n  }\n}\nvar somePoint = Point(x: 1.0, y: 1.0)\nsomePoint.moveByX(2.0, y: 3.0)\nprintln(\"The point is now at (\\(somePoint.x), \\(somePoint.y))\")\n// 输出 \"The point is now at (3.0, 4.0)\"\n```\n变异方法也可以给`self`赋值，即新建一个实例替代旧的实例。\n``` swift\nstruct Point {\n  var x = 0.0, y = 0.0\n  mutating func moveByX(deltaX: Double, y deltaY: Double) {\n    self = Point(x: x + deltaX, y: y + deltaY)\n  }\n}\n```\n``` swift\nenum TriStateSwitch {\n  case Off, Low, High\n  mutating func next() {\n    switch self {\n    case Off:\n      self = Low\n    case Low:\n      self = High\n    case High:\n      self = Off\n    }\n  }\n}\nvar ovenLight = TriStateSwitch.Low\novenLight.next()\n// ovenLight 现在等于 .High\novenLight.next()\n// ovenLight 现在等于 .Off\n```\n类是引用类型，实例方法可以直接修改属性。\n\n## 类型方法\n类型方法和类型属性类似，都是指所有类型实例公共的方法，类似于其他语言中的静态方法（_static_）。\n类型方法在类型前加上`class`关键字。\n类型方法能够直接通过静态属性的名称访问静态属性。\n``` swift\nclass SomeClass {\n  class func someTypeMethod() {\n    // type method implementation goes here\n  }\n}\nSomeClass.someTypeMethod()\n```\n\n# 下标\n下标（_subscripts_）可以定义在类，结构体和枚举中，是访问对象，集合和序列的快捷方式。比如[数组的访问](http://aidaizyy.github.io/swift_3/#访问)：Array[index]，[字典的访问](http://aidaizyy.github.io/swift_3/#访问-1)：Dictionary[key]。\n下标的定义类似于实例方法和计算性属性的混合。\n使用`subscript`关键字，定义了传入参数数量和类型和返回类型，定义了getter和setter。\n``` swift\nsubscript(index: Int) -> Int {\n    get {\n      // 返回与入参匹配的Int类型的值\n    }\n\n    set(newValue) {\n      // 执行赋值操作\n    }\n}\n```\ngetter和setter的定义和计算型属性一样。\nsetter中可以使用`newValue`默认值，可以省略setter定义成只读类型。\n``` swift\nstruct TimesTable {\n    let multiplier: Int\n    subscript(index: Int) -> Int {\n      return multiplier * index\n    }\n}\nlet threeTimesTable = TimesTable(multiplier: 3)\nprintln(\"3的6倍是\\(threeTimesTable[6])\")\n// 输出 \"3的6倍是18\"\n```\n下标允许任意数量的传入参数，任意类型的传入参数和任意类型的返回值。\n可以使用[变量参数](http://aidaizyy.github.io/swift_5/#变量参数)和[可变参数](http://aidaizyy.github.io/swift_5/#可变参数)，但是不能使用[输入输出参数（inout）](http://aidaizyy.github.io/swift_5/#输入输出参数)和[默认参数值](http://aidaizyy.github.io/swift_5/#默认参数值)。\n``` swift\nstruct Matrix {\n    let rows: Int, columns: Int\n    var grid: [Double]\n    init(rows: Int, columns: Int) {\n      self.rows = rows\n      self.columns = columns\n      grid = Array(count: rows * columns, repeatedValue: 0.0)\n    }\n    func indexIsValidForRow(row: Int, column: Int) -> Bool {\n        return row >= 0 && row < rows && column >= 0 && column < columns\n    }\n    subscript(row: Int, column: Int) -> Double {\n        get {\n            assert(indexIsValidForRow(row, column: column), \"Index out of range\")\n            return grid[(row * columns) + column]\n        }\n        set {\n            assert(indexIsValidForRow(row, column: column), \"Index out of range\")\n            grid[(row * columns) + column] = newValue\n        }\n    }\n}\n\nvar matrix = Matrix(rows: 2, columns: 2)\nprintln(matrix[0, 1])\n//0.0\nmatrix[0, 1] = 1.5\nprintln(matrix[0, 1])\n//1.5\n```\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","source":"_posts/swift_7.md","raw":"title: \"Swift基础入门(7)：属性，方法和下标\"\ndate: 2015-07-20 10:10:20\ntags:\n- swift\ncategories: swift\ntoc: true\n---\n\n本篇介绍Swift的基础知识：枚举，结构体和类的属性，方法和下标。\n\n<!--more-->\n**Title: [Swift基础入门(7)：属性，方法和下标](https://aidaizyy.github.io/swift_7)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-07-27](http://aidaizyy.github.io)**\n\n# 属性\n属性分为存储属性（只能用于类和结构体）和计算属性（可用于类，结构体和枚举）。\n\n## 存储属性\n存储属性可用`var`或`let`修饰。\n结构体用`let`修饰，属性不可以更改，因为结构体是值类型。\n类用`let`修饰，属性可以更改，因为类是引用类型。\n结构体可以在构造时逐一初始化属性，而类不可以，参见[类和结构体](http://aidaizyy.github.io/swift_6/#类和结构体)。\n- 延迟属性\n延迟属性用`lazy`标示，且必须使用`var`关键字，只有在第一次被调用时才会计算其初始值，在构造时不会计算初始值。\n``` swift\nclass DataImporter {\n    /*\n    DataImporter 是一个将外部文件中的数据导入的类。\n    这个类的初始化会消耗不少时间。\n    */\n    var fileName = \"data.txt\"\n    // 这是提供数据导入功能\n}\n\nclass DataManager {\n    lazy var importer = DataImporter()\n    var data = [String]()\n    // 这是提供数据管理功能\n}\n\nlet manager = DataManager()\nmanager.data.append(\"Some data\")\nmanager.data.append(\"Some more data\")\n// DataImporter 实例的 importer 属性还没有被创建\n\nprintln(manager.importer.fileName)\n// DataImporter 实例的 importer 属性现在被创建了\n// 输出 \"data.txt”\n```\n以上并未给出全部代码，类`DataManager`中声明了延迟属性`importer`。\n类`DataImporter`实现数据导入功能，会消耗不少时间。\n初始化类`DataManager`时，延迟属性并不会创建。\n只有在`println(manager.importer.fileName)`时，属性`importer`第一次被调用时，才会创建延迟属性`importer`，完成数据导入功能。\n\n## 计算属性\n计算属性不直接存储值，提供getter获取值和可选的setter来间接设置其他属性的值，必须用`var`修饰。\n``` swift\nstruct Point {\n    var x = 0.0, y = 0.0\n}\nstruct Size {\n    var width = 0.0, height = 0.0\n}\nstruct Rect {\n    var origin = Point()\n    var size = Size()\n    var center: Point {\n    get {\n        let centerX = origin.x + (size.width / 2)\n        let centerY = origin.y + (size.height / 2)\n        return Point(x: centerX, y: centerY)\n    }\n    set(newCenter) {\n        origin.x = newCenter.x - (size.width / 2)\n        origin.y = newCenter.y - (size.height / 2)\n    }\n    }\n}\nvar square = Rect(origin: Point(x: 0.0, y: 0.0),\n    size: Size(width: 10.0, height: 10.0))\nlet initialSquareCenter = square.center\nsquare.center = Point(x: 15.0, y: 15.0)\nprintln(\"square.origin is now at (\\(square.origin.x), \\(square.origin.y))\")\n// 输出 \"square.origin is now at (10.0, 10.0)”\n```\n在结构体`Rect`中，属性`center`是计算属性，分别设置了`get`方法和`set`方法。\n`set`方法可以不指定新值的参数名称，比如`newCenter`，在方法中直接使用默认名称`newValue`，上面可写作：\n``` swift\nset {\n        origin.x = newValue.x - (size.width / 2)\n        origin.y = newValue.y - (size.height / 2)\n    }\n```\n- 只读计算属性\n不设置setter，只设置getter的计算属性称为只读计算属性。\n``` swift\nstruct Cuboid {\n    var width = 0.0, height = 0.0, depth = 0.0\n    var volume: Double {\n    return width * height * depth\n    }\n}\nlet fourByFiveByTwo = Cuboid(width: 4.0, height: 5.0, depth: 2.0)\nprintln(\"the volume of fourByFiveByTwo is \\(fourByFiveByTwo.volume)\")\n// 输出 \"the volume of fourByFiveByTwo is 40.0\"\n```\n只读计算属性可省略`get`关键字。\n\n## 属性观察器\n属性观察器可以监控和响应属性值的变化。\n- willSet 在设置新值之前调用\n- didSet 在设置新值之后调用\n``` swift\nclass StepCounter {\n    var totalSteps: Int = 0 {\n    willSet(newTotalSteps) {\n        println(\"About to set totalSteps to \\(newTotalSteps)\")\n    }\n    didSet(oldTotalSteps) {\n        if totalSteps > oldTotalSteps  {\n            println(\"Added \\(totalSteps - oldTotalSteps) steps\")\n        }\n    }\n    }\n}\nlet stepCounter = StepCounter()\nstepCounter.totalSteps = 200\n// About to set totalSteps to 200\n// Added 200 steps\nstepCounter.totalSteps = 360\n// About to set totalSteps to 360\n// Added 160 steps\nstepCounter.totalSteps = 896\n// About to set totalSteps to 896\n// Added 536 steps\n```\n`willSet`如果不指定新值参数名，可用`newValue`替代。\n`didSet`如果不指定旧值参数名，可用`oldValue`替代。\n通过重写的方式可以为继承来的存储属性和计算属性添加属性观察器。\n\n计算属性和属性观察器也可以用于全局变量和局部变量。\n全局的常量变量都是延迟计算的，不需要标记`lazy`。而局部的常量变量不会延迟计算。\n\n## 类型属性\n类型属性指所有类型实例公用的属性，类似于其他语言中的静态属性（_static_）。\n值类型（枚举和结构体）可以定义存储型和计算型的类型属性。\n引用类型（类）只能定义计算型的类型属性。\n存储型的类型属性必须指定默认值。\n\n值类型（枚举和结构体）中在类型属性前加上关键字`static`，而引用类型（类）中在类型属性前加上关键字`class`。\n``` swift\nstruct SomeStructure {\n    static var storedTypeProperty = \"Some value.\"\n    static var computedTypeProperty: Int {\n    // 这里返回一个 Int 值\n    }\n}\nenum SomeEnumeration {\n    static var storedTypeProperty = \"Some value.\"\n    static var computedTypeProperty: Int {\n    // 这里返回一个 Int 值\n    }\n}\nclass SomeClass {\n    class var computedTypeProperty: Int {\n    // 这里返回一个 Int 值\n    }\n}\n\nprintln(SomeClass.computedTypeProperty)\n// 输出 \"42\"\n\nprintln(SomeStructure.storedTypeProperty)\n// 输出 \"Some value.\"\nSomeStructure.storedTypeProperty = \"Another value.\"\nprintln(SomeStructure.storedTypeProperty)\n// 输出 \"Another value.”\n```\n这里计算型类型属性都是只读型，也可以定义为可读可写。\n\n# 方法\n\n## 实例方法\n方法是定义在类，结构体和枚举中的方法，和函数类似。\n类，结构体和枚举创建实例后，其中的方法被称为实例方法，只属于当前实例。\n``` swift\nclass Counter {\n  var count = 0\n  func increment() {\n    count++\n  }\n  func incrementBy(amount: Int) {\n    count += amount\n  }\n  func reset() {\n    count = 0\n  }\n}\n\nlet counter = Counter()\n// 初始计数值是0\ncounter.increment()\n// 计数值现在是1\ncounter.incrementBy(5)\n// 计数值现在是6\ncounter.reset()\n// 计数值现在是0\n```\n### 外部参数名\n方法默认第一个参数没有外部参数名，第二个及以后参数默认有外部参数名，和参数名一致，相当于默认在参数前加上了`#`。\n``` swift\nclass Counter {\n  var count: Int = 0\n  func incrementBy(amount: Int, numberOfTimes: Int) {\n    count += amount * numberOfTimes\n  }\n}\n\nlet counter = Counter()\ncounter.incrementBy(5, numberOfTimes: 3)\n// counter value is now 15\n```\n也可以在第一个参数名添加外部参数名，也可以用_放在第二个及以后的参数名前取消默认的外部参数名。\n``` swift\nclass Counter {\n    var count: Int = 0\n    func incrementBy(#amount: Int, _ numberOfTimes: Int) {\n        count += amount * numberOfTimes\n    }\n}\n\nlet counter = Counter()\ncounter.incrementBy(amount: 5, 3)\nprintln(counter.count)\n// counter value is now 15\n```\n关于外部参数名，参见[函数的外部参数名](http://aidaizyy.github.io/swift_5/#外部参数名)。\n\n### self属性\n在每个实例中，都有一个隐藏属性`self`，指代实例变身，以便方法调用实例本身。\n``` swift\nfunc increment() {\n  self.count++\n}\n```\n\n### 变异方法\n结构体和枚举是值类型。值类型的属性不可以在实例方法中被修改。\n变异方法可以完成对属性的修改，在`func`前加上`mutating`关键字。\n``` swift\nstruct Point {\n  var x = 0.0, y = 0.0\n  mutating func moveByX(deltaX: Double, y deltaY: Double) {\n    x += deltaX\n    y += deltaY\n  }\n}\nvar somePoint = Point(x: 1.0, y: 1.0)\nsomePoint.moveByX(2.0, y: 3.0)\nprintln(\"The point is now at (\\(somePoint.x), \\(somePoint.y))\")\n// 输出 \"The point is now at (3.0, 4.0)\"\n```\n变异方法也可以给`self`赋值，即新建一个实例替代旧的实例。\n``` swift\nstruct Point {\n  var x = 0.0, y = 0.0\n  mutating func moveByX(deltaX: Double, y deltaY: Double) {\n    self = Point(x: x + deltaX, y: y + deltaY)\n  }\n}\n```\n``` swift\nenum TriStateSwitch {\n  case Off, Low, High\n  mutating func next() {\n    switch self {\n    case Off:\n      self = Low\n    case Low:\n      self = High\n    case High:\n      self = Off\n    }\n  }\n}\nvar ovenLight = TriStateSwitch.Low\novenLight.next()\n// ovenLight 现在等于 .High\novenLight.next()\n// ovenLight 现在等于 .Off\n```\n类是引用类型，实例方法可以直接修改属性。\n\n## 类型方法\n类型方法和类型属性类似，都是指所有类型实例公共的方法，类似于其他语言中的静态方法（_static_）。\n类型方法在类型前加上`class`关键字。\n类型方法能够直接通过静态属性的名称访问静态属性。\n``` swift\nclass SomeClass {\n  class func someTypeMethod() {\n    // type method implementation goes here\n  }\n}\nSomeClass.someTypeMethod()\n```\n\n# 下标\n下标（_subscripts_）可以定义在类，结构体和枚举中，是访问对象，集合和序列的快捷方式。比如[数组的访问](http://aidaizyy.github.io/swift_3/#访问)：Array[index]，[字典的访问](http://aidaizyy.github.io/swift_3/#访问-1)：Dictionary[key]。\n下标的定义类似于实例方法和计算性属性的混合。\n使用`subscript`关键字，定义了传入参数数量和类型和返回类型，定义了getter和setter。\n``` swift\nsubscript(index: Int) -> Int {\n    get {\n      // 返回与入参匹配的Int类型的值\n    }\n\n    set(newValue) {\n      // 执行赋值操作\n    }\n}\n```\ngetter和setter的定义和计算型属性一样。\nsetter中可以使用`newValue`默认值，可以省略setter定义成只读类型。\n``` swift\nstruct TimesTable {\n    let multiplier: Int\n    subscript(index: Int) -> Int {\n      return multiplier * index\n    }\n}\nlet threeTimesTable = TimesTable(multiplier: 3)\nprintln(\"3的6倍是\\(threeTimesTable[6])\")\n// 输出 \"3的6倍是18\"\n```\n下标允许任意数量的传入参数，任意类型的传入参数和任意类型的返回值。\n可以使用[变量参数](http://aidaizyy.github.io/swift_5/#变量参数)和[可变参数](http://aidaizyy.github.io/swift_5/#可变参数)，但是不能使用[输入输出参数（inout）](http://aidaizyy.github.io/swift_5/#输入输出参数)和[默认参数值](http://aidaizyy.github.io/swift_5/#默认参数值)。\n``` swift\nstruct Matrix {\n    let rows: Int, columns: Int\n    var grid: [Double]\n    init(rows: Int, columns: Int) {\n      self.rows = rows\n      self.columns = columns\n      grid = Array(count: rows * columns, repeatedValue: 0.0)\n    }\n    func indexIsValidForRow(row: Int, column: Int) -> Bool {\n        return row >= 0 && row < rows && column >= 0 && column < columns\n    }\n    subscript(row: Int, column: Int) -> Double {\n        get {\n            assert(indexIsValidForRow(row, column: column), \"Index out of range\")\n            return grid[(row * columns) + column]\n        }\n        set {\n            assert(indexIsValidForRow(row, column: column), \"Index out of range\")\n            grid[(row * columns) + column] = newValue\n        }\n    }\n}\n\nvar matrix = Matrix(rows: 2, columns: 2)\nprintln(matrix[0, 1])\n//0.0\nmatrix[0, 1] = 1.5\nprintln(matrix[0, 1])\n//1.5\n```\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","slug":"swift_7","published":1,"updated":"2017-05-08T16:40:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2gdu6l9001iv1o3td4ug1jo","content":"<p>本篇介绍Swift的基础知识：枚举，结构体和类的属性，方法和下标。</p>\n<a id=\"more\"></a>\n<p><strong>Title: <a href=\"https://aidaizyy.github.io/swift_7\" target=\"_blank\" rel=\"external\">Swift基础入门(7)：属性，方法和下标</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#109;&#x61;&#105;&#108;&#x74;&#111;&#58;&#x61;&#105;&#100;&#97;&#x69;&#x7a;&#121;&#121;&#x40;&#103;&#x6d;&#x61;&#105;&#108;&#x2e;&#99;&#x6f;&#109;\">&#x61;&#105;&#100;&#97;&#x69;&#x7a;&#121;&#121;&#x40;&#103;&#x6d;&#x61;&#105;&#108;&#x2e;&#99;&#x6f;&#109;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-07-27</a></strong></p>\n<h1 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h1><p>属性分为存储属性（只能用于类和结构体）和计算属性（可用于类，结构体和枚举）。</p>\n<h2 id=\"存储属性\"><a href=\"#存储属性\" class=\"headerlink\" title=\"存储属性\"></a>存储属性</h2><p>存储属性可用<code>var</code>或<code>let</code>修饰。<br>结构体用<code>let</code>修饰，属性不可以更改，因为结构体是值类型。<br>类用<code>let</code>修饰，属性可以更改，因为类是引用类型。<br>结构体可以在构造时逐一初始化属性，而类不可以，参见<a href=\"http://aidaizyy.github.io/swift_6/#类和结构体\" target=\"_blank\" rel=\"external\">类和结构体</a>。</p>\n<ul>\n<li>延迟属性<br>延迟属性用<code>lazy</code>标示，且必须使用<code>var</code>关键字，只有在第一次被调用时才会计算其初始值，在构造时不会计算初始值。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataImporter</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">    DataImporter 是一个将外部文件中的数据导入的类。</div><div class=\"line\">    这个类的初始化会消耗不少时间。</div><div class=\"line\">    */</div><div class=\"line\">    <span class=\"keyword\">var</span> fileName = <span class=\"string\">\"data.txt\"</span></div><div class=\"line\">    <span class=\"comment\">// 这是提供数据导入功能</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataManager</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> importer = <span class=\"type\">DataImporter</span>()</div><div class=\"line\">    <span class=\"keyword\">var</span> data = [<span class=\"type\">String</span>]()</div><div class=\"line\">    <span class=\"comment\">// 这是提供数据管理功能</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> manager = <span class=\"type\">DataManager</span>()</div><div class=\"line\">manager.data.append(<span class=\"string\">\"Some data\"</span>)</div><div class=\"line\">manager.data.append(<span class=\"string\">\"Some more data\"</span>)</div><div class=\"line\"><span class=\"comment\">// DataImporter 实例的 importer 属性还没有被创建</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">println</span>(manager.importer.fileName)</div><div class=\"line\"><span class=\"comment\">// DataImporter 实例的 importer 属性现在被创建了</span></div><div class=\"line\"><span class=\"comment\">// 输出 \"data.txt”</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>以上并未给出全部代码，类<code>DataManager</code>中声明了延迟属性<code>importer</code>。<br>类<code>DataImporter</code>实现数据导入功能，会消耗不少时间。<br>初始化类<code>DataManager</code>时，延迟属性并不会创建。<br>只有在<code>println(manager.importer.fileName)</code>时，属性<code>importer</code>第一次被调用时，才会创建延迟属性<code>importer</code>，完成数据导入功能。</p>\n<h2 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h2><p>计算属性不直接存储值，提供getter获取值和可选的setter来间接设置其他属性的值，必须用<code>var</code>修饰。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">0.0</span>, y = <span class=\"number\">0.0</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Size</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> width = <span class=\"number\">0.0</span>, height = <span class=\"number\">0.0</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Rect</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> origin = <span class=\"type\">Point</span>()</div><div class=\"line\">    <span class=\"keyword\">var</span> size = <span class=\"type\">Size</span>()</div><div class=\"line\">    <span class=\"keyword\">var</span> center: <span class=\"type\">Point</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">get</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> centerX = origin.x + (size.width / <span class=\"number\">2</span>)</div><div class=\"line\">        <span class=\"keyword\">let</span> centerY = origin.y + (size.height / <span class=\"number\">2</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Point</span>(x: centerX, y: centerY)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">set</span>(newCenter) &#123;</div><div class=\"line\">        origin.x = newCenter.x - (size.width / <span class=\"number\">2</span>)</div><div class=\"line\">        origin.y = newCenter.y - (size.height / <span class=\"number\">2</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> square = <span class=\"type\">Rect</span>(origin: <span class=\"type\">Point</span>(x: <span class=\"number\">0.0</span>, y: <span class=\"number\">0.0</span>),</div><div class=\"line\">    size: <span class=\"type\">Size</span>(width: <span class=\"number\">10.0</span>, height: <span class=\"number\">10.0</span>))</div><div class=\"line\"><span class=\"keyword\">let</span> initialSquareCenter = square.center</div><div class=\"line\">square.center = <span class=\"type\">Point</span>(x: <span class=\"number\">15.0</span>, y: <span class=\"number\">15.0</span>)</div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"square.origin is now at (\\(square.origin.x), \\(square.origin.y))\"</span>)</div><div class=\"line\"><span class=\"comment\">// 输出 \"square.origin is now at (10.0, 10.0)”</span></div></pre></td></tr></table></figure></p>\n<p>在结构体<code>Rect</code>中，属性<code>center</code>是计算属性，分别设置了<code>get</code>方法和<code>set</code>方法。<br><code>set</code>方法可以不指定新值的参数名称，比如<code>newCenter</code>，在方法中直接使用默认名称<code>newValue</code>，上面可写作：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">set</span> &#123;</div><div class=\"line\">        origin.x = newValue.x - (size.width / <span class=\"number\">2</span>)</div><div class=\"line\">        origin.y = newValue.y - (size.height / <span class=\"number\">2</span>)</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>只读计算属性<br>不设置setter，只设置getter的计算属性称为只读计算属性。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Cuboid</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> width = <span class=\"number\">0.0</span>, height = <span class=\"number\">0.0</span>, depth = <span class=\"number\">0.0</span></div><div class=\"line\">    <span class=\"keyword\">var</span> volume: <span class=\"type\">Double</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> width * height * depth</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> fourByFiveByTwo = <span class=\"type\">Cuboid</span>(width: <span class=\"number\">4.0</span>, height: <span class=\"number\">5.0</span>, depth: <span class=\"number\">2.0</span>)</div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"the volume of fourByFiveByTwo is \\(fourByFiveByTwo.volume)\"</span>)</div><div class=\"line\"><span class=\"comment\">// 输出 \"the volume of fourByFiveByTwo is 40.0\"</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>只读计算属性可省略<code>get</code>关键字。</p>\n<h2 id=\"属性观察器\"><a href=\"#属性观察器\" class=\"headerlink\" title=\"属性观察器\"></a>属性观察器</h2><p>属性观察器可以监控和响应属性值的变化。</p>\n<ul>\n<li>willSet 在设置新值之前调用</li>\n<li>didSet 在设置新值之后调用<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StepCounter</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> totalSteps: <span class=\"type\">Int</span> = <span class=\"number\">0</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">willSet</span>(newTotalSteps) &#123;</div><div class=\"line\">        <span class=\"built_in\">println</span>(<span class=\"string\">\"About to set totalSteps to \\(newTotalSteps)\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">didSet</span>(oldTotalSteps) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> totalSteps &gt; oldTotalSteps  &#123;</div><div class=\"line\">            <span class=\"built_in\">println</span>(<span class=\"string\">\"Added \\(totalSteps - oldTotalSteps) steps\"</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> stepCounter = <span class=\"type\">StepCounter</span>()</div><div class=\"line\">stepCounter.totalSteps = <span class=\"number\">200</span></div><div class=\"line\"><span class=\"comment\">// About to set totalSteps to 200</span></div><div class=\"line\"><span class=\"comment\">// Added 200 steps</span></div><div class=\"line\">stepCounter.totalSteps = <span class=\"number\">360</span></div><div class=\"line\"><span class=\"comment\">// About to set totalSteps to 360</span></div><div class=\"line\"><span class=\"comment\">// Added 160 steps</span></div><div class=\"line\">stepCounter.totalSteps = <span class=\"number\">896</span></div><div class=\"line\"><span class=\"comment\">// About to set totalSteps to 896</span></div><div class=\"line\"><span class=\"comment\">// Added 536 steps</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><code>willSet</code>如果不指定新值参数名，可用<code>newValue</code>替代。<br><code>didSet</code>如果不指定旧值参数名，可用<code>oldValue</code>替代。<br>通过重写的方式可以为继承来的存储属性和计算属性添加属性观察器。</p>\n<p>计算属性和属性观察器也可以用于全局变量和局部变量。<br>全局的常量变量都是延迟计算的，不需要标记<code>lazy</code>。而局部的常量变量不会延迟计算。</p>\n<h2 id=\"类型属性\"><a href=\"#类型属性\" class=\"headerlink\" title=\"类型属性\"></a>类型属性</h2><p>类型属性指所有类型实例公用的属性，类似于其他语言中的静态属性（<em>static</em>）。<br>值类型（枚举和结构体）可以定义存储型和计算型的类型属性。<br>引用类型（类）只能定义计算型的类型属性。<br>存储型的类型属性必须指定默认值。</p>\n<p>值类型（枚举和结构体）中在类型属性前加上关键字<code>static</code>，而引用类型（类）中在类型属性前加上关键字<code>class</code>。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SomeStructure</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> storedTypeProperty = <span class=\"string\">\"Some value.\"</span></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> computedTypeProperty: <span class=\"type\">Int</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 这里返回一个 Int 值</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">SomeEnumeration</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> storedTypeProperty = <span class=\"string\">\"Some value.\"</span></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> computedTypeProperty: <span class=\"type\">Int</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 这里返回一个 Int 值</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span> </span>&#123;</div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">var</span> <span class=\"title\">computedTypeProperty</span>: <span class=\"title\">Int</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 这里返回一个 Int 值</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"type\">SomeClass</span>.computedTypeProperty)</div><div class=\"line\"><span class=\"comment\">// 输出 \"42\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"type\">SomeStructure</span>.storedTypeProperty)</div><div class=\"line\"><span class=\"comment\">// 输出 \"Some value.\"</span></div><div class=\"line\"><span class=\"type\">SomeStructure</span>.storedTypeProperty = <span class=\"string\">\"Another value.\"</span></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"type\">SomeStructure</span>.storedTypeProperty)</div><div class=\"line\"><span class=\"comment\">// 输出 \"Another value.”</span></div></pre></td></tr></table></figure></p>\n<p>这里计算型类型属性都是只读型，也可以定义为可读可写。</p>\n<h1 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h1><h2 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h2><p>方法是定义在类，结构体和枚举中的方法，和函数类似。<br>类，结构体和枚举创建实例后，其中的方法被称为实例方法，只属于当前实例。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> <span class=\"built_in\">count</span> = <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">increment</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"built_in\">count</span>++</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">incrementBy</span><span class=\"params\">(amount: Int)</span></span> &#123;</div><div class=\"line\">    <span class=\"built_in\">count</span> += amount</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">reset</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"built_in\">count</span> = <span class=\"number\">0</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> counter = <span class=\"type\">Counter</span>()</div><div class=\"line\"><span class=\"comment\">// 初始计数值是0</span></div><div class=\"line\">counter.increment()</div><div class=\"line\"><span class=\"comment\">// 计数值现在是1</span></div><div class=\"line\">counter.incrementBy(<span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"comment\">// 计数值现在是6</span></div><div class=\"line\">counter.reset()</div><div class=\"line\"><span class=\"comment\">// 计数值现在是0</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"外部参数名\"><a href=\"#外部参数名\" class=\"headerlink\" title=\"外部参数名\"></a>外部参数名</h3><p>方法默认第一个参数没有外部参数名，第二个及以后参数默认有外部参数名，和参数名一致，相当于默认在参数前加上了<code>#</code>。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> <span class=\"built_in\">count</span>: <span class=\"type\">Int</span> = <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">incrementBy</span><span class=\"params\">(amount: Int, numberOfTimes: Int)</span></span> &#123;</div><div class=\"line\">    <span class=\"built_in\">count</span> += amount * numberOfTimes</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> counter = <span class=\"type\">Counter</span>()</div><div class=\"line\">counter.incrementBy(<span class=\"number\">5</span>, numberOfTimes: <span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"comment\">// counter value is now 15</span></div></pre></td></tr></table></figure></p>\n<p>也可以在第一个参数名添加外部参数名，也可以用_放在第二个及以后的参数名前取消默认的外部参数名。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">count</span>: <span class=\"type\">Int</span> = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">incrementBy</span><span class=\"params\">(#amount: Int, <span class=\"number\">_</span> numberOfTimes: Int)</span></span> &#123;</div><div class=\"line\">        <span class=\"built_in\">count</span> += amount * numberOfTimes</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> counter = <span class=\"type\">Counter</span>()</div><div class=\"line\">counter.incrementBy(amount: <span class=\"number\">5</span>, <span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"built_in\">println</span>(counter.<span class=\"built_in\">count</span>)</div><div class=\"line\"><span class=\"comment\">// counter value is now 15</span></div></pre></td></tr></table></figure></p>\n<p>关于外部参数名，参见<a href=\"http://aidaizyy.github.io/swift_5/#外部参数名\" target=\"_blank\" rel=\"external\">函数的外部参数名</a>。</p>\n<h3 id=\"self属性\"><a href=\"#self属性\" class=\"headerlink\" title=\"self属性\"></a>self属性</h3><p>在每个实例中，都有一个隐藏属性<code>self</code>，指代实例变身，以便方法调用实例本身。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">increment</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">  <span class=\"keyword\">self</span>.<span class=\"built_in\">count</span>++</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"变异方法\"><a href=\"#变异方法\" class=\"headerlink\" title=\"变异方法\"></a>变异方法</h3><p>结构体和枚举是值类型。值类型的属性不可以在实例方法中被修改。<br>变异方法可以完成对属性的修改，在<code>func</code>前加上<code>mutating</code>关键字。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"number\">0.0</span>, y = <span class=\"number\">0.0</span></div><div class=\"line\">  <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">moveByX</span><span class=\"params\">(deltaX: Double, y deltaY: Double)</span></span> &#123;</div><div class=\"line\">    x += deltaX</div><div class=\"line\">    y += deltaY</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> somePoint = <span class=\"type\">Point</span>(x: <span class=\"number\">1.0</span>, y: <span class=\"number\">1.0</span>)</div><div class=\"line\">somePoint.moveByX(<span class=\"number\">2.0</span>, y: <span class=\"number\">3.0</span>)</div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"The point is now at (\\(somePoint.x), \\(somePoint.y))\"</span>)</div><div class=\"line\"><span class=\"comment\">// 输出 \"The point is now at (3.0, 4.0)\"</span></div></pre></td></tr></table></figure></p>\n<p>变异方法也可以给<code>self</code>赋值，即新建一个实例替代旧的实例。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"number\">0.0</span>, y = <span class=\"number\">0.0</span></div><div class=\"line\">  <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">moveByX</span><span class=\"params\">(deltaX: Double, y deltaY: Double)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">self</span> = <span class=\"type\">Point</span>(x: x + deltaX, y: y + deltaY)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">TriStateSwitch</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Off</span>, <span class=\"type\">Low</span>, <span class=\"type\">High</span></div><div class=\"line\">  <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">next</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Off</span>:</div><div class=\"line\">      <span class=\"keyword\">self</span> = <span class=\"type\">Low</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Low</span>:</div><div class=\"line\">      <span class=\"keyword\">self</span> = <span class=\"type\">High</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">High</span>:</div><div class=\"line\">      <span class=\"keyword\">self</span> = <span class=\"type\">Off</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> ovenLight = <span class=\"type\">TriStateSwitch</span>.<span class=\"type\">Low</span></div><div class=\"line\">ovenLight.next()</div><div class=\"line\"><span class=\"comment\">// ovenLight 现在等于 .High</span></div><div class=\"line\">ovenLight.next()</div><div class=\"line\"><span class=\"comment\">// ovenLight 现在等于 .Off</span></div></pre></td></tr></table></figure>\n<p>类是引用类型，实例方法可以直接修改属性。</p>\n<h2 id=\"类型方法\"><a href=\"#类型方法\" class=\"headerlink\" title=\"类型方法\"></a>类型方法</h2><p>类型方法和类型属性类似，都是指所有类型实例公共的方法，类似于其他语言中的静态方法（<em>static</em>）。<br>类型方法在类型前加上<code>class</code>关键字。<br>类型方法能够直接通过静态属性的名称访问静态属性。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span> </span>&#123;</div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">func</span> <span class=\"title\">someTypeMethod</span>() </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// type method implementation goes here</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"type\">SomeClass</span>.someTypeMethod()</div></pre></td></tr></table></figure></p>\n<h1 id=\"下标\"><a href=\"#下标\" class=\"headerlink\" title=\"下标\"></a>下标</h1><p>下标（<em>subscripts</em>）可以定义在类，结构体和枚举中，是访问对象，集合和序列的快捷方式。比如<a href=\"http://aidaizyy.github.io/swift_3/#访问\" target=\"_blank\" rel=\"external\">数组的访问</a>：Array[index]，<a href=\"http://aidaizyy.github.io/swift_3/#访问-1\" target=\"_blank\" rel=\"external\">字典的访问</a>：Dictionary[key]。<br>下标的定义类似于实例方法和计算性属性的混合。<br>使用<code>subscript</code>关键字，定义了传入参数数量和类型和返回类型，定义了getter和setter。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">subscript</span>(index: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">get</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// 返回与入参匹配的Int类型的值</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">set</span>(newValue) &#123;</div><div class=\"line\">      <span class=\"comment\">// 执行赋值操作</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>getter和setter的定义和计算型属性一样。<br>setter中可以使用<code>newValue</code>默认值，可以省略setter定义成只读类型。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">TimesTable</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> multiplier: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">subscript</span>(index: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> multiplier * index</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> threeTimesTable = <span class=\"type\">TimesTable</span>(multiplier: <span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"3的6倍是\\(threeTimesTable[6])\"</span>)</div><div class=\"line\"><span class=\"comment\">// 输出 \"3的6倍是18\"</span></div></pre></td></tr></table></figure></p>\n<p>下标允许任意数量的传入参数，任意类型的传入参数和任意类型的返回值。<br>可以使用<a href=\"http://aidaizyy.github.io/swift_5/#变量参数\" target=\"_blank\" rel=\"external\">变量参数</a>和<a href=\"http://aidaizyy.github.io/swift_5/#可变参数\" target=\"_blank\" rel=\"external\">可变参数</a>，但是不能使用<a href=\"http://aidaizyy.github.io/swift_5/#输入输出参数\" target=\"_blank\" rel=\"external\">输入输出参数（inout）</a>和<a href=\"http://aidaizyy.github.io/swift_5/#默认参数值\" target=\"_blank\" rel=\"external\">默认参数值</a>。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Matrix</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> rows: <span class=\"type\">Int</span>, columns: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">var</span> grid: [<span class=\"type\">Double</span>]</div><div class=\"line\">    <span class=\"keyword\">init</span>(rows: <span class=\"type\">Int</span>, columns: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">self</span>.rows = rows</div><div class=\"line\">      <span class=\"keyword\">self</span>.columns = columns</div><div class=\"line\">      grid = <span class=\"type\">Array</span>(<span class=\"built_in\">count</span>: rows * columns, repeatedValue: <span class=\"number\">0.0</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">indexIsValidForRow</span><span class=\"params\">(row: Int, column: Int)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> row &gt;= <span class=\"number\">0</span> &amp;&amp; row &lt; rows &amp;&amp; column &gt;= <span class=\"number\">0</span> &amp;&amp; column &lt; columns</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">subscript</span>(row: <span class=\"type\">Int</span>, column: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Double</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">get</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">assert</span>(indexIsValidForRow(row, column: column), <span class=\"string\">\"Index out of range\"</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> grid[(row * columns) + column]</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">set</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">assert</span>(indexIsValidForRow(row, column: column), <span class=\"string\">\"Index out of range\"</span>)</div><div class=\"line\">            grid[(row * columns) + column] = newValue</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> matrix = <span class=\"type\">Matrix</span>(rows: <span class=\"number\">2</span>, columns: <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"built_in\">println</span>(matrix[<span class=\"number\">0</span>, <span class=\"number\">1</span>])</div><div class=\"line\"><span class=\"comment\">//0.0</span></div><div class=\"line\">matrix[<span class=\"number\">0</span>, <span class=\"number\">1</span>] = <span class=\"number\">1.5</span></div><div class=\"line\"><span class=\"built_in\">println</span>(matrix[<span class=\"number\">0</span>, <span class=\"number\">1</span>])</div><div class=\"line\"><span class=\"comment\">//1.5</span></div></pre></td></tr></table></figure></p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>本篇介绍Swift的基础知识：枚举，结构体和类的属性，方法和下标。</p>","more":"<p><strong>Title: <a href=\"https://aidaizyy.github.io/swift_7\" target=\"_blank\" rel=\"external\">Swift基础入门(7)：属性，方法和下标</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#109;&#x61;&#105;&#108;&#x74;&#111;&#58;&#x61;&#105;&#100;&#97;&#x69;&#x7a;&#121;&#121;&#x40;&#103;&#x6d;&#x61;&#105;&#108;&#x2e;&#99;&#x6f;&#109;\">&#x61;&#105;&#100;&#97;&#x69;&#x7a;&#121;&#121;&#x40;&#103;&#x6d;&#x61;&#105;&#108;&#x2e;&#99;&#x6f;&#109;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-07-27</a></strong></p>\n<h1 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h1><p>属性分为存储属性（只能用于类和结构体）和计算属性（可用于类，结构体和枚举）。</p>\n<h2 id=\"存储属性\"><a href=\"#存储属性\" class=\"headerlink\" title=\"存储属性\"></a>存储属性</h2><p>存储属性可用<code>var</code>或<code>let</code>修饰。<br>结构体用<code>let</code>修饰，属性不可以更改，因为结构体是值类型。<br>类用<code>let</code>修饰，属性可以更改，因为类是引用类型。<br>结构体可以在构造时逐一初始化属性，而类不可以，参见<a href=\"http://aidaizyy.github.io/swift_6/#类和结构体\" target=\"_blank\" rel=\"external\">类和结构体</a>。</p>\n<ul>\n<li>延迟属性<br>延迟属性用<code>lazy</code>标示，且必须使用<code>var</code>关键字，只有在第一次被调用时才会计算其初始值，在构造时不会计算初始值。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataImporter</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/*</span></div><div class=\"line\">    DataImporter 是一个将外部文件中的数据导入的类。</div><div class=\"line\">    这个类的初始化会消耗不少时间。</div><div class=\"line\">    */</div><div class=\"line\">    <span class=\"keyword\">var</span> fileName = <span class=\"string\">\"data.txt\"</span></div><div class=\"line\">    <span class=\"comment\">// 这是提供数据导入功能</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DataManager</span> </span>&#123;</div><div class=\"line\">    <span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> importer = <span class=\"type\">DataImporter</span>()</div><div class=\"line\">    <span class=\"keyword\">var</span> data = [<span class=\"type\">String</span>]()</div><div class=\"line\">    <span class=\"comment\">// 这是提供数据管理功能</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> manager = <span class=\"type\">DataManager</span>()</div><div class=\"line\">manager.data.append(<span class=\"string\">\"Some data\"</span>)</div><div class=\"line\">manager.data.append(<span class=\"string\">\"Some more data\"</span>)</div><div class=\"line\"><span class=\"comment\">// DataImporter 实例的 importer 属性还没有被创建</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">println</span>(manager.importer.fileName)</div><div class=\"line\"><span class=\"comment\">// DataImporter 实例的 importer 属性现在被创建了</span></div><div class=\"line\"><span class=\"comment\">// 输出 \"data.txt”</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>以上并未给出全部代码，类<code>DataManager</code>中声明了延迟属性<code>importer</code>。<br>类<code>DataImporter</code>实现数据导入功能，会消耗不少时间。<br>初始化类<code>DataManager</code>时，延迟属性并不会创建。<br>只有在<code>println(manager.importer.fileName)</code>时，属性<code>importer</code>第一次被调用时，才会创建延迟属性<code>importer</code>，完成数据导入功能。</p>\n<h2 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h2><p>计算属性不直接存储值，提供getter获取值和可选的setter来间接设置其他属性的值，必须用<code>var</code>修饰。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">0.0</span>, y = <span class=\"number\">0.0</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Size</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> width = <span class=\"number\">0.0</span>, height = <span class=\"number\">0.0</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Rect</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> origin = <span class=\"type\">Point</span>()</div><div class=\"line\">    <span class=\"keyword\">var</span> size = <span class=\"type\">Size</span>()</div><div class=\"line\">    <span class=\"keyword\">var</span> center: <span class=\"type\">Point</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">get</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> centerX = origin.x + (size.width / <span class=\"number\">2</span>)</div><div class=\"line\">        <span class=\"keyword\">let</span> centerY = origin.y + (size.height / <span class=\"number\">2</span>)</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"type\">Point</span>(x: centerX, y: centerY)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">set</span>(newCenter) &#123;</div><div class=\"line\">        origin.x = newCenter.x - (size.width / <span class=\"number\">2</span>)</div><div class=\"line\">        origin.y = newCenter.y - (size.height / <span class=\"number\">2</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> square = <span class=\"type\">Rect</span>(origin: <span class=\"type\">Point</span>(x: <span class=\"number\">0.0</span>, y: <span class=\"number\">0.0</span>),</div><div class=\"line\">    size: <span class=\"type\">Size</span>(width: <span class=\"number\">10.0</span>, height: <span class=\"number\">10.0</span>))</div><div class=\"line\"><span class=\"keyword\">let</span> initialSquareCenter = square.center</div><div class=\"line\">square.center = <span class=\"type\">Point</span>(x: <span class=\"number\">15.0</span>, y: <span class=\"number\">15.0</span>)</div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"square.origin is now at (\\(square.origin.x), \\(square.origin.y))\"</span>)</div><div class=\"line\"><span class=\"comment\">// 输出 \"square.origin is now at (10.0, 10.0)”</span></div></pre></td></tr></table></figure></p>\n<p>在结构体<code>Rect</code>中，属性<code>center</code>是计算属性，分别设置了<code>get</code>方法和<code>set</code>方法。<br><code>set</code>方法可以不指定新值的参数名称，比如<code>newCenter</code>，在方法中直接使用默认名称<code>newValue</code>，上面可写作：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">set</span> &#123;</div><div class=\"line\">        origin.x = newValue.x - (size.width / <span class=\"number\">2</span>)</div><div class=\"line\">        origin.y = newValue.y - (size.height / <span class=\"number\">2</span>)</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<ul>\n<li>只读计算属性<br>不设置setter，只设置getter的计算属性称为只读计算属性。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Cuboid</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> width = <span class=\"number\">0.0</span>, height = <span class=\"number\">0.0</span>, depth = <span class=\"number\">0.0</span></div><div class=\"line\">    <span class=\"keyword\">var</span> volume: <span class=\"type\">Double</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> width * height * depth</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> fourByFiveByTwo = <span class=\"type\">Cuboid</span>(width: <span class=\"number\">4.0</span>, height: <span class=\"number\">5.0</span>, depth: <span class=\"number\">2.0</span>)</div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"the volume of fourByFiveByTwo is \\(fourByFiveByTwo.volume)\"</span>)</div><div class=\"line\"><span class=\"comment\">// 输出 \"the volume of fourByFiveByTwo is 40.0\"</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>只读计算属性可省略<code>get</code>关键字。</p>\n<h2 id=\"属性观察器\"><a href=\"#属性观察器\" class=\"headerlink\" title=\"属性观察器\"></a>属性观察器</h2><p>属性观察器可以监控和响应属性值的变化。</p>\n<ul>\n<li>willSet 在设置新值之前调用</li>\n<li>didSet 在设置新值之后调用<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">StepCounter</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> totalSteps: <span class=\"type\">Int</span> = <span class=\"number\">0</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">willSet</span>(newTotalSteps) &#123;</div><div class=\"line\">        <span class=\"built_in\">println</span>(<span class=\"string\">\"About to set totalSteps to \\(newTotalSteps)\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">didSet</span>(oldTotalSteps) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> totalSteps &gt; oldTotalSteps  &#123;</div><div class=\"line\">            <span class=\"built_in\">println</span>(<span class=\"string\">\"Added \\(totalSteps - oldTotalSteps) steps\"</span>)</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> stepCounter = <span class=\"type\">StepCounter</span>()</div><div class=\"line\">stepCounter.totalSteps = <span class=\"number\">200</span></div><div class=\"line\"><span class=\"comment\">// About to set totalSteps to 200</span></div><div class=\"line\"><span class=\"comment\">// Added 200 steps</span></div><div class=\"line\">stepCounter.totalSteps = <span class=\"number\">360</span></div><div class=\"line\"><span class=\"comment\">// About to set totalSteps to 360</span></div><div class=\"line\"><span class=\"comment\">// Added 160 steps</span></div><div class=\"line\">stepCounter.totalSteps = <span class=\"number\">896</span></div><div class=\"line\"><span class=\"comment\">// About to set totalSteps to 896</span></div><div class=\"line\"><span class=\"comment\">// Added 536 steps</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><code>willSet</code>如果不指定新值参数名，可用<code>newValue</code>替代。<br><code>didSet</code>如果不指定旧值参数名，可用<code>oldValue</code>替代。<br>通过重写的方式可以为继承来的存储属性和计算属性添加属性观察器。</p>\n<p>计算属性和属性观察器也可以用于全局变量和局部变量。<br>全局的常量变量都是延迟计算的，不需要标记<code>lazy</code>。而局部的常量变量不会延迟计算。</p>\n<h2 id=\"类型属性\"><a href=\"#类型属性\" class=\"headerlink\" title=\"类型属性\"></a>类型属性</h2><p>类型属性指所有类型实例公用的属性，类似于其他语言中的静态属性（<em>static</em>）。<br>值类型（枚举和结构体）可以定义存储型和计算型的类型属性。<br>引用类型（类）只能定义计算型的类型属性。<br>存储型的类型属性必须指定默认值。</p>\n<p>值类型（枚举和结构体）中在类型属性前加上关键字<code>static</code>，而引用类型（类）中在类型属性前加上关键字<code>class</code>。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">SomeStructure</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> storedTypeProperty = <span class=\"string\">\"Some value.\"</span></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> computedTypeProperty: <span class=\"type\">Int</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 这里返回一个 Int 值</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">SomeEnumeration</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> storedTypeProperty = <span class=\"string\">\"Some value.\"</span></div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">var</span> computedTypeProperty: <span class=\"type\">Int</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// 这里返回一个 Int 值</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span> </span>&#123;</div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">var</span> <span class=\"title\">computedTypeProperty</span>: <span class=\"title\">Int</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 这里返回一个 Int 值</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"type\">SomeClass</span>.computedTypeProperty)</div><div class=\"line\"><span class=\"comment\">// 输出 \"42\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"type\">SomeStructure</span>.storedTypeProperty)</div><div class=\"line\"><span class=\"comment\">// 输出 \"Some value.\"</span></div><div class=\"line\"><span class=\"type\">SomeStructure</span>.storedTypeProperty = <span class=\"string\">\"Another value.\"</span></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"type\">SomeStructure</span>.storedTypeProperty)</div><div class=\"line\"><span class=\"comment\">// 输出 \"Another value.”</span></div></pre></td></tr></table></figure></p>\n<p>这里计算型类型属性都是只读型，也可以定义为可读可写。</p>\n<h1 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h1><h2 id=\"实例方法\"><a href=\"#实例方法\" class=\"headerlink\" title=\"实例方法\"></a>实例方法</h2><p>方法是定义在类，结构体和枚举中的方法，和函数类似。<br>类，结构体和枚举创建实例后，其中的方法被称为实例方法，只属于当前实例。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> <span class=\"built_in\">count</span> = <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">increment</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"built_in\">count</span>++</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">incrementBy</span><span class=\"params\">(amount: Int)</span></span> &#123;</div><div class=\"line\">    <span class=\"built_in\">count</span> += amount</div><div class=\"line\">  &#125;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">reset</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"built_in\">count</span> = <span class=\"number\">0</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> counter = <span class=\"type\">Counter</span>()</div><div class=\"line\"><span class=\"comment\">// 初始计数值是0</span></div><div class=\"line\">counter.increment()</div><div class=\"line\"><span class=\"comment\">// 计数值现在是1</span></div><div class=\"line\">counter.incrementBy(<span class=\"number\">5</span>)</div><div class=\"line\"><span class=\"comment\">// 计数值现在是6</span></div><div class=\"line\">counter.reset()</div><div class=\"line\"><span class=\"comment\">// 计数值现在是0</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"外部参数名\"><a href=\"#外部参数名\" class=\"headerlink\" title=\"外部参数名\"></a>外部参数名</h3><p>方法默认第一个参数没有外部参数名，第二个及以后参数默认有外部参数名，和参数名一致，相当于默认在参数前加上了<code>#</code>。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> <span class=\"built_in\">count</span>: <span class=\"type\">Int</span> = <span class=\"number\">0</span></div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">incrementBy</span><span class=\"params\">(amount: Int, numberOfTimes: Int)</span></span> &#123;</div><div class=\"line\">    <span class=\"built_in\">count</span> += amount * numberOfTimes</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> counter = <span class=\"type\">Counter</span>()</div><div class=\"line\">counter.incrementBy(<span class=\"number\">5</span>, numberOfTimes: <span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"comment\">// counter value is now 15</span></div></pre></td></tr></table></figure></p>\n<p>也可以在第一个参数名添加外部参数名，也可以用_放在第二个及以后的参数名前取消默认的外部参数名。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Counter</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> <span class=\"built_in\">count</span>: <span class=\"type\">Int</span> = <span class=\"number\">0</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">incrementBy</span><span class=\"params\">(#amount: Int, <span class=\"number\">_</span> numberOfTimes: Int)</span></span> &#123;</div><div class=\"line\">        <span class=\"built_in\">count</span> += amount * numberOfTimes</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> counter = <span class=\"type\">Counter</span>()</div><div class=\"line\">counter.incrementBy(amount: <span class=\"number\">5</span>, <span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"built_in\">println</span>(counter.<span class=\"built_in\">count</span>)</div><div class=\"line\"><span class=\"comment\">// counter value is now 15</span></div></pre></td></tr></table></figure></p>\n<p>关于外部参数名，参见<a href=\"http://aidaizyy.github.io/swift_5/#外部参数名\" target=\"_blank\" rel=\"external\">函数的外部参数名</a>。</p>\n<h3 id=\"self属性\"><a href=\"#self属性\" class=\"headerlink\" title=\"self属性\"></a>self属性</h3><p>在每个实例中，都有一个隐藏属性<code>self</code>，指代实例变身，以便方法调用实例本身。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">increment</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">  <span class=\"keyword\">self</span>.<span class=\"built_in\">count</span>++</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"变异方法\"><a href=\"#变异方法\" class=\"headerlink\" title=\"变异方法\"></a>变异方法</h3><p>结构体和枚举是值类型。值类型的属性不可以在实例方法中被修改。<br>变异方法可以完成对属性的修改，在<code>func</code>前加上<code>mutating</code>关键字。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"number\">0.0</span>, y = <span class=\"number\">0.0</span></div><div class=\"line\">  <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">moveByX</span><span class=\"params\">(deltaX: Double, y deltaY: Double)</span></span> &#123;</div><div class=\"line\">    x += deltaX</div><div class=\"line\">    y += deltaY</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> somePoint = <span class=\"type\">Point</span>(x: <span class=\"number\">1.0</span>, y: <span class=\"number\">1.0</span>)</div><div class=\"line\">somePoint.moveByX(<span class=\"number\">2.0</span>, y: <span class=\"number\">3.0</span>)</div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"The point is now at (\\(somePoint.x), \\(somePoint.y))\"</span>)</div><div class=\"line\"><span class=\"comment\">// 输出 \"The point is now at (3.0, 4.0)\"</span></div></pre></td></tr></table></figure></p>\n<p>变异方法也可以给<code>self</code>赋值，即新建一个实例替代旧的实例。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">var</span> x = <span class=\"number\">0.0</span>, y = <span class=\"number\">0.0</span></div><div class=\"line\">  <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">moveByX</span><span class=\"params\">(deltaX: Double, y deltaY: Double)</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">self</span> = <span class=\"type\">Point</span>(x: x + deltaX, y: y + deltaY)</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">TriStateSwitch</span> </span>&#123;</div><div class=\"line\">  <span class=\"keyword\">case</span> <span class=\"type\">Off</span>, <span class=\"type\">Low</span>, <span class=\"type\">High</span></div><div class=\"line\">  <span class=\"keyword\">mutating</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">next</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">    <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Off</span>:</div><div class=\"line\">      <span class=\"keyword\">self</span> = <span class=\"type\">Low</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Low</span>:</div><div class=\"line\">      <span class=\"keyword\">self</span> = <span class=\"type\">High</span></div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">High</span>:</div><div class=\"line\">      <span class=\"keyword\">self</span> = <span class=\"type\">Off</span></div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">var</span> ovenLight = <span class=\"type\">TriStateSwitch</span>.<span class=\"type\">Low</span></div><div class=\"line\">ovenLight.next()</div><div class=\"line\"><span class=\"comment\">// ovenLight 现在等于 .High</span></div><div class=\"line\">ovenLight.next()</div><div class=\"line\"><span class=\"comment\">// ovenLight 现在等于 .Off</span></div></pre></td></tr></table></figure>\n<p>类是引用类型，实例方法可以直接修改属性。</p>\n<h2 id=\"类型方法\"><a href=\"#类型方法\" class=\"headerlink\" title=\"类型方法\"></a>类型方法</h2><p>类型方法和类型属性类似，都是指所有类型实例公共的方法，类似于其他语言中的静态方法（<em>static</em>）。<br>类型方法在类型前加上<code>class</code>关键字。<br>类型方法能够直接通过静态属性的名称访问静态属性。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span> </span>&#123;</div><div class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">func</span> <span class=\"title\">someTypeMethod</span>() </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// type method implementation goes here</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"type\">SomeClass</span>.someTypeMethod()</div></pre></td></tr></table></figure></p>\n<h1 id=\"下标\"><a href=\"#下标\" class=\"headerlink\" title=\"下标\"></a>下标</h1><p>下标（<em>subscripts</em>）可以定义在类，结构体和枚举中，是访问对象，集合和序列的快捷方式。比如<a href=\"http://aidaizyy.github.io/swift_3/#访问\" target=\"_blank\" rel=\"external\">数组的访问</a>：Array[index]，<a href=\"http://aidaizyy.github.io/swift_3/#访问-1\" target=\"_blank\" rel=\"external\">字典的访问</a>：Dictionary[key]。<br>下标的定义类似于实例方法和计算性属性的混合。<br>使用<code>subscript</code>关键字，定义了传入参数数量和类型和返回类型，定义了getter和setter。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">subscript</span>(index: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">get</span> &#123;</div><div class=\"line\">      <span class=\"comment\">// 返回与入参匹配的Int类型的值</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">set</span>(newValue) &#123;</div><div class=\"line\">      <span class=\"comment\">// 执行赋值操作</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>getter和setter的定义和计算型属性一样。<br>setter中可以使用<code>newValue</code>默认值，可以省略setter定义成只读类型。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">TimesTable</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> multiplier: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">subscript</span>(index: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Int</span> &#123;</div><div class=\"line\">      <span class=\"keyword\">return</span> multiplier * index</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> threeTimesTable = <span class=\"type\">TimesTable</span>(multiplier: <span class=\"number\">3</span>)</div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"3的6倍是\\(threeTimesTable[6])\"</span>)</div><div class=\"line\"><span class=\"comment\">// 输出 \"3的6倍是18\"</span></div></pre></td></tr></table></figure></p>\n<p>下标允许任意数量的传入参数，任意类型的传入参数和任意类型的返回值。<br>可以使用<a href=\"http://aidaizyy.github.io/swift_5/#变量参数\" target=\"_blank\" rel=\"external\">变量参数</a>和<a href=\"http://aidaizyy.github.io/swift_5/#可变参数\" target=\"_blank\" rel=\"external\">可变参数</a>，但是不能使用<a href=\"http://aidaizyy.github.io/swift_5/#输入输出参数\" target=\"_blank\" rel=\"external\">输入输出参数（inout）</a>和<a href=\"http://aidaizyy.github.io/swift_5/#默认参数值\" target=\"_blank\" rel=\"external\">默认参数值</a>。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Matrix</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> rows: <span class=\"type\">Int</span>, columns: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">var</span> grid: [<span class=\"type\">Double</span>]</div><div class=\"line\">    <span class=\"keyword\">init</span>(rows: <span class=\"type\">Int</span>, columns: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">      <span class=\"keyword\">self</span>.rows = rows</div><div class=\"line\">      <span class=\"keyword\">self</span>.columns = columns</div><div class=\"line\">      grid = <span class=\"type\">Array</span>(<span class=\"built_in\">count</span>: rows * columns, repeatedValue: <span class=\"number\">0.0</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">indexIsValidForRow</span><span class=\"params\">(row: Int, column: Int)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> row &gt;= <span class=\"number\">0</span> &amp;&amp; row &lt; rows &amp;&amp; column &gt;= <span class=\"number\">0</span> &amp;&amp; column &lt; columns</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">subscript</span>(row: <span class=\"type\">Int</span>, column: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Double</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">get</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">assert</span>(indexIsValidForRow(row, column: column), <span class=\"string\">\"Index out of range\"</span>)</div><div class=\"line\">            <span class=\"keyword\">return</span> grid[(row * columns) + column]</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">set</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">assert</span>(indexIsValidForRow(row, column: column), <span class=\"string\">\"Index out of range\"</span>)</div><div class=\"line\">            grid[(row * columns) + column] = newValue</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> matrix = <span class=\"type\">Matrix</span>(rows: <span class=\"number\">2</span>, columns: <span class=\"number\">2</span>)</div><div class=\"line\"><span class=\"built_in\">println</span>(matrix[<span class=\"number\">0</span>, <span class=\"number\">1</span>])</div><div class=\"line\"><span class=\"comment\">//0.0</span></div><div class=\"line\">matrix[<span class=\"number\">0</span>, <span class=\"number\">1</span>] = <span class=\"number\">1.5</span></div><div class=\"line\"><span class=\"built_in\">println</span>(matrix[<span class=\"number\">0</span>, <span class=\"number\">1</span>])</div><div class=\"line\"><span class=\"comment\">//1.5</span></div></pre></td></tr></table></figure></p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>"},{"title":"Swift基础入门(8)：继承，构造，析构和嵌套类型","date":"2015-07-21T09:17:02.000Z","toc":true,"_content":"\n本篇介绍Swift的基础知识：类的继承；枚举，结构体和类的构造过程，析构过程和嵌套类型。\n\n<!--more-->\n**Title: [Swift基础入门(8)：继承，构造，析构和嵌套类型](https://aidaizyy.github.io/swift_8)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-07-24](http://aidaizyy.github.io)**\n\n# 继承\n\n## 基本语法\n子类（_subclass_）继承（_inherit_）继承超类/父类（_superclass_）的属性，方法，下标和其他特性。\n声明子类时，将超类名写在子类名的后面，用冒号分割：\n``` swift\nclass Vehicle {\n    var currentSpeed = 0.0\n    var description: String {\n        return \"traveling at \\(currentSpeed) miles per hour\"\n    }\n    func makeNoise() {\n        // 什么也不做-因为车辆不一定会有噪音\n    }\n}\n\nclass Bicycle: Vehicle {\n    var hasBasket = false\n}\n\nclass Tandem: Bicycle {\n    var currentNumberOfPassengers = 0\n}\n\nlet tandem = Tandem()\ntandem.hasBasket = true\ntandem.currentNumberOfPassengers = 2\ntandem.currentSpeed = 22.0\nprintln(\"Tandem: \\(tandem.description)\")\n// Tandem: traveling at 22.0 miles per hour\n```\n\n## 重写\n重写（_overriding_）指子类把父类的实例方法，类方法，实例属性和下表脚本等提供自己定制的实现。\n在重写定义的前面加上关键字`override`。\n使用`super`前缀可以访问超类的属性，方法和下表脚本。\n\n### 重写方法\n``` swift\nclass Train: Vehicle {\n    override func makeNoise() {\n        println(\"Choo Choo\")\n    }\n}\n\nclass Car: Vehicle {\n    var gear = 1\n    override var description: String {\n        return super.description + \" in gear \\(gear)\"\n    }\n}\n\nlet train = Train()\ntrain.makeNoise()\n// prints \"Choo Choo\"\n```\n\n### 重写属性\n- 超类的只读属性在子类中可以重写为读写属性，但是读写属性不能重写为只读属性。\n- 超类的重写属性在子类中必须完整实现setter和getter，可以用`super.someProperty`返回超类的getter。\n``` swift\nclass Car: Vehicle {\n    var gear = 1\n    override var description: String {\n        return super.description + \" in gear \\(gear)\"\n    }\n}\n\nlet car = Car()\ncar.currentSpeed = 25.0\ncar.gear = 3\nprintln(\"Car: \\(car.description)\")\n// Car: traveling at 25.0 miles per hour in gear 3\n```\n\n### 重写属性观察器\nsetter和属性观察器不能同时存在，setter中可以观察到值的变化。\n``` swift\nclass AutomaticCar: Car {\n    override var currentSpeed: Double {\n        didSet {\n            gear = Int(currentSpeed / 10.0) + 1\n        }\n    }\n}\n\nlet automatic = AutomaticCar()\nautomatic.currentSpeed = 35.0\nprintln(\"AutomaticCar: \\(automatic.description)\")\n// AutomaticCar: traveling at 35.0 miles per hour in gear 4\n```\n\n## 防止重写\n属性，方法和下标前面加上`final`关键字可以防止它们被重写。\n`final var`，`final func`，`final class func`，`final subscript`。\n\n# 构造过程\n构造过程（_Inititalization_）为实例的每个属性设置初始值和为其执行必要的准备和初始化任务。\n\n## 构造器\n### 属性默认值\n属性声明时，可以为其设置默认值。\n``` swift\nstruct Fahrenheit {\n    var temperature = 32.0\n}\n\nvar f = Fahrenheit()\nprintln(\"The default temperature is \\(f.temperature)° Fahrenheit\")\n// 输出 \"The default temperature is 32.0° Fahrenheit”\n```\n构造器，也可以为属性赋初始值，关键字`init`。\n``` swift\nstruct Fahrenheit {\n    var temperature: Double\n    init() {\n        temperature = 32.0\n    }\n}\n\nvar f = Fahrenheit()\nprintln(\"The default temperature is \\(f.temperature)° Fahrenheit\")\n// 输出 \"The default temperature is 32.0° Fahrenheit”\n```\n\n### 构造器参数\n构造器可以传入参数。\n传入参数默认具有和内部参数名一致的外部参数名，相当于默认在参数名前加上了`#`。\n用`_`替代外部参数名，可以取消默认的外部参数名。\n``` swift\nstruct Color {\n    let red, green, blue: Double\n    init(red: Double, g green: Double, _ blue: Double) {\n        self.red   = red\n        self.green = green\n        self.blue  = blue\n    }\n    init(white: Double) {\n        red   = white\n        green = white\n        blue  = white\n    }\n}\n\nlet magenta = Color(red: 1.0, g: 0.0, 1.0)\nlet halfGray = Color(white: 0.5)\n```\n\n### 可选类型属性\n如果属性为可选类型，构造器自动初始化为`nil`。\n\n### 常量属性\n构造器中可以修改常量`let`属性的值，在构造过程中结束后，常量的值不能被修改。\n\n### 默认构造器\n所有属性已提供默认值且没有定义构造器的结构体或基类，具有一个默认的构造器，把默认值赋值给属性作为初始值。\n\n前面讲过，结构体的逐一成员构造器，算是一个默认的构造器。\n``` swift\nstruct Size {\n    var width = 0.0, height = 0.0\n}\nlet twoByTwo = Size(width: 2.0, height: 2.0)\n```\n这里`Size`获得了一个逐一成员构造器`init(width: height: )`。\n\n## 值类型的构造器代理\n构造器可以通过调用其他构造器来完成构造过程，称为构造器代理。\n值类型比较简单，只能调用本身提供的其他构造器，而类可以继承构造器。\n``` swift\nstruct Size {\n    var width = 0.0, height = 0.0\n}\nstruct Point {\n    var x = 0.0, y = 0.0\n}\n\nstruct Rect {\n    var origin = Point()\n    var size = Size()\n    init() {}\n    init(origin: Point, size: Size) {\n        self.origin = origin\n        self.size = size\n    }\n    init(center: Point, size: Size) {\n        let originX = center.x - (size.width / 2)\n        let originY = center.y - (size.height / 2)\n        self.init(origin: Point(x: originX, y: originY), size: size)\n    }\n}\n```\n结构体`Rect`中实现了三个构造器。\n第一个构造器功能和默认构造器类似，把默认值赋值给属性。\n第二个构造器功能和逐一成员构造器类似，逐一把值赋值给属性。\n第三个构造器调用了第二个构造器，完成了部分构造过程。\n\n## 类的构造器代理\n\n### 指定构造器和便利构造器\n类类型的构造器要确保所有存储型属性获得初始值，包括继承来的属性，分为指定构造器和便利构造器。\n- 指定构造器\n主要的类构造器，根据父类链依次往上调用父类的构造器，每个类都必须拥有至少一个指定构造器。\n写法和值类型的构造器一样：\n``` swift\ninit(parameters) {\n    statements\n}\n```\n- 便利构造器\n次要的类构造器，调用同一个类中的指定构造器，也可以创建一个特殊用途或特定输入的实例，只在必要时提供便利构造器。\n写法和值类型的构造器也基本一样，在`init`前加上`convenience`关键字：\n``` swift\nconvenience init(parameters) {\n    statements\n}\n```\n\n+ 指定构造器必须调用其直接父类的指定构造器。\n+ 便利构造器必须调用同一类中定义的其他构器。\n+ 便利构造器必须最终以调用一个指定构造器结束。\n\n也就是说：\n- 指定构造器必须总是向上代理\n- 便利构造器必须总是横向代理\n\n### 构造器继承和重写\n重写（_Override_）指定构造器，在子类中重写实现并调用父类构造器。\n重写便利构造器，必须通过调用同一类提供的其他指定构造器来实现。\n\n子类不会默认继承父类的构造器。\n如果特定条件满足，父类构造器也会被自动继承：\n- 子类的任意新属性都有默认值，且没有定义任何指定构造器，它将自动继承所有父类的指定构造器。\n- 子类提供了所有父类指定构造器的实现，它将自动继承所有父类的便利构造器。\n\n### 构造过程\n构造过程分为两个阶段。\n第一个阶段：\n沿着构造器链先初始化子类的属性，再代理给父类构造器，初始化父类的属性。\n当到达构造器链最顶部时，所有的存储型属性都已经赋值。\n这个阶段不能调用任何实例方法，不能读取任何实例属性的值，不能引用`self`的值。\n\n第二个阶段：\n沿着构造器链沿相反方向，从顶部向下，进一步定制实例，可以为任意属性赋新值。\n这个阶段可以调用实例方法，修改实例属性，并访问`self`。\n\n### 实例\n``` swift\nclass Food {\n    var name: String\n    init(name: String) {\n        self.name = name\n    }\n    convenience init() {\n        self.init(name: \"[Unnamed]\")\n    }\n}\n\nlet namedMeat = Food(name: \"Bacon\")\n// namedMeat 的名字是 \"Bacon”\n\nlet mysteryMeat = Food()\n// mysteryMeat 的名字是 [Unnamed]\n```\n类`Food`提供了一个指定构造器`init(name: String)`和一个便利构造器`init()`。\n第11行：指定构造器，初始化属性`name`，因为`Food`没有父类，所以结束构造过程。\n第14行：便利构造器，调用了同一个类的指定构造器并给参数`name`传入值`[Unnamed]`。\n``` swift\nclass RecipeIngredient: Food {\n    var quantity: Int\n    init(name: String, quantity: Int) {\n        self.quantity = quantity\n        super.init(name: name)\n    }\n    override convenience init(name: String) {\n        self.init(name: name, quantity: 1)\n    }\n}\n\nlet sixEggs = RecipeIngredient(name: \"Eggs\", quantity: 6)\nlet oneBacon = RecipeIngredient(name: \"Bacon\")\nlet oneMysteryItem = RecipeIngredient()\n```\n类`RecipeIngredient`继承类`Food`，提供了一个指定构造器`init(name: String, quantity: Int)`和一个便利构造器`init(name: String)。\n第12行：指定构造器，先初始化子类的属性`quantity`，再代理给父类`Food`的`init(name: String)`。\n第13行：便利构造器，调用了同一个类的指定构造器并给参数`name`和`quantity`传入了值。\n因为`init(name: String)`和父类的`init(name: String)`使用了相同的参数，所以在前面使用`override`标识。\n第14行：父类的`init()`被子类继承了，但是它其中调用的`init(name: String)`替换成子类`RecipeIngredient`重写过后的便利构造器。\n``` swift\nclass ShoppingListItem: RecipeIngredient {\n    var purchased = false\n    var description: String {\n    var output = \"\\(quantity) x \\(name.lowercaseString)\"\n        output += purchased ? \" ✔\" : \" ✘\"\n        return output\n    }\n}\n\nvar breakfastList = [\n    ShoppingListItem(),\n    ShoppingListItem(name: \"Bacon\"),\n    ShoppingListItem(name: \"Eggs\", quantity: 6),\n]\nbreakfastList[0].name = \"Orange juice\"\nbreakfastList[0].purchased = true\nfor item in breakfastList {\n    println(item.description)\n}\n// 1 x orange juice ✔\n// 1 x bacon ✘\n// 6 x eggs ✘\n```\n类`ShoppingListItem`继承类`RecipeIngredient`。\n因为子类的新属性`purchased`有默认值，而且自己没有定义任何构造器，所以继承了父类的所有指定构造器。\n这时就满足上面提到继承父类构造器的第二个条件：子类提供了所有父类指定构造器的实现。\n所以子类也继承了父类的所有便利构造器。\n类`shoppingListItem`就继承了`init()`，`init(name: String)`和`init(name: String, quantity: Int)`三种构造器。\n\n## 可失败构造器\n构造过程中可能因为传入无效参数值，缺少资源，不满足必要条件等原因构造失败的构造器，称为可失败构造器。\n\n### 基本语法\n可失败构造器在`init`关键字后面加上`?`，即`init?`。\n并在失败的情况下加上`return nil`使构造器返回`nil`，非可失败构造器中不能使用`return`返回值。\n可失败构造器的参数名和参数类型不能与其他非可失败构造器完全相同。\n``` swift\nstruct Animal {\n    let species: String\n    init?(species: String) {\n        if species.isEmpty { return nil }\n        self.species = species\n    }\n}\n\nlet someCreature = Animal(species: \"Giraffe\")\n// someCreature 的类型是 Animal? 而不是 Animal\n\nif let giraffe = someCreature {\n    println(\"An animal was initialized with a species of \\(giraffe.species)\")\n}\n// 打印 \"An animal was initialized with a species of Giraffe\"\n\nlet anonymousCreature = Animal(species: \"\")\n// anonymousCreature 的类型是 Animal?, 而不是 Animal\n\nif anonymousCreature == nil {\n    println(\"The anonymous creature could not be initialized\")\n}\n// 打印 \"The anonymous creature could not be initialized\"\n```\n\n### 枚举类型的可失败构造器\n``` swift\nenum TemperatureUnit {\n    case Kelvin, Celsius, Fahrenheit\n    init?(symbol: Character) {\n        switch symbol {\n        case \"K\":\n            self = .Kelvin\n        case \"C\":\n            self = .Celsius\n        case \"F\":\n            self = .Fahrenheit\n        default:\n            return nil\n        }\n    }\n}\n\nlet fahrenheitUnit = TemperatureUnit(symbol: \"F\")\nif fahrenheitUnit != nil {\n    println(\"This is a defined temperature unit, so initialization succeeded.\")\n}\n// 打印 \"This is a defined temperature unit, so initialization succeeded.\"\n\nlet unknownUnit = TemperatureUnit(symbol: \"X\")\nif unknownUnit == nil {\n    println(\"This is not a defined temperature unit, so initialization failed.\")\n}\n// 打印 \"This is not a defined temperature unit, so initialization failed.\"\n```\n当参数值不能与任意一枚举成员相匹配时，该枚举类型的构建过程失败。\n\n带原始值的枚举类型会自带一个可失败构造器`init?(rawValue: )`，`rawValue`是一个默认参数，和枚举类型的原始值类型一致。\n如果该参数的值能和枚举类型成员所带的原始值匹配，则构建器构造一个带此原始值的枚举成员，否则构造失败。\n上面的例子可以重写为：\n``` swift\nenum TemperatureUnit: Character {\n    case Kelvin = \"K\", Celsius = \"C\", Fahrenheit = \"F\"\n}\n\nlet fahrenheitUnit = TemperatureUnit(rawValue: \"F\")\nif fahrenheitUnit != nil {\n    println(\"This is a defined temperature unit, so initialization succeeded.\")\n}\n// prints \"This is a defined temperature unit, so initialization succeeded.\"\n\nlet unknownUnit = TemperatureUnit(rawValue: \"X\")\nif unknownUnit == nil {\n    println(\"This is not a defined temperature unit, so initialization failed.\")\n}\n// prints \"This is not a defined temperature unit, so initialization failed.\"\n```\n\n### 类的可失败构造器\n类的可失败构造器只能在所有类属性被初始化和所有类之间的构造代理之间的代理调用发生完后触发失败行为。\n而值类型的可失败构造器可以随时随地触发。\n``` swift\nclass Product {\n    let name: String!\n    init?(name: String) {\n        self.name = name\n        if name.isEmpty { return nil }\n    }\n}\n\nif let bowTie = Product(name: \"bow tie\") {\n    // 不需要检查 bowTie.name == nil\n    println(\"The product's name is \\(bowTie.name)\")\n}\n// 打印 \"The product's name is bow tie\"\n```\n类`Product`的可失败构造器必须建立在`name`被赋值的情况下。\n所以`name`被声明为隐式解析可选类型（`String!`）保证触发失败条件时，`name`一定有值。\n类`Prodcut`构建成功时，`name`一定有一个非`nil`值，可以直接访问`name`。\n\n### 可失败构造器的代理\n可失败构造器的代理规则和构造器基本一致，只是一旦触发构造失败，整个构造过程就会被立即终止。\n可失败构造器可以在同一类中代理调用其他非可失败构造器，这样可以为已有的构造器添加构造失败的条件。\n``` swift\nclass Product {\n    let name: String!\n    init?(name: String) {\n        if name.isEmpty { return nil }\n        self.name = name\n    }\n}\n\nclass CartItem: Product {\n    let quantity: Int!\n    init?(name: String, quantity: Int) {\n        super.init(name: name)\n        if quantity < 1 { return nil }\n        self.quantity = quantity\n    }\n}\n\nif let twoSocks = CartItem(name: \"sock\", quantity: 2) {\n    println(\"Item: \\(twoSocks.name), quantity: \\(twoSocks.quantity)\")\n}\n// 打印 \"Item: sock, quantity: 2\"\n\nif let zeroShirts = CartItem(name: \"shirt\", quantity: 0) {\n    println(\"Item: \\(zeroShirts.name), quantity: \\(zeroShirts.quantity)\")\n} else {\n    println(\"Unable to initialize zero shirts\")\n}\n// 打印 \"Unable to initialize zero shirts\"\n\nif let oneUnnamed = CartItem(name: \"\", quantity: 1) {\n    println(\"Item: \\(oneUnnamed.name), quantity: \\(oneUnnamed.quantity)\")\n} else {\n    println(\"Unable to initialize one unnamed product\")\n}\n// 打印 \"Unable to initialize one unnamed product\"\n```\n第18行：构造成功。\n第23行：`quantiry`的值小于`1`，不满足条件，构造失败。\n第30行：`name`为空，父类`Product`可失败构造器触发构造失败，整个构造过程停止并失败。\n\n### 可失败构造器的重写\n父类的可失败构造器可以被子类的可失败构造器或者非可失败构造器重写。\n但是父类的非可失败构造器不可以被子类的可失败构造器重写。\n如果用非可失败构造器重写可失败构造器时，不再向上代理父类的可失败构造器，非可失败构造器不不会代理调用可失败构造器。\n``` swift\nclass Document {\n    var name: String?\n    // 该构造器构建了一个name属性值为nil的document对象\n    init() {}\n    // 该构造器构建了一个name属性值为非空字符串的document对象\n    init?(name: String) {\n        if name.isEmpty { return nil }\n        self.name = name\n    }\n}\n\nclass AutomaticallyNamedDocument: Document {\n    override init() {\n        super.init()\n        self.name = \"[Untitled]\"\n    }\n    override init(name: String) {\n        super.init()\n        if name.isEmpty {\n            self.name = \"[Untitled]\"\n        } else {\n            self.name = name\n        }\n    }\n}\n```\n\n### 隐私解析可选类型的可失败构造器\n`init!`同`init?`一样都是可失败构造器，该可失败构造器就会构造一个特定类型的隐私解析可选类型的对象。\n`init?`和`init!`可以相互代理调用，相互重写。\n`init`也可以代理调用`init!`，但这会触发一个断言：`init!`是否会触发构造失败。\n\n### 必要构造器\n在类的构造器前添加`required`关键字表示该类的子类都必须实现该构造器。\n子类重写父类的`required`必要构造器时，也要加上`required`关键字，也是必要构造器。\n覆盖基类的必要构造器时，不需要添加`override`关键字。\n``` swift\nclass SomeClass {\n    required init() {\n        // 在这里添加该必要构造器的实现代码\n    }\n}\n\nclass SomeSubclass: SomeClass {\n    required init() {\n        // 在这里添加子类必要构造器的实现代码\n    }\n}\n```\n不一定需要显示的实现父类的必要构造器，只要满足父类的必要构造器需求即可。\n\n## 闭包设置属性默认值\n闭包可以用来为属性提供定制的默认值，返回和属性类型相同类型的默认值。\n在闭包中不能使用其他属性，不能访问其他实例方法，不能使用`self`属性。\n``` swift\nclass SomeClass {\n    let someProperty: SomeType = {\n        // 在这个闭包中给 someProperty 创建一个默认值\n        // someValue 必须和 SomeType 类型相同\n        return someValue\n        }()\n}\n```\n闭包后面接`()`表示闭包立刻执行，否则会把闭包赋值给`someProperty`。\n``` swift\nstruct Checkerboard {\n    let boardColors: [Bool] = {\n        var temporaryBoard = [Bool]()\n        var isBlack = false\n        for i in 1...10 {\n            for j in 1...10 {\n                temporaryBoard.append(isBlack)\n                isBlack = !isBlack\n            }\n            isBlack = !isBlack\n        }\n        return temporaryBoard\n        }()\n    func squareIsBlackAtRow(row: Int, column: Int) -> Bool {\n        return boardColors[(row * 10) + column]\n    }\n}\n\nlet board = Checkerboard()\nprintln(board.squareIsBlackAtRow(0, column: 1))\n// 输出 \"true\"\nprintln(board.squareIsBlackAtRow(9, column: 9))\n// 输出 \"false\"\n```\n这里的闭包把类`Checkerboard`的布尔型数组`boardColors`初始化为`true`和`false`交替的数组，可以用来标识国际象棋的棋盘。\n\n# 析构过程\nSwift会自动释放不再需要的实例以释放资源。如果我们需要进行一些额外的清理，就需要使用析构函数。\n每个类最多只能有一个析构函数。\n析构函数使用关键字`deinit`，不带任何参数，在写法上不带括号：\n``` swift\nclass ClassName {\n    deinit { \n\t//some action\n    }\n}\n```\n析构函数是在实例释放前被自动调用，不允许自己主动调用。\n子类的析构函数先调用，父类的析构函数后调用。子类没有提供析构函数，也会调用父类的析构函数。\n\n# 嵌套类型\n枚举，类和结构体可以想换嵌套，将需要嵌套的类型定义写在被嵌套类型的区域{}内，可以实现多级嵌套。\n\n``` swift\nstruct BlackjackCard {\n    // 嵌套定义枚举型Suit\n    enum Suit: Character {\n       case Spades = \"♠\", Hearts = \"♡\", Diamonds = \"♢\", Clubs = \"♣\"\n    }\n\n    // 嵌套定义枚举型Rank\n    enum Rank: Int {\n       case Two = 2, Three, Four, Five, Six, Seven, Eight, Nine, Ten\n       case Jack, Queen, King, Ace\n       struct Values {\n           let first: Int, second: Int?\n       }\n       var values: Values {\n        switch self {\n        case .Ace:\n            return Values(first: 1, second: 11)\n        case .Jack, .Queen, .King:\n            return Values(first: 10, second: nil)\n        default:\n            return Values(first: self.toRaw(), second: nil)\n            }\n       }\n    }\n\n    // BlackjackCard 的属性和方法\n    let rank: Rank, suit: Suit\n    var description: String {\n    var output = \"suit is \\(suit.toRaw()),\"\n        output += \" value is \\(rank.values.first)\"\n        if let second = rank.values.second {\n            output += \" or \\(second)\"\n        }\n        return output\n    }\n}\n```\n结构体`BlackjackCard`用来存储“二十一点游戏”中的扑克牌，嵌套了枚举类型`Suit`表示花色，嵌套了枚举类型`Rank`表示点数。而且`Rank`中又定义了结构体`Values`准确描述牌的大小：数字牌表示本身数字的大小，`Ace`表示1或者11，`Jack`，`Queen`和`King`表示10。\n结构体有默认的成员构造函数，这里的默认构造函数为：\n``` swift\nlet theAceOfSpades = BlackjackCard(rank: .Ace, suit: .Spades)\nprintln(\"theAceOfSpades: \\(theAceOfSpades.description)\")\n// 打印出 \"theAceOfSpades: suit is ♠, value is 1 or 11\"\n\nlet heartsSymbol = BlackjackCard.Suit.Hearts.toRaw()\n// 红心的符号 为 \"♡\"\n```\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","source":"_posts/swift_8.md","raw":"title: \"Swift基础入门(8)：继承，构造，析构和嵌套类型\"\ndate: 2015-07-21 17:17:02\ntags:\n- swift\ncategories: swift\ntoc: true\n---\n\n本篇介绍Swift的基础知识：类的继承；枚举，结构体和类的构造过程，析构过程和嵌套类型。\n\n<!--more-->\n**Title: [Swift基础入门(8)：继承，构造，析构和嵌套类型](https://aidaizyy.github.io/swift_8)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-07-24](http://aidaizyy.github.io)**\n\n# 继承\n\n## 基本语法\n子类（_subclass_）继承（_inherit_）继承超类/父类（_superclass_）的属性，方法，下标和其他特性。\n声明子类时，将超类名写在子类名的后面，用冒号分割：\n``` swift\nclass Vehicle {\n    var currentSpeed = 0.0\n    var description: String {\n        return \"traveling at \\(currentSpeed) miles per hour\"\n    }\n    func makeNoise() {\n        // 什么也不做-因为车辆不一定会有噪音\n    }\n}\n\nclass Bicycle: Vehicle {\n    var hasBasket = false\n}\n\nclass Tandem: Bicycle {\n    var currentNumberOfPassengers = 0\n}\n\nlet tandem = Tandem()\ntandem.hasBasket = true\ntandem.currentNumberOfPassengers = 2\ntandem.currentSpeed = 22.0\nprintln(\"Tandem: \\(tandem.description)\")\n// Tandem: traveling at 22.0 miles per hour\n```\n\n## 重写\n重写（_overriding_）指子类把父类的实例方法，类方法，实例属性和下表脚本等提供自己定制的实现。\n在重写定义的前面加上关键字`override`。\n使用`super`前缀可以访问超类的属性，方法和下表脚本。\n\n### 重写方法\n``` swift\nclass Train: Vehicle {\n    override func makeNoise() {\n        println(\"Choo Choo\")\n    }\n}\n\nclass Car: Vehicle {\n    var gear = 1\n    override var description: String {\n        return super.description + \" in gear \\(gear)\"\n    }\n}\n\nlet train = Train()\ntrain.makeNoise()\n// prints \"Choo Choo\"\n```\n\n### 重写属性\n- 超类的只读属性在子类中可以重写为读写属性，但是读写属性不能重写为只读属性。\n- 超类的重写属性在子类中必须完整实现setter和getter，可以用`super.someProperty`返回超类的getter。\n``` swift\nclass Car: Vehicle {\n    var gear = 1\n    override var description: String {\n        return super.description + \" in gear \\(gear)\"\n    }\n}\n\nlet car = Car()\ncar.currentSpeed = 25.0\ncar.gear = 3\nprintln(\"Car: \\(car.description)\")\n// Car: traveling at 25.0 miles per hour in gear 3\n```\n\n### 重写属性观察器\nsetter和属性观察器不能同时存在，setter中可以观察到值的变化。\n``` swift\nclass AutomaticCar: Car {\n    override var currentSpeed: Double {\n        didSet {\n            gear = Int(currentSpeed / 10.0) + 1\n        }\n    }\n}\n\nlet automatic = AutomaticCar()\nautomatic.currentSpeed = 35.0\nprintln(\"AutomaticCar: \\(automatic.description)\")\n// AutomaticCar: traveling at 35.0 miles per hour in gear 4\n```\n\n## 防止重写\n属性，方法和下标前面加上`final`关键字可以防止它们被重写。\n`final var`，`final func`，`final class func`，`final subscript`。\n\n# 构造过程\n构造过程（_Inititalization_）为实例的每个属性设置初始值和为其执行必要的准备和初始化任务。\n\n## 构造器\n### 属性默认值\n属性声明时，可以为其设置默认值。\n``` swift\nstruct Fahrenheit {\n    var temperature = 32.0\n}\n\nvar f = Fahrenheit()\nprintln(\"The default temperature is \\(f.temperature)° Fahrenheit\")\n// 输出 \"The default temperature is 32.0° Fahrenheit”\n```\n构造器，也可以为属性赋初始值，关键字`init`。\n``` swift\nstruct Fahrenheit {\n    var temperature: Double\n    init() {\n        temperature = 32.0\n    }\n}\n\nvar f = Fahrenheit()\nprintln(\"The default temperature is \\(f.temperature)° Fahrenheit\")\n// 输出 \"The default temperature is 32.0° Fahrenheit”\n```\n\n### 构造器参数\n构造器可以传入参数。\n传入参数默认具有和内部参数名一致的外部参数名，相当于默认在参数名前加上了`#`。\n用`_`替代外部参数名，可以取消默认的外部参数名。\n``` swift\nstruct Color {\n    let red, green, blue: Double\n    init(red: Double, g green: Double, _ blue: Double) {\n        self.red   = red\n        self.green = green\n        self.blue  = blue\n    }\n    init(white: Double) {\n        red   = white\n        green = white\n        blue  = white\n    }\n}\n\nlet magenta = Color(red: 1.0, g: 0.0, 1.0)\nlet halfGray = Color(white: 0.5)\n```\n\n### 可选类型属性\n如果属性为可选类型，构造器自动初始化为`nil`。\n\n### 常量属性\n构造器中可以修改常量`let`属性的值，在构造过程中结束后，常量的值不能被修改。\n\n### 默认构造器\n所有属性已提供默认值且没有定义构造器的结构体或基类，具有一个默认的构造器，把默认值赋值给属性作为初始值。\n\n前面讲过，结构体的逐一成员构造器，算是一个默认的构造器。\n``` swift\nstruct Size {\n    var width = 0.0, height = 0.0\n}\nlet twoByTwo = Size(width: 2.0, height: 2.0)\n```\n这里`Size`获得了一个逐一成员构造器`init(width: height: )`。\n\n## 值类型的构造器代理\n构造器可以通过调用其他构造器来完成构造过程，称为构造器代理。\n值类型比较简单，只能调用本身提供的其他构造器，而类可以继承构造器。\n``` swift\nstruct Size {\n    var width = 0.0, height = 0.0\n}\nstruct Point {\n    var x = 0.0, y = 0.0\n}\n\nstruct Rect {\n    var origin = Point()\n    var size = Size()\n    init() {}\n    init(origin: Point, size: Size) {\n        self.origin = origin\n        self.size = size\n    }\n    init(center: Point, size: Size) {\n        let originX = center.x - (size.width / 2)\n        let originY = center.y - (size.height / 2)\n        self.init(origin: Point(x: originX, y: originY), size: size)\n    }\n}\n```\n结构体`Rect`中实现了三个构造器。\n第一个构造器功能和默认构造器类似，把默认值赋值给属性。\n第二个构造器功能和逐一成员构造器类似，逐一把值赋值给属性。\n第三个构造器调用了第二个构造器，完成了部分构造过程。\n\n## 类的构造器代理\n\n### 指定构造器和便利构造器\n类类型的构造器要确保所有存储型属性获得初始值，包括继承来的属性，分为指定构造器和便利构造器。\n- 指定构造器\n主要的类构造器，根据父类链依次往上调用父类的构造器，每个类都必须拥有至少一个指定构造器。\n写法和值类型的构造器一样：\n``` swift\ninit(parameters) {\n    statements\n}\n```\n- 便利构造器\n次要的类构造器，调用同一个类中的指定构造器，也可以创建一个特殊用途或特定输入的实例，只在必要时提供便利构造器。\n写法和值类型的构造器也基本一样，在`init`前加上`convenience`关键字：\n``` swift\nconvenience init(parameters) {\n    statements\n}\n```\n\n+ 指定构造器必须调用其直接父类的指定构造器。\n+ 便利构造器必须调用同一类中定义的其他构器。\n+ 便利构造器必须最终以调用一个指定构造器结束。\n\n也就是说：\n- 指定构造器必须总是向上代理\n- 便利构造器必须总是横向代理\n\n### 构造器继承和重写\n重写（_Override_）指定构造器，在子类中重写实现并调用父类构造器。\n重写便利构造器，必须通过调用同一类提供的其他指定构造器来实现。\n\n子类不会默认继承父类的构造器。\n如果特定条件满足，父类构造器也会被自动继承：\n- 子类的任意新属性都有默认值，且没有定义任何指定构造器，它将自动继承所有父类的指定构造器。\n- 子类提供了所有父类指定构造器的实现，它将自动继承所有父类的便利构造器。\n\n### 构造过程\n构造过程分为两个阶段。\n第一个阶段：\n沿着构造器链先初始化子类的属性，再代理给父类构造器，初始化父类的属性。\n当到达构造器链最顶部时，所有的存储型属性都已经赋值。\n这个阶段不能调用任何实例方法，不能读取任何实例属性的值，不能引用`self`的值。\n\n第二个阶段：\n沿着构造器链沿相反方向，从顶部向下，进一步定制实例，可以为任意属性赋新值。\n这个阶段可以调用实例方法，修改实例属性，并访问`self`。\n\n### 实例\n``` swift\nclass Food {\n    var name: String\n    init(name: String) {\n        self.name = name\n    }\n    convenience init() {\n        self.init(name: \"[Unnamed]\")\n    }\n}\n\nlet namedMeat = Food(name: \"Bacon\")\n// namedMeat 的名字是 \"Bacon”\n\nlet mysteryMeat = Food()\n// mysteryMeat 的名字是 [Unnamed]\n```\n类`Food`提供了一个指定构造器`init(name: String)`和一个便利构造器`init()`。\n第11行：指定构造器，初始化属性`name`，因为`Food`没有父类，所以结束构造过程。\n第14行：便利构造器，调用了同一个类的指定构造器并给参数`name`传入值`[Unnamed]`。\n``` swift\nclass RecipeIngredient: Food {\n    var quantity: Int\n    init(name: String, quantity: Int) {\n        self.quantity = quantity\n        super.init(name: name)\n    }\n    override convenience init(name: String) {\n        self.init(name: name, quantity: 1)\n    }\n}\n\nlet sixEggs = RecipeIngredient(name: \"Eggs\", quantity: 6)\nlet oneBacon = RecipeIngredient(name: \"Bacon\")\nlet oneMysteryItem = RecipeIngredient()\n```\n类`RecipeIngredient`继承类`Food`，提供了一个指定构造器`init(name: String, quantity: Int)`和一个便利构造器`init(name: String)。\n第12行：指定构造器，先初始化子类的属性`quantity`，再代理给父类`Food`的`init(name: String)`。\n第13行：便利构造器，调用了同一个类的指定构造器并给参数`name`和`quantity`传入了值。\n因为`init(name: String)`和父类的`init(name: String)`使用了相同的参数，所以在前面使用`override`标识。\n第14行：父类的`init()`被子类继承了，但是它其中调用的`init(name: String)`替换成子类`RecipeIngredient`重写过后的便利构造器。\n``` swift\nclass ShoppingListItem: RecipeIngredient {\n    var purchased = false\n    var description: String {\n    var output = \"\\(quantity) x \\(name.lowercaseString)\"\n        output += purchased ? \" ✔\" : \" ✘\"\n        return output\n    }\n}\n\nvar breakfastList = [\n    ShoppingListItem(),\n    ShoppingListItem(name: \"Bacon\"),\n    ShoppingListItem(name: \"Eggs\", quantity: 6),\n]\nbreakfastList[0].name = \"Orange juice\"\nbreakfastList[0].purchased = true\nfor item in breakfastList {\n    println(item.description)\n}\n// 1 x orange juice ✔\n// 1 x bacon ✘\n// 6 x eggs ✘\n```\n类`ShoppingListItem`继承类`RecipeIngredient`。\n因为子类的新属性`purchased`有默认值，而且自己没有定义任何构造器，所以继承了父类的所有指定构造器。\n这时就满足上面提到继承父类构造器的第二个条件：子类提供了所有父类指定构造器的实现。\n所以子类也继承了父类的所有便利构造器。\n类`shoppingListItem`就继承了`init()`，`init(name: String)`和`init(name: String, quantity: Int)`三种构造器。\n\n## 可失败构造器\n构造过程中可能因为传入无效参数值，缺少资源，不满足必要条件等原因构造失败的构造器，称为可失败构造器。\n\n### 基本语法\n可失败构造器在`init`关键字后面加上`?`，即`init?`。\n并在失败的情况下加上`return nil`使构造器返回`nil`，非可失败构造器中不能使用`return`返回值。\n可失败构造器的参数名和参数类型不能与其他非可失败构造器完全相同。\n``` swift\nstruct Animal {\n    let species: String\n    init?(species: String) {\n        if species.isEmpty { return nil }\n        self.species = species\n    }\n}\n\nlet someCreature = Animal(species: \"Giraffe\")\n// someCreature 的类型是 Animal? 而不是 Animal\n\nif let giraffe = someCreature {\n    println(\"An animal was initialized with a species of \\(giraffe.species)\")\n}\n// 打印 \"An animal was initialized with a species of Giraffe\"\n\nlet anonymousCreature = Animal(species: \"\")\n// anonymousCreature 的类型是 Animal?, 而不是 Animal\n\nif anonymousCreature == nil {\n    println(\"The anonymous creature could not be initialized\")\n}\n// 打印 \"The anonymous creature could not be initialized\"\n```\n\n### 枚举类型的可失败构造器\n``` swift\nenum TemperatureUnit {\n    case Kelvin, Celsius, Fahrenheit\n    init?(symbol: Character) {\n        switch symbol {\n        case \"K\":\n            self = .Kelvin\n        case \"C\":\n            self = .Celsius\n        case \"F\":\n            self = .Fahrenheit\n        default:\n            return nil\n        }\n    }\n}\n\nlet fahrenheitUnit = TemperatureUnit(symbol: \"F\")\nif fahrenheitUnit != nil {\n    println(\"This is a defined temperature unit, so initialization succeeded.\")\n}\n// 打印 \"This is a defined temperature unit, so initialization succeeded.\"\n\nlet unknownUnit = TemperatureUnit(symbol: \"X\")\nif unknownUnit == nil {\n    println(\"This is not a defined temperature unit, so initialization failed.\")\n}\n// 打印 \"This is not a defined temperature unit, so initialization failed.\"\n```\n当参数值不能与任意一枚举成员相匹配时，该枚举类型的构建过程失败。\n\n带原始值的枚举类型会自带一个可失败构造器`init?(rawValue: )`，`rawValue`是一个默认参数，和枚举类型的原始值类型一致。\n如果该参数的值能和枚举类型成员所带的原始值匹配，则构建器构造一个带此原始值的枚举成员，否则构造失败。\n上面的例子可以重写为：\n``` swift\nenum TemperatureUnit: Character {\n    case Kelvin = \"K\", Celsius = \"C\", Fahrenheit = \"F\"\n}\n\nlet fahrenheitUnit = TemperatureUnit(rawValue: \"F\")\nif fahrenheitUnit != nil {\n    println(\"This is a defined temperature unit, so initialization succeeded.\")\n}\n// prints \"This is a defined temperature unit, so initialization succeeded.\"\n\nlet unknownUnit = TemperatureUnit(rawValue: \"X\")\nif unknownUnit == nil {\n    println(\"This is not a defined temperature unit, so initialization failed.\")\n}\n// prints \"This is not a defined temperature unit, so initialization failed.\"\n```\n\n### 类的可失败构造器\n类的可失败构造器只能在所有类属性被初始化和所有类之间的构造代理之间的代理调用发生完后触发失败行为。\n而值类型的可失败构造器可以随时随地触发。\n``` swift\nclass Product {\n    let name: String!\n    init?(name: String) {\n        self.name = name\n        if name.isEmpty { return nil }\n    }\n}\n\nif let bowTie = Product(name: \"bow tie\") {\n    // 不需要检查 bowTie.name == nil\n    println(\"The product's name is \\(bowTie.name)\")\n}\n// 打印 \"The product's name is bow tie\"\n```\n类`Product`的可失败构造器必须建立在`name`被赋值的情况下。\n所以`name`被声明为隐式解析可选类型（`String!`）保证触发失败条件时，`name`一定有值。\n类`Prodcut`构建成功时，`name`一定有一个非`nil`值，可以直接访问`name`。\n\n### 可失败构造器的代理\n可失败构造器的代理规则和构造器基本一致，只是一旦触发构造失败，整个构造过程就会被立即终止。\n可失败构造器可以在同一类中代理调用其他非可失败构造器，这样可以为已有的构造器添加构造失败的条件。\n``` swift\nclass Product {\n    let name: String!\n    init?(name: String) {\n        if name.isEmpty { return nil }\n        self.name = name\n    }\n}\n\nclass CartItem: Product {\n    let quantity: Int!\n    init?(name: String, quantity: Int) {\n        super.init(name: name)\n        if quantity < 1 { return nil }\n        self.quantity = quantity\n    }\n}\n\nif let twoSocks = CartItem(name: \"sock\", quantity: 2) {\n    println(\"Item: \\(twoSocks.name), quantity: \\(twoSocks.quantity)\")\n}\n// 打印 \"Item: sock, quantity: 2\"\n\nif let zeroShirts = CartItem(name: \"shirt\", quantity: 0) {\n    println(\"Item: \\(zeroShirts.name), quantity: \\(zeroShirts.quantity)\")\n} else {\n    println(\"Unable to initialize zero shirts\")\n}\n// 打印 \"Unable to initialize zero shirts\"\n\nif let oneUnnamed = CartItem(name: \"\", quantity: 1) {\n    println(\"Item: \\(oneUnnamed.name), quantity: \\(oneUnnamed.quantity)\")\n} else {\n    println(\"Unable to initialize one unnamed product\")\n}\n// 打印 \"Unable to initialize one unnamed product\"\n```\n第18行：构造成功。\n第23行：`quantiry`的值小于`1`，不满足条件，构造失败。\n第30行：`name`为空，父类`Product`可失败构造器触发构造失败，整个构造过程停止并失败。\n\n### 可失败构造器的重写\n父类的可失败构造器可以被子类的可失败构造器或者非可失败构造器重写。\n但是父类的非可失败构造器不可以被子类的可失败构造器重写。\n如果用非可失败构造器重写可失败构造器时，不再向上代理父类的可失败构造器，非可失败构造器不不会代理调用可失败构造器。\n``` swift\nclass Document {\n    var name: String?\n    // 该构造器构建了一个name属性值为nil的document对象\n    init() {}\n    // 该构造器构建了一个name属性值为非空字符串的document对象\n    init?(name: String) {\n        if name.isEmpty { return nil }\n        self.name = name\n    }\n}\n\nclass AutomaticallyNamedDocument: Document {\n    override init() {\n        super.init()\n        self.name = \"[Untitled]\"\n    }\n    override init(name: String) {\n        super.init()\n        if name.isEmpty {\n            self.name = \"[Untitled]\"\n        } else {\n            self.name = name\n        }\n    }\n}\n```\n\n### 隐私解析可选类型的可失败构造器\n`init!`同`init?`一样都是可失败构造器，该可失败构造器就会构造一个特定类型的隐私解析可选类型的对象。\n`init?`和`init!`可以相互代理调用，相互重写。\n`init`也可以代理调用`init!`，但这会触发一个断言：`init!`是否会触发构造失败。\n\n### 必要构造器\n在类的构造器前添加`required`关键字表示该类的子类都必须实现该构造器。\n子类重写父类的`required`必要构造器时，也要加上`required`关键字，也是必要构造器。\n覆盖基类的必要构造器时，不需要添加`override`关键字。\n``` swift\nclass SomeClass {\n    required init() {\n        // 在这里添加该必要构造器的实现代码\n    }\n}\n\nclass SomeSubclass: SomeClass {\n    required init() {\n        // 在这里添加子类必要构造器的实现代码\n    }\n}\n```\n不一定需要显示的实现父类的必要构造器，只要满足父类的必要构造器需求即可。\n\n## 闭包设置属性默认值\n闭包可以用来为属性提供定制的默认值，返回和属性类型相同类型的默认值。\n在闭包中不能使用其他属性，不能访问其他实例方法，不能使用`self`属性。\n``` swift\nclass SomeClass {\n    let someProperty: SomeType = {\n        // 在这个闭包中给 someProperty 创建一个默认值\n        // someValue 必须和 SomeType 类型相同\n        return someValue\n        }()\n}\n```\n闭包后面接`()`表示闭包立刻执行，否则会把闭包赋值给`someProperty`。\n``` swift\nstruct Checkerboard {\n    let boardColors: [Bool] = {\n        var temporaryBoard = [Bool]()\n        var isBlack = false\n        for i in 1...10 {\n            for j in 1...10 {\n                temporaryBoard.append(isBlack)\n                isBlack = !isBlack\n            }\n            isBlack = !isBlack\n        }\n        return temporaryBoard\n        }()\n    func squareIsBlackAtRow(row: Int, column: Int) -> Bool {\n        return boardColors[(row * 10) + column]\n    }\n}\n\nlet board = Checkerboard()\nprintln(board.squareIsBlackAtRow(0, column: 1))\n// 输出 \"true\"\nprintln(board.squareIsBlackAtRow(9, column: 9))\n// 输出 \"false\"\n```\n这里的闭包把类`Checkerboard`的布尔型数组`boardColors`初始化为`true`和`false`交替的数组，可以用来标识国际象棋的棋盘。\n\n# 析构过程\nSwift会自动释放不再需要的实例以释放资源。如果我们需要进行一些额外的清理，就需要使用析构函数。\n每个类最多只能有一个析构函数。\n析构函数使用关键字`deinit`，不带任何参数，在写法上不带括号：\n``` swift\nclass ClassName {\n    deinit { \n\t//some action\n    }\n}\n```\n析构函数是在实例释放前被自动调用，不允许自己主动调用。\n子类的析构函数先调用，父类的析构函数后调用。子类没有提供析构函数，也会调用父类的析构函数。\n\n# 嵌套类型\n枚举，类和结构体可以想换嵌套，将需要嵌套的类型定义写在被嵌套类型的区域{}内，可以实现多级嵌套。\n\n``` swift\nstruct BlackjackCard {\n    // 嵌套定义枚举型Suit\n    enum Suit: Character {\n       case Spades = \"♠\", Hearts = \"♡\", Diamonds = \"♢\", Clubs = \"♣\"\n    }\n\n    // 嵌套定义枚举型Rank\n    enum Rank: Int {\n       case Two = 2, Three, Four, Five, Six, Seven, Eight, Nine, Ten\n       case Jack, Queen, King, Ace\n       struct Values {\n           let first: Int, second: Int?\n       }\n       var values: Values {\n        switch self {\n        case .Ace:\n            return Values(first: 1, second: 11)\n        case .Jack, .Queen, .King:\n            return Values(first: 10, second: nil)\n        default:\n            return Values(first: self.toRaw(), second: nil)\n            }\n       }\n    }\n\n    // BlackjackCard 的属性和方法\n    let rank: Rank, suit: Suit\n    var description: String {\n    var output = \"suit is \\(suit.toRaw()),\"\n        output += \" value is \\(rank.values.first)\"\n        if let second = rank.values.second {\n            output += \" or \\(second)\"\n        }\n        return output\n    }\n}\n```\n结构体`BlackjackCard`用来存储“二十一点游戏”中的扑克牌，嵌套了枚举类型`Suit`表示花色，嵌套了枚举类型`Rank`表示点数。而且`Rank`中又定义了结构体`Values`准确描述牌的大小：数字牌表示本身数字的大小，`Ace`表示1或者11，`Jack`，`Queen`和`King`表示10。\n结构体有默认的成员构造函数，这里的默认构造函数为：\n``` swift\nlet theAceOfSpades = BlackjackCard(rank: .Ace, suit: .Spades)\nprintln(\"theAceOfSpades: \\(theAceOfSpades.description)\")\n// 打印出 \"theAceOfSpades: suit is ♠, value is 1 or 11\"\n\nlet heartsSymbol = BlackjackCard.Suit.Hearts.toRaw()\n// 红心的符号 为 \"♡\"\n```\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","slug":"swift_8","published":1,"updated":"2017-05-08T16:40:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2gdu6le001kv1o3xspkx3sm","content":"<p>本篇介绍Swift的基础知识：类的继承；枚举，结构体和类的构造过程，析构过程和嵌套类型。</p>\n<a id=\"more\"></a>\n<p><strong>Title: <a href=\"https://aidaizyy.github.io/swift_8\" target=\"_blank\" rel=\"external\">Swift基础入门(8)：继承，构造，析构和嵌套类型</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#x3a;&#97;&#105;&#100;&#97;&#105;&#122;&#x79;&#x79;&#64;&#x67;&#109;&#x61;&#x69;&#108;&#x2e;&#99;&#x6f;&#109;\">&#97;&#105;&#100;&#97;&#105;&#122;&#x79;&#x79;&#64;&#x67;&#109;&#x61;&#x69;&#108;&#x2e;&#99;&#x6f;&#109;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-07-24</a></strong></p>\n<h1 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h1><h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><p>子类（<em>subclass</em>）继承（<em>inherit</em>）继承超类/父类（<em>superclass</em>）的属性，方法，下标和其他特性。<br>声明子类时，将超类名写在子类名的后面，用冒号分割：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vehicle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> currentSpeed = <span class=\"number\">0.0</span></div><div class=\"line\">    <span class=\"keyword\">var</span> description: <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"traveling at \\(currentSpeed) miles per hour\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeNoise</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 什么也不做-因为车辆不一定会有噪音</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bicycle</span>: <span class=\"title\">Vehicle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> hasBasket = <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tandem</span>: <span class=\"title\">Bicycle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> currentNumberOfPassengers = <span class=\"number\">0</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> tandem = <span class=\"type\">Tandem</span>()</div><div class=\"line\">tandem.hasBasket = <span class=\"literal\">true</span></div><div class=\"line\">tandem.currentNumberOfPassengers = <span class=\"number\">2</span></div><div class=\"line\">tandem.currentSpeed = <span class=\"number\">22.0</span></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"Tandem: \\(tandem.description)\"</span>)</div><div class=\"line\"><span class=\"comment\">// Tandem: traveling at 22.0 miles per hour</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"重写\"><a href=\"#重写\" class=\"headerlink\" title=\"重写\"></a>重写</h2><p>重写（<em>overriding</em>）指子类把父类的实例方法，类方法，实例属性和下表脚本等提供自己定制的实现。<br>在重写定义的前面加上关键字<code>override</code>。<br>使用<code>super</code>前缀可以访问超类的属性，方法和下表脚本。</p>\n<h3 id=\"重写方法\"><a href=\"#重写方法\" class=\"headerlink\" title=\"重写方法\"></a>重写方法</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Train</span>: <span class=\"title\">Vehicle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeNoise</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"built_in\">println</span>(<span class=\"string\">\"Choo Choo\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span>: <span class=\"title\">Vehicle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> gear = <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">var</span> description: <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.description + <span class=\"string\">\" in gear \\(gear)\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> train = <span class=\"type\">Train</span>()</div><div class=\"line\">train.makeNoise()</div><div class=\"line\"><span class=\"comment\">// prints \"Choo Choo\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"重写属性\"><a href=\"#重写属性\" class=\"headerlink\" title=\"重写属性\"></a>重写属性</h3><ul>\n<li>超类的只读属性在子类中可以重写为读写属性，但是读写属性不能重写为只读属性。</li>\n<li>超类的重写属性在子类中必须完整实现setter和getter，可以用<code>super.someProperty</code>返回超类的getter。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span>: <span class=\"title\">Vehicle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> gear = <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">var</span> description: <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.description + <span class=\"string\">\" in gear \\(gear)\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> car = <span class=\"type\">Car</span>()</div><div class=\"line\">car.currentSpeed = <span class=\"number\">25.0</span></div><div class=\"line\">car.gear = <span class=\"number\">3</span></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"Car: \\(car.description)\"</span>)</div><div class=\"line\"><span class=\"comment\">// Car: traveling at 25.0 miles per hour in gear 3</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"重写属性观察器\"><a href=\"#重写属性观察器\" class=\"headerlink\" title=\"重写属性观察器\"></a>重写属性观察器</h3><p>setter和属性观察器不能同时存在，setter中可以观察到值的变化。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AutomaticCar</span>: <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">var</span> currentSpeed: <span class=\"type\">Double</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">didSet</span> &#123;</div><div class=\"line\">            gear = <span class=\"type\">Int</span>(currentSpeed / <span class=\"number\">10.0</span>) + <span class=\"number\">1</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> automatic = <span class=\"type\">AutomaticCar</span>()</div><div class=\"line\">automatic.currentSpeed = <span class=\"number\">35.0</span></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"AutomaticCar: \\(automatic.description)\"</span>)</div><div class=\"line\"><span class=\"comment\">// AutomaticCar: traveling at 35.0 miles per hour in gear 4</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"防止重写\"><a href=\"#防止重写\" class=\"headerlink\" title=\"防止重写\"></a>防止重写</h2><p>属性，方法和下标前面加上<code>final</code>关键字可以防止它们被重写。<br><code>final var</code>，<code>final func</code>，<code>final class func</code>，<code>final subscript</code>。</p>\n<h1 id=\"构造过程\"><a href=\"#构造过程\" class=\"headerlink\" title=\"构造过程\"></a>构造过程</h1><p>构造过程（<em>Inititalization</em>）为实例的每个属性设置初始值和为其执行必要的准备和初始化任务。</p>\n<h2 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h2><h3 id=\"属性默认值\"><a href=\"#属性默认值\" class=\"headerlink\" title=\"属性默认值\"></a>属性默认值</h3><p>属性声明时，可以为其设置默认值。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Fahrenheit</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> temperature = <span class=\"number\">32.0</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"type\">Fahrenheit</span>()</div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"The default temperature is \\(f.temperature)° Fahrenheit\"</span>)</div><div class=\"line\"><span class=\"comment\">// 输出 \"The default temperature is 32.0° Fahrenheit”</span></div></pre></td></tr></table></figure></p>\n<p>构造器，也可以为属性赋初始值，关键字<code>init</code>。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Fahrenheit</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> temperature: <span class=\"type\">Double</span></div><div class=\"line\">    <span class=\"keyword\">init</span>() &#123;</div><div class=\"line\">        temperature = <span class=\"number\">32.0</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"type\">Fahrenheit</span>()</div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"The default temperature is \\(f.temperature)° Fahrenheit\"</span>)</div><div class=\"line\"><span class=\"comment\">// 输出 \"The default temperature is 32.0° Fahrenheit”</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"构造器参数\"><a href=\"#构造器参数\" class=\"headerlink\" title=\"构造器参数\"></a>构造器参数</h3><p>构造器可以传入参数。<br>传入参数默认具有和内部参数名一致的外部参数名，相当于默认在参数名前加上了<code>#</code>。<br>用<code>_</code>替代外部参数名，可以取消默认的外部参数名。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Color</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> red, green, blue: <span class=\"type\">Double</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(red: <span class=\"type\">Double</span>, g green: <span class=\"type\">Double</span>, <span class=\"number\">_</span> blue: <span class=\"type\">Double</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.red   = red</div><div class=\"line\">        <span class=\"keyword\">self</span>.green = green</div><div class=\"line\">        <span class=\"keyword\">self</span>.blue  = blue</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">init</span>(white: <span class=\"type\">Double</span>) &#123;</div><div class=\"line\">        red   = white</div><div class=\"line\">        green = white</div><div class=\"line\">        blue  = white</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> magenta = <span class=\"type\">Color</span>(red: <span class=\"number\">1.0</span>, g: <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> halfGray = <span class=\"type\">Color</span>(white: <span class=\"number\">0.5</span>)</div></pre></td></tr></table></figure></p>\n<h3 id=\"可选类型属性\"><a href=\"#可选类型属性\" class=\"headerlink\" title=\"可选类型属性\"></a>可选类型属性</h3><p>如果属性为可选类型，构造器自动初始化为<code>nil</code>。</p>\n<h3 id=\"常量属性\"><a href=\"#常量属性\" class=\"headerlink\" title=\"常量属性\"></a>常量属性</h3><p>构造器中可以修改常量<code>let</code>属性的值，在构造过程中结束后，常量的值不能被修改。</p>\n<h3 id=\"默认构造器\"><a href=\"#默认构造器\" class=\"headerlink\" title=\"默认构造器\"></a>默认构造器</h3><p>所有属性已提供默认值且没有定义构造器的结构体或基类，具有一个默认的构造器，把默认值赋值给属性作为初始值。</p>\n<p>前面讲过，结构体的逐一成员构造器，算是一个默认的构造器。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Size</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> width = <span class=\"number\">0.0</span>, height = <span class=\"number\">0.0</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> twoByTwo = <span class=\"type\">Size</span>(width: <span class=\"number\">2.0</span>, height: <span class=\"number\">2.0</span>)</div></pre></td></tr></table></figure></p>\n<p>这里<code>Size</code>获得了一个逐一成员构造器<code>init(width: height: )</code>。</p>\n<h2 id=\"值类型的构造器代理\"><a href=\"#值类型的构造器代理\" class=\"headerlink\" title=\"值类型的构造器代理\"></a>值类型的构造器代理</h2><p>构造器可以通过调用其他构造器来完成构造过程，称为构造器代理。<br>值类型比较简单，只能调用本身提供的其他构造器，而类可以继承构造器。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Size</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> width = <span class=\"number\">0.0</span>, height = <span class=\"number\">0.0</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">0.0</span>, y = <span class=\"number\">0.0</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Rect</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> origin = <span class=\"type\">Point</span>()</div><div class=\"line\">    <span class=\"keyword\">var</span> size = <span class=\"type\">Size</span>()</div><div class=\"line\">    <span class=\"keyword\">init</span>() &#123;&#125;</div><div class=\"line\">    <span class=\"keyword\">init</span>(origin: <span class=\"type\">Point</span>, size: <span class=\"type\">Size</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.origin = origin</div><div class=\"line\">        <span class=\"keyword\">self</span>.size = size</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">init</span>(center: <span class=\"type\">Point</span>, size: <span class=\"type\">Size</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> originX = center.x - (size.width / <span class=\"number\">2</span>)</div><div class=\"line\">        <span class=\"keyword\">let</span> originY = center.y - (size.height / <span class=\"number\">2</span>)</div><div class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(origin: <span class=\"type\">Point</span>(x: originX, y: originY), size: size)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>结构体<code>Rect</code>中实现了三个构造器。<br>第一个构造器功能和默认构造器类似，把默认值赋值给属性。<br>第二个构造器功能和逐一成员构造器类似，逐一把值赋值给属性。<br>第三个构造器调用了第二个构造器，完成了部分构造过程。</p>\n<h2 id=\"类的构造器代理\"><a href=\"#类的构造器代理\" class=\"headerlink\" title=\"类的构造器代理\"></a>类的构造器代理</h2><h3 id=\"指定构造器和便利构造器\"><a href=\"#指定构造器和便利构造器\" class=\"headerlink\" title=\"指定构造器和便利构造器\"></a>指定构造器和便利构造器</h3><p>类类型的构造器要确保所有存储型属性获得初始值，包括继承来的属性，分为指定构造器和便利构造器。</p>\n<ul>\n<li><p>指定构造器<br>主要的类构造器，根据父类链依次往上调用父类的构造器，每个类都必须拥有至少一个指定构造器。<br>写法和值类型的构造器一样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">init</span>(parameters) &#123;</div><div class=\"line\">    statements</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>便利构造器<br>次要的类构造器，调用同一个类中的指定构造器，也可以创建一个特殊用途或特定输入的实例，只在必要时提供便利构造器。<br>写法和值类型的构造器也基本一样，在<code>init</code>前加上<code>convenience</code>关键字：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">convenience</span> <span class=\"keyword\">init</span>(parameters) &#123;</div><div class=\"line\">    statements</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>指定构造器必须调用其直接父类的指定构造器。</li>\n<li>便利构造器必须调用同一类中定义的其他构器。</li>\n<li>便利构造器必须最终以调用一个指定构造器结束。</li>\n</ul>\n<p>也就是说：</p>\n<ul>\n<li>指定构造器必须总是向上代理</li>\n<li>便利构造器必须总是横向代理</li>\n</ul>\n<h3 id=\"构造器继承和重写\"><a href=\"#构造器继承和重写\" class=\"headerlink\" title=\"构造器继承和重写\"></a>构造器继承和重写</h3><p>重写（<em>Override</em>）指定构造器，在子类中重写实现并调用父类构造器。<br>重写便利构造器，必须通过调用同一类提供的其他指定构造器来实现。</p>\n<p>子类不会默认继承父类的构造器。<br>如果特定条件满足，父类构造器也会被自动继承：</p>\n<ul>\n<li>子类的任意新属性都有默认值，且没有定义任何指定构造器，它将自动继承所有父类的指定构造器。</li>\n<li>子类提供了所有父类指定构造器的实现，它将自动继承所有父类的便利构造器。</li>\n</ul>\n<h3 id=\"构造过程-1\"><a href=\"#构造过程-1\" class=\"headerlink\" title=\"构造过程\"></a>构造过程</h3><p>构造过程分为两个阶段。<br>第一个阶段：<br>沿着构造器链先初始化子类的属性，再代理给父类构造器，初始化父类的属性。<br>当到达构造器链最顶部时，所有的存储型属性都已经赋值。<br>这个阶段不能调用任何实例方法，不能读取任何实例属性的值，不能引用<code>self</code>的值。</p>\n<p>第二个阶段：<br>沿着构造器链沿相反方向，从顶部向下，进一步定制实例，可以为任意属性赋新值。<br>这个阶段可以调用实例方法，修改实例属性，并访问<code>self</code>。</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Food</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">convenience</span> <span class=\"keyword\">init</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(name: <span class=\"string\">\"[Unnamed]\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> namedMeat = <span class=\"type\">Food</span>(name: <span class=\"string\">\"Bacon\"</span>)</div><div class=\"line\"><span class=\"comment\">// namedMeat 的名字是 \"Bacon”</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> mysteryMeat = <span class=\"type\">Food</span>()</div><div class=\"line\"><span class=\"comment\">// mysteryMeat 的名字是 [Unnamed]</span></div></pre></td></tr></table></figure>\n<p>类<code>Food</code>提供了一个指定构造器<code>init(name: String)</code>和一个便利构造器<code>init()</code>。<br>第11行：指定构造器，初始化属性<code>name</code>，因为<code>Food</code>没有父类，所以结束构造过程。<br>第14行：便利构造器，调用了同一个类的指定构造器并给参数<code>name</code>传入值<code>[Unnamed]</code>。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecipeIngredient</span>: <span class=\"title\">Food</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> quantity: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>, quantity: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.quantity = quantity</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(name: name)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">convenience</span> <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(name: name, quantity: <span class=\"number\">1</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> sixEggs = <span class=\"type\">RecipeIngredient</span>(name: <span class=\"string\">\"Eggs\"</span>, quantity: <span class=\"number\">6</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> oneBacon = <span class=\"type\">RecipeIngredient</span>(name: <span class=\"string\">\"Bacon\"</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> oneMysteryItem = <span class=\"type\">RecipeIngredient</span>()</div></pre></td></tr></table></figure></p>\n<p>类<code>RecipeIngredient</code>继承类<code>Food</code>，提供了一个指定构造器<code>init(name: String, quantity: Int)</code>和一个便利构造器<code>init(name: String)。\n第12行：指定构造器，先初始化子类的属性</code>quantity<code>，再代理给父类</code>Food<code>的</code>init(name: String)<code>。\n第13行：便利构造器，调用了同一个类的指定构造器并给参数</code>name<code>和</code>quantity<code>传入了值。\n因为</code>init(name: String)<code>和父类的</code>init(name: String)<code>使用了相同的参数，所以在前面使用</code>override<code>标识。\n第14行：父类的</code>init()<code>被子类继承了，但是它其中调用的</code>init(name: String)<code>替换成子类</code>RecipeIngredient`重写过后的便利构造器。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShoppingListItem</span>: <span class=\"title\">RecipeIngredient</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> purchased = <span class=\"literal\">false</span></div><div class=\"line\">    <span class=\"keyword\">var</span> description: <span class=\"type\">String</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> output = <span class=\"string\">\"\\(quantity) x \\(name.lowercaseString)\"</span></div><div class=\"line\">        output += purchased ? <span class=\"string\">\" ✔\"</span> : <span class=\"string\">\" ✘\"</span></div><div class=\"line\">        <span class=\"keyword\">return</span> output</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> breakfastList = [</div><div class=\"line\">    <span class=\"type\">ShoppingListItem</span>(),</div><div class=\"line\">    <span class=\"type\">ShoppingListItem</span>(name: <span class=\"string\">\"Bacon\"</span>),</div><div class=\"line\">    <span class=\"type\">ShoppingListItem</span>(name: <span class=\"string\">\"Eggs\"</span>, quantity: <span class=\"number\">6</span>),</div><div class=\"line\">]</div><div class=\"line\">breakfastList[<span class=\"number\">0</span>].name = <span class=\"string\">\"Orange juice\"</span></div><div class=\"line\">breakfastList[<span class=\"number\">0</span>].purchased = <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> breakfastList &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(item.description)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 1 x orange juice ✔</span></div><div class=\"line\"><span class=\"comment\">// 1 x bacon ✘</span></div><div class=\"line\"><span class=\"comment\">// 6 x eggs ✘</span></div></pre></td></tr></table></figure></p>\n<p>类<code>ShoppingListItem</code>继承类<code>RecipeIngredient</code>。<br>因为子类的新属性<code>purchased</code>有默认值，而且自己没有定义任何构造器，所以继承了父类的所有指定构造器。<br>这时就满足上面提到继承父类构造器的第二个条件：子类提供了所有父类指定构造器的实现。<br>所以子类也继承了父类的所有便利构造器。<br>类<code>shoppingListItem</code>就继承了<code>init()</code>，<code>init(name: String)</code>和<code>init(name: String, quantity: Int)</code>三种构造器。</p>\n<h2 id=\"可失败构造器\"><a href=\"#可失败构造器\" class=\"headerlink\" title=\"可失败构造器\"></a>可失败构造器</h2><p>构造过程中可能因为传入无效参数值，缺少资源，不满足必要条件等原因构造失败的构造器，称为可失败构造器。</p>\n<h3 id=\"基本语法-1\"><a href=\"#基本语法-1\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><p>可失败构造器在<code>init</code>关键字后面加上<code>?</code>，即<code>init?</code>。<br>并在失败的情况下加上<code>return nil</code>使构造器返回<code>nil</code>，非可失败构造器中不能使用<code>return</code>返回值。<br>可失败构造器的参数名和参数类型不能与其他非可失败构造器完全相同。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Animal</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> species: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>?(species: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> species.isEmpty &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</div><div class=\"line\">        <span class=\"keyword\">self</span>.species = species</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> someCreature = <span class=\"type\">Animal</span>(species: <span class=\"string\">\"Giraffe\"</span>)</div><div class=\"line\"><span class=\"comment\">// someCreature 的类型是 Animal? 而不是 Animal</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> giraffe = someCreature &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"An animal was initialized with a species of \\(giraffe.species)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"An animal was initialized with a species of Giraffe\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> anonymousCreature = <span class=\"type\">Animal</span>(species: <span class=\"string\">\"\"</span>)</div><div class=\"line\"><span class=\"comment\">// anonymousCreature 的类型是 Animal?, 而不是 Animal</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> anonymousCreature == <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"The anonymous creature could not be initialized\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"The anonymous creature could not be initialized\"</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"枚举类型的可失败构造器\"><a href=\"#枚举类型的可失败构造器\" class=\"headerlink\" title=\"枚举类型的可失败构造器\"></a>枚举类型的可失败构造器</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">TemperatureUnit</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Kelvin</span>, <span class=\"type\">Celsius</span>, <span class=\"type\">Fahrenheit</span></div><div class=\"line\">    <span class=\"keyword\">init</span>?(symbol: <span class=\"type\">Character</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> symbol &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"K\"</span>:</div><div class=\"line\">            <span class=\"keyword\">self</span> = .<span class=\"type\">Kelvin</span></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"C\"</span>:</div><div class=\"line\">            <span class=\"keyword\">self</span> = .<span class=\"type\">Celsius</span></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"F\"</span>:</div><div class=\"line\">            <span class=\"keyword\">self</span> = .<span class=\"type\">Fahrenheit</span></div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> fahrenheitUnit = <span class=\"type\">TemperatureUnit</span>(symbol: <span class=\"string\">\"F\"</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> fahrenheitUnit != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"This is a defined temperature unit, so initialization succeeded.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"This is a defined temperature unit, so initialization succeeded.\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> unknownUnit = <span class=\"type\">TemperatureUnit</span>(symbol: <span class=\"string\">\"X\"</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> unknownUnit == <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"This is not a defined temperature unit, so initialization failed.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"This is not a defined temperature unit, so initialization failed.\"</span></div></pre></td></tr></table></figure>\n<p>当参数值不能与任意一枚举成员相匹配时，该枚举类型的构建过程失败。</p>\n<p>带原始值的枚举类型会自带一个可失败构造器<code>init?(rawValue: )</code>，<code>rawValue</code>是一个默认参数，和枚举类型的原始值类型一致。<br>如果该参数的值能和枚举类型成员所带的原始值匹配，则构建器构造一个带此原始值的枚举成员，否则构造失败。<br>上面的例子可以重写为：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">TemperatureUnit</span>: <span class=\"title\">Character</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Kelvin</span> = <span class=\"string\">\"K\"</span>, <span class=\"type\">Celsius</span> = <span class=\"string\">\"C\"</span>, <span class=\"type\">Fahrenheit</span> = <span class=\"string\">\"F\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> fahrenheitUnit = <span class=\"type\">TemperatureUnit</span>(rawValue: <span class=\"string\">\"F\"</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> fahrenheitUnit != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"This is a defined temperature unit, so initialization succeeded.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// prints \"This is a defined temperature unit, so initialization succeeded.\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> unknownUnit = <span class=\"type\">TemperatureUnit</span>(rawValue: <span class=\"string\">\"X\"</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> unknownUnit == <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"This is not a defined temperature unit, so initialization failed.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// prints \"This is not a defined temperature unit, so initialization failed.\"</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"类的可失败构造器\"><a href=\"#类的可失败构造器\" class=\"headerlink\" title=\"类的可失败构造器\"></a>类的可失败构造器</h3><p>类的可失败构造器只能在所有类属性被初始化和所有类之间的构造代理之间的代理调用发生完后触发失败行为。<br>而值类型的可失败构造器可以随时随地触发。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span>!</div><div class=\"line\">    <span class=\"keyword\">init</span>?(name: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">        <span class=\"keyword\">if</span> name.isEmpty &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> bowTie = <span class=\"type\">Product</span>(name: <span class=\"string\">\"bow tie\"</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 不需要检查 bowTie.name == nil</span></div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"The product's name is \\(bowTie.name)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"The product's name is bow tie\"</span></div></pre></td></tr></table></figure></p>\n<p>类<code>Product</code>的可失败构造器必须建立在<code>name</code>被赋值的情况下。<br>所以<code>name</code>被声明为隐式解析可选类型（<code>String!</code>）保证触发失败条件时，<code>name</code>一定有值。<br>类<code>Prodcut</code>构建成功时，<code>name</code>一定有一个非<code>nil</code>值，可以直接访问<code>name</code>。</p>\n<h3 id=\"可失败构造器的代理\"><a href=\"#可失败构造器的代理\" class=\"headerlink\" title=\"可失败构造器的代理\"></a>可失败构造器的代理</h3><p>可失败构造器的代理规则和构造器基本一致，只是一旦触发构造失败，整个构造过程就会被立即终止。<br>可失败构造器可以在同一类中代理调用其他非可失败构造器，这样可以为已有的构造器添加构造失败的条件。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span>!</div><div class=\"line\">    <span class=\"keyword\">init</span>?(name: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> name.isEmpty &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CartItem</span>: <span class=\"title\">Product</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> quantity: <span class=\"type\">Int</span>!</div><div class=\"line\">    <span class=\"keyword\">init</span>?(name: <span class=\"type\">String</span>, quantity: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(name: name)</div><div class=\"line\">        <span class=\"keyword\">if</span> quantity &lt; <span class=\"number\">1</span> &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</div><div class=\"line\">        <span class=\"keyword\">self</span>.quantity = quantity</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> twoSocks = <span class=\"type\">CartItem</span>(name: <span class=\"string\">\"sock\"</span>, quantity: <span class=\"number\">2</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Item: \\(twoSocks.name), quantity: \\(twoSocks.quantity)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"Item: sock, quantity: 2\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> zeroShirts = <span class=\"type\">CartItem</span>(name: <span class=\"string\">\"shirt\"</span>, quantity: <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Item: \\(zeroShirts.name), quantity: \\(zeroShirts.quantity)\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Unable to initialize zero shirts\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"Unable to initialize zero shirts\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> oneUnnamed = <span class=\"type\">CartItem</span>(name: <span class=\"string\">\"\"</span>, quantity: <span class=\"number\">1</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Item: \\(oneUnnamed.name), quantity: \\(oneUnnamed.quantity)\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Unable to initialize one unnamed product\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"Unable to initialize one unnamed product\"</span></div></pre></td></tr></table></figure></p>\n<p>第18行：构造成功。<br>第23行：<code>quantiry</code>的值小于<code>1</code>，不满足条件，构造失败。<br>第30行：<code>name</code>为空，父类<code>Product</code>可失败构造器触发构造失败，整个构造过程停止并失败。</p>\n<h3 id=\"可失败构造器的重写\"><a href=\"#可失败构造器的重写\" class=\"headerlink\" title=\"可失败构造器的重写\"></a>可失败构造器的重写</h3><p>父类的可失败构造器可以被子类的可失败构造器或者非可失败构造器重写。<br>但是父类的非可失败构造器不可以被子类的可失败构造器重写。<br>如果用非可失败构造器重写可失败构造器时，不再向上代理父类的可失败构造器，非可失败构造器不不会代理调用可失败构造器。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Document</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span>?</div><div class=\"line\">    <span class=\"comment\">// 该构造器构建了一个name属性值为nil的document对象</span></div><div class=\"line\">    <span class=\"keyword\">init</span>() &#123;&#125;</div><div class=\"line\">    <span class=\"comment\">// 该构造器构建了一个name属性值为非空字符串的document对象</span></div><div class=\"line\">    <span class=\"keyword\">init</span>?(name: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> name.isEmpty &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AutomaticallyNamedDocument</span>: <span class=\"title\">Document</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">init</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>()</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = <span class=\"string\">\"[Untitled]\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>()</div><div class=\"line\">        <span class=\"keyword\">if</span> name.isEmpty &#123;</div><div class=\"line\">            <span class=\"keyword\">self</span>.name = <span class=\"string\">\"[Untitled]\"</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"隐私解析可选类型的可失败构造器\"><a href=\"#隐私解析可选类型的可失败构造器\" class=\"headerlink\" title=\"隐私解析可选类型的可失败构造器\"></a>隐私解析可选类型的可失败构造器</h3><p><code>init!</code>同<code>init?</code>一样都是可失败构造器，该可失败构造器就会构造一个特定类型的隐私解析可选类型的对象。<br><code>init?</code>和<code>init!</code>可以相互代理调用，相互重写。<br><code>init</code>也可以代理调用<code>init!</code>，但这会触发一个断言：<code>init!</code>是否会触发构造失败。</p>\n<h3 id=\"必要构造器\"><a href=\"#必要构造器\" class=\"headerlink\" title=\"必要构造器\"></a>必要构造器</h3><p>在类的构造器前添加<code>required</code>关键字表示该类的子类都必须实现该构造器。<br>子类重写父类的<code>required</code>必要构造器时，也要加上<code>required</code>关键字，也是必要构造器。<br>覆盖基类的必要构造器时，不需要添加<code>override</code>关键字。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">init</span>() &#123;</div><div class=\"line\">        <span class=\"comment\">// 在这里添加该必要构造器的实现代码</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeSubclass</span>: <span class=\"title\">SomeClass</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">init</span>() &#123;</div><div class=\"line\">        <span class=\"comment\">// 在这里添加子类必要构造器的实现代码</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>不一定需要显示的实现父类的必要构造器，只要满足父类的必要构造器需求即可。</p>\n<h2 id=\"闭包设置属性默认值\"><a href=\"#闭包设置属性默认值\" class=\"headerlink\" title=\"闭包设置属性默认值\"></a>闭包设置属性默认值</h2><p>闭包可以用来为属性提供定制的默认值，返回和属性类型相同类型的默认值。<br>在闭包中不能使用其他属性，不能访问其他实例方法，不能使用<code>self</code>属性。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> someProperty: <span class=\"type\">SomeType</span> = &#123;</div><div class=\"line\">        <span class=\"comment\">// 在这个闭包中给 someProperty 创建一个默认值</span></div><div class=\"line\">        <span class=\"comment\">// someValue 必须和 SomeType 类型相同</span></div><div class=\"line\">        <span class=\"keyword\">return</span> someValue</div><div class=\"line\">        &#125;()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>闭包后面接<code>()</code>表示闭包立刻执行，否则会把闭包赋值给<code>someProperty</code>。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Checkerboard</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> boardColors: [<span class=\"type\">Bool</span>] = &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> temporaryBoard = [<span class=\"type\">Bool</span>]()</div><div class=\"line\">        <span class=\"keyword\">var</span> isBlack = <span class=\"literal\">false</span></div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">1</span>...<span class=\"number\">10</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"number\">1</span>...<span class=\"number\">10</span> &#123;</div><div class=\"line\">                temporaryBoard.append(isBlack)</div><div class=\"line\">                isBlack = !isBlack</div><div class=\"line\">            &#125;</div><div class=\"line\">            isBlack = !isBlack</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> temporaryBoard</div><div class=\"line\">        &#125;()</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">squareIsBlackAtRow</span><span class=\"params\">(row: Int, column: Int)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> boardColors[(row * <span class=\"number\">10</span>) + column]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> board = <span class=\"type\">Checkerboard</span>()</div><div class=\"line\"><span class=\"built_in\">println</span>(board.squareIsBlackAtRow(<span class=\"number\">0</span>, column: <span class=\"number\">1</span>))</div><div class=\"line\"><span class=\"comment\">// 输出 \"true\"</span></div><div class=\"line\"><span class=\"built_in\">println</span>(board.squareIsBlackAtRow(<span class=\"number\">9</span>, column: <span class=\"number\">9</span>))</div><div class=\"line\"><span class=\"comment\">// 输出 \"false\"</span></div></pre></td></tr></table></figure></p>\n<p>这里的闭包把类<code>Checkerboard</code>的布尔型数组<code>boardColors</code>初始化为<code>true</code>和<code>false</code>交替的数组，可以用来标识国际象棋的棋盘。</p>\n<h1 id=\"析构过程\"><a href=\"#析构过程\" class=\"headerlink\" title=\"析构过程\"></a>析构过程</h1><p>Swift会自动释放不再需要的实例以释放资源。如果我们需要进行一些额外的清理，就需要使用析构函数。<br>每个类最多只能有一个析构函数。<br>析构函数使用关键字<code>deinit</code>，不带任何参数，在写法上不带括号：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassName</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123; </div><div class=\"line\">\t<span class=\"comment\">//some action</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>析构函数是在实例释放前被自动调用，不允许自己主动调用。<br>子类的析构函数先调用，父类的析构函数后调用。子类没有提供析构函数，也会调用父类的析构函数。</p>\n<h1 id=\"嵌套类型\"><a href=\"#嵌套类型\" class=\"headerlink\" title=\"嵌套类型\"></a>嵌套类型</h1><p>枚举，类和结构体可以想换嵌套，将需要嵌套的类型定义写在被嵌套类型的区域{}内，可以实现多级嵌套。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BlackjackCard</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 嵌套定义枚举型Suit</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Suit</span>: <span class=\"title\">Character</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">case</span> <span class=\"type\">Spades</span> = <span class=\"string\">\"♠\"</span>, <span class=\"type\">Hearts</span> = <span class=\"string\">\"♡\"</span>, <span class=\"type\">Diamonds</span> = <span class=\"string\">\"♢\"</span>, <span class=\"type\">Clubs</span> = <span class=\"string\">\"♣\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 嵌套定义枚举型Rank</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Rank</span>: <span class=\"title\">Int</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">case</span> <span class=\"type\">Two</span> = <span class=\"number\">2</span>, <span class=\"type\">Three</span>, <span class=\"type\">Four</span>, <span class=\"type\">Five</span>, <span class=\"type\">Six</span>, <span class=\"type\">Seven</span>, <span class=\"type\">Eight</span>, <span class=\"type\">Nine</span>, <span class=\"type\">Ten</span></div><div class=\"line\">       <span class=\"keyword\">case</span> <span class=\"type\">Jack</span>, <span class=\"type\">Queen</span>, <span class=\"type\">King</span>, <span class=\"type\">Ace</span></div><div class=\"line\">       <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Values</span> </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">let</span> first: <span class=\"type\">Int</span>, second: <span class=\"type\">Int</span>?</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">var</span> values: <span class=\"type\">Values</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> .<span class=\"type\">Ace</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">Values</span>(first: <span class=\"number\">1</span>, second: <span class=\"number\">11</span>)</div><div class=\"line\">        <span class=\"keyword\">case</span> .<span class=\"type\">Jack</span>, .<span class=\"type\">Queen</span>, .<span class=\"type\">King</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">Values</span>(first: <span class=\"number\">10</span>, second: <span class=\"literal\">nil</span>)</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">Values</span>(first: <span class=\"keyword\">self</span>.toRaw(), second: <span class=\"literal\">nil</span>)</div><div class=\"line\">            &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// BlackjackCard 的属性和方法</span></div><div class=\"line\">    <span class=\"keyword\">let</span> rank: <span class=\"type\">Rank</span>, suit: <span class=\"type\">Suit</span></div><div class=\"line\">    <span class=\"keyword\">var</span> description: <span class=\"type\">String</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> output = <span class=\"string\">\"suit is \\(suit.toRaw()),\"</span></div><div class=\"line\">        output += <span class=\"string\">\" value is \\(rank.values.first)\"</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> second = rank.values.second &#123;</div><div class=\"line\">            output += <span class=\"string\">\" or \\(second)\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> output</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>结构体<code>BlackjackCard</code>用来存储“二十一点游戏”中的扑克牌，嵌套了枚举类型<code>Suit</code>表示花色，嵌套了枚举类型<code>Rank</code>表示点数。而且<code>Rank</code>中又定义了结构体<code>Values</code>准确描述牌的大小：数字牌表示本身数字的大小，<code>Ace</code>表示1或者11，<code>Jack</code>，<code>Queen</code>和<code>King</code>表示10。<br>结构体有默认的成员构造函数，这里的默认构造函数为：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> theAceOfSpades = <span class=\"type\">BlackjackCard</span>(rank: .<span class=\"type\">Ace</span>, suit: .<span class=\"type\">Spades</span>)</div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"theAceOfSpades: \\(theAceOfSpades.description)\"</span>)</div><div class=\"line\"><span class=\"comment\">// 打印出 \"theAceOfSpades: suit is ♠, value is 1 or 11\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> heartsSymbol = <span class=\"type\">BlackjackCard</span>.<span class=\"type\">Suit</span>.<span class=\"type\">Hearts</span>.toRaw()</div><div class=\"line\"><span class=\"comment\">// 红心的符号 为 \"♡\"</span></div></pre></td></tr></table></figure></p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>本篇介绍Swift的基础知识：类的继承；枚举，结构体和类的构造过程，析构过程和嵌套类型。</p>","more":"<p><strong>Title: <a href=\"https://aidaizyy.github.io/swift_8\" target=\"_blank\" rel=\"external\">Swift基础入门(8)：继承，构造，析构和嵌套类型</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#109;&#x61;&#x69;&#108;&#116;&#x6f;&#x3a;&#97;&#105;&#100;&#97;&#105;&#122;&#x79;&#x79;&#64;&#x67;&#109;&#x61;&#x69;&#108;&#x2e;&#99;&#x6f;&#109;\">&#97;&#105;&#100;&#97;&#105;&#122;&#x79;&#x79;&#64;&#x67;&#109;&#x61;&#x69;&#108;&#x2e;&#99;&#x6f;&#109;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-07-24</a></strong></p>\n<h1 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h1><h2 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h2><p>子类（<em>subclass</em>）继承（<em>inherit</em>）继承超类/父类（<em>superclass</em>）的属性，方法，下标和其他特性。<br>声明子类时，将超类名写在子类名的后面，用冒号分割：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vehicle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> currentSpeed = <span class=\"number\">0.0</span></div><div class=\"line\">    <span class=\"keyword\">var</span> description: <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"traveling at \\(currentSpeed) miles per hour\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeNoise</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"comment\">// 什么也不做-因为车辆不一定会有噪音</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Bicycle</span>: <span class=\"title\">Vehicle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> hasBasket = <span class=\"literal\">false</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Tandem</span>: <span class=\"title\">Bicycle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> currentNumberOfPassengers = <span class=\"number\">0</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> tandem = <span class=\"type\">Tandem</span>()</div><div class=\"line\">tandem.hasBasket = <span class=\"literal\">true</span></div><div class=\"line\">tandem.currentNumberOfPassengers = <span class=\"number\">2</span></div><div class=\"line\">tandem.currentSpeed = <span class=\"number\">22.0</span></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"Tandem: \\(tandem.description)\"</span>)</div><div class=\"line\"><span class=\"comment\">// Tandem: traveling at 22.0 miles per hour</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"重写\"><a href=\"#重写\" class=\"headerlink\" title=\"重写\"></a>重写</h2><p>重写（<em>overriding</em>）指子类把父类的实例方法，类方法，实例属性和下表脚本等提供自己定制的实现。<br>在重写定义的前面加上关键字<code>override</code>。<br>使用<code>super</code>前缀可以访问超类的属性，方法和下表脚本。</p>\n<h3 id=\"重写方法\"><a href=\"#重写方法\" class=\"headerlink\" title=\"重写方法\"></a>重写方法</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Train</span>: <span class=\"title\">Vehicle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">makeNoise</span><span class=\"params\">()</span></span> &#123;</div><div class=\"line\">        <span class=\"built_in\">println</span>(<span class=\"string\">\"Choo Choo\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span>: <span class=\"title\">Vehicle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> gear = <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">var</span> description: <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.description + <span class=\"string\">\" in gear \\(gear)\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> train = <span class=\"type\">Train</span>()</div><div class=\"line\">train.makeNoise()</div><div class=\"line\"><span class=\"comment\">// prints \"Choo Choo\"</span></div></pre></td></tr></table></figure>\n<h3 id=\"重写属性\"><a href=\"#重写属性\" class=\"headerlink\" title=\"重写属性\"></a>重写属性</h3><ul>\n<li>超类的只读属性在子类中可以重写为读写属性，但是读写属性不能重写为只读属性。</li>\n<li>超类的重写属性在子类中必须完整实现setter和getter，可以用<code>super.someProperty</code>返回超类的getter。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span>: <span class=\"title\">Vehicle</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> gear = <span class=\"number\">1</span></div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">var</span> description: <span class=\"type\">String</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.description + <span class=\"string\">\" in gear \\(gear)\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> car = <span class=\"type\">Car</span>()</div><div class=\"line\">car.currentSpeed = <span class=\"number\">25.0</span></div><div class=\"line\">car.gear = <span class=\"number\">3</span></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"Car: \\(car.description)\"</span>)</div><div class=\"line\"><span class=\"comment\">// Car: traveling at 25.0 miles per hour in gear 3</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"重写属性观察器\"><a href=\"#重写属性观察器\" class=\"headerlink\" title=\"重写属性观察器\"></a>重写属性观察器</h3><p>setter和属性观察器不能同时存在，setter中可以观察到值的变化。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AutomaticCar</span>: <span class=\"title\">Car</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">var</span> currentSpeed: <span class=\"type\">Double</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">didSet</span> &#123;</div><div class=\"line\">            gear = <span class=\"type\">Int</span>(currentSpeed / <span class=\"number\">10.0</span>) + <span class=\"number\">1</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> automatic = <span class=\"type\">AutomaticCar</span>()</div><div class=\"line\">automatic.currentSpeed = <span class=\"number\">35.0</span></div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"AutomaticCar: \\(automatic.description)\"</span>)</div><div class=\"line\"><span class=\"comment\">// AutomaticCar: traveling at 35.0 miles per hour in gear 4</span></div></pre></td></tr></table></figure></p>\n<h2 id=\"防止重写\"><a href=\"#防止重写\" class=\"headerlink\" title=\"防止重写\"></a>防止重写</h2><p>属性，方法和下标前面加上<code>final</code>关键字可以防止它们被重写。<br><code>final var</code>，<code>final func</code>，<code>final class func</code>，<code>final subscript</code>。</p>\n<h1 id=\"构造过程\"><a href=\"#构造过程\" class=\"headerlink\" title=\"构造过程\"></a>构造过程</h1><p>构造过程（<em>Inititalization</em>）为实例的每个属性设置初始值和为其执行必要的准备和初始化任务。</p>\n<h2 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h2><h3 id=\"属性默认值\"><a href=\"#属性默认值\" class=\"headerlink\" title=\"属性默认值\"></a>属性默认值</h3><p>属性声明时，可以为其设置默认值。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Fahrenheit</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> temperature = <span class=\"number\">32.0</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"type\">Fahrenheit</span>()</div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"The default temperature is \\(f.temperature)° Fahrenheit\"</span>)</div><div class=\"line\"><span class=\"comment\">// 输出 \"The default temperature is 32.0° Fahrenheit”</span></div></pre></td></tr></table></figure></p>\n<p>构造器，也可以为属性赋初始值，关键字<code>init</code>。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Fahrenheit</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> temperature: <span class=\"type\">Double</span></div><div class=\"line\">    <span class=\"keyword\">init</span>() &#123;</div><div class=\"line\">        temperature = <span class=\"number\">32.0</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"type\">Fahrenheit</span>()</div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"The default temperature is \\(f.temperature)° Fahrenheit\"</span>)</div><div class=\"line\"><span class=\"comment\">// 输出 \"The default temperature is 32.0° Fahrenheit”</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"构造器参数\"><a href=\"#构造器参数\" class=\"headerlink\" title=\"构造器参数\"></a>构造器参数</h3><p>构造器可以传入参数。<br>传入参数默认具有和内部参数名一致的外部参数名，相当于默认在参数名前加上了<code>#</code>。<br>用<code>_</code>替代外部参数名，可以取消默认的外部参数名。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Color</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> red, green, blue: <span class=\"type\">Double</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(red: <span class=\"type\">Double</span>, g green: <span class=\"type\">Double</span>, <span class=\"number\">_</span> blue: <span class=\"type\">Double</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.red   = red</div><div class=\"line\">        <span class=\"keyword\">self</span>.green = green</div><div class=\"line\">        <span class=\"keyword\">self</span>.blue  = blue</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">init</span>(white: <span class=\"type\">Double</span>) &#123;</div><div class=\"line\">        red   = white</div><div class=\"line\">        green = white</div><div class=\"line\">        blue  = white</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> magenta = <span class=\"type\">Color</span>(red: <span class=\"number\">1.0</span>, g: <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> halfGray = <span class=\"type\">Color</span>(white: <span class=\"number\">0.5</span>)</div></pre></td></tr></table></figure></p>\n<h3 id=\"可选类型属性\"><a href=\"#可选类型属性\" class=\"headerlink\" title=\"可选类型属性\"></a>可选类型属性</h3><p>如果属性为可选类型，构造器自动初始化为<code>nil</code>。</p>\n<h3 id=\"常量属性\"><a href=\"#常量属性\" class=\"headerlink\" title=\"常量属性\"></a>常量属性</h3><p>构造器中可以修改常量<code>let</code>属性的值，在构造过程中结束后，常量的值不能被修改。</p>\n<h3 id=\"默认构造器\"><a href=\"#默认构造器\" class=\"headerlink\" title=\"默认构造器\"></a>默认构造器</h3><p>所有属性已提供默认值且没有定义构造器的结构体或基类，具有一个默认的构造器，把默认值赋值给属性作为初始值。</p>\n<p>前面讲过，结构体的逐一成员构造器，算是一个默认的构造器。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Size</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> width = <span class=\"number\">0.0</span>, height = <span class=\"number\">0.0</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">let</span> twoByTwo = <span class=\"type\">Size</span>(width: <span class=\"number\">2.0</span>, height: <span class=\"number\">2.0</span>)</div></pre></td></tr></table></figure></p>\n<p>这里<code>Size</code>获得了一个逐一成员构造器<code>init(width: height: )</code>。</p>\n<h2 id=\"值类型的构造器代理\"><a href=\"#值类型的构造器代理\" class=\"headerlink\" title=\"值类型的构造器代理\"></a>值类型的构造器代理</h2><p>构造器可以通过调用其他构造器来完成构造过程，称为构造器代理。<br>值类型比较简单，只能调用本身提供的其他构造器，而类可以继承构造器。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Size</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> width = <span class=\"number\">0.0</span>, height = <span class=\"number\">0.0</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Point</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"number\">0.0</span>, y = <span class=\"number\">0.0</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Rect</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> origin = <span class=\"type\">Point</span>()</div><div class=\"line\">    <span class=\"keyword\">var</span> size = <span class=\"type\">Size</span>()</div><div class=\"line\">    <span class=\"keyword\">init</span>() &#123;&#125;</div><div class=\"line\">    <span class=\"keyword\">init</span>(origin: <span class=\"type\">Point</span>, size: <span class=\"type\">Size</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.origin = origin</div><div class=\"line\">        <span class=\"keyword\">self</span>.size = size</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">init</span>(center: <span class=\"type\">Point</span>, size: <span class=\"type\">Size</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">let</span> originX = center.x - (size.width / <span class=\"number\">2</span>)</div><div class=\"line\">        <span class=\"keyword\">let</span> originY = center.y - (size.height / <span class=\"number\">2</span>)</div><div class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(origin: <span class=\"type\">Point</span>(x: originX, y: originY), size: size)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>结构体<code>Rect</code>中实现了三个构造器。<br>第一个构造器功能和默认构造器类似，把默认值赋值给属性。<br>第二个构造器功能和逐一成员构造器类似，逐一把值赋值给属性。<br>第三个构造器调用了第二个构造器，完成了部分构造过程。</p>\n<h2 id=\"类的构造器代理\"><a href=\"#类的构造器代理\" class=\"headerlink\" title=\"类的构造器代理\"></a>类的构造器代理</h2><h3 id=\"指定构造器和便利构造器\"><a href=\"#指定构造器和便利构造器\" class=\"headerlink\" title=\"指定构造器和便利构造器\"></a>指定构造器和便利构造器</h3><p>类类型的构造器要确保所有存储型属性获得初始值，包括继承来的属性，分为指定构造器和便利构造器。</p>\n<ul>\n<li><p>指定构造器<br>主要的类构造器，根据父类链依次往上调用父类的构造器，每个类都必须拥有至少一个指定构造器。<br>写法和值类型的构造器一样：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">init</span>(parameters) &#123;</div><div class=\"line\">    statements</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>便利构造器<br>次要的类构造器，调用同一个类中的指定构造器，也可以创建一个特殊用途或特定输入的实例，只在必要时提供便利构造器。<br>写法和值类型的构造器也基本一样，在<code>init</code>前加上<code>convenience</code>关键字：</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">convenience</span> <span class=\"keyword\">init</span>(parameters) &#123;</div><div class=\"line\">    statements</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>指定构造器必须调用其直接父类的指定构造器。</li>\n<li>便利构造器必须调用同一类中定义的其他构器。</li>\n<li>便利构造器必须最终以调用一个指定构造器结束。</li>\n</ul>\n<p>也就是说：</p>\n<ul>\n<li>指定构造器必须总是向上代理</li>\n<li>便利构造器必须总是横向代理</li>\n</ul>\n<h3 id=\"构造器继承和重写\"><a href=\"#构造器继承和重写\" class=\"headerlink\" title=\"构造器继承和重写\"></a>构造器继承和重写</h3><p>重写（<em>Override</em>）指定构造器，在子类中重写实现并调用父类构造器。<br>重写便利构造器，必须通过调用同一类提供的其他指定构造器来实现。</p>\n<p>子类不会默认继承父类的构造器。<br>如果特定条件满足，父类构造器也会被自动继承：</p>\n<ul>\n<li>子类的任意新属性都有默认值，且没有定义任何指定构造器，它将自动继承所有父类的指定构造器。</li>\n<li>子类提供了所有父类指定构造器的实现，它将自动继承所有父类的便利构造器。</li>\n</ul>\n<h3 id=\"构造过程-1\"><a href=\"#构造过程-1\" class=\"headerlink\" title=\"构造过程\"></a>构造过程</h3><p>构造过程分为两个阶段。<br>第一个阶段：<br>沿着构造器链先初始化子类的属性，再代理给父类构造器，初始化父类的属性。<br>当到达构造器链最顶部时，所有的存储型属性都已经赋值。<br>这个阶段不能调用任何实例方法，不能读取任何实例属性的值，不能引用<code>self</code>的值。</p>\n<p>第二个阶段：<br>沿着构造器链沿相反方向，从顶部向下，进一步定制实例，可以为任意属性赋新值。<br>这个阶段可以调用实例方法，修改实例属性，并访问<code>self</code>。</p>\n<h3 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Food</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">convenience</span> <span class=\"keyword\">init</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(name: <span class=\"string\">\"[Unnamed]\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> namedMeat = <span class=\"type\">Food</span>(name: <span class=\"string\">\"Bacon\"</span>)</div><div class=\"line\"><span class=\"comment\">// namedMeat 的名字是 \"Bacon”</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> mysteryMeat = <span class=\"type\">Food</span>()</div><div class=\"line\"><span class=\"comment\">// mysteryMeat 的名字是 [Unnamed]</span></div></pre></td></tr></table></figure>\n<p>类<code>Food</code>提供了一个指定构造器<code>init(name: String)</code>和一个便利构造器<code>init()</code>。<br>第11行：指定构造器，初始化属性<code>name</code>，因为<code>Food</code>没有父类，所以结束构造过程。<br>第14行：便利构造器，调用了同一个类的指定构造器并给参数<code>name</code>传入值<code>[Unnamed]</code>。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RecipeIngredient</span>: <span class=\"title\">Food</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> quantity: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>, quantity: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.quantity = quantity</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(name: name)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">convenience</span> <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.<span class=\"keyword\">init</span>(name: name, quantity: <span class=\"number\">1</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> sixEggs = <span class=\"type\">RecipeIngredient</span>(name: <span class=\"string\">\"Eggs\"</span>, quantity: <span class=\"number\">6</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> oneBacon = <span class=\"type\">RecipeIngredient</span>(name: <span class=\"string\">\"Bacon\"</span>)</div><div class=\"line\"><span class=\"keyword\">let</span> oneMysteryItem = <span class=\"type\">RecipeIngredient</span>()</div></pre></td></tr></table></figure></p>\n<p>类<code>RecipeIngredient</code>继承类<code>Food</code>，提供了一个指定构造器<code>init(name: String, quantity: Int)</code>和一个便利构造器<code>init(name: String)。\n第12行：指定构造器，先初始化子类的属性</code>quantity<code>，再代理给父类</code>Food<code>的</code>init(name: String)<code>。\n第13行：便利构造器，调用了同一个类的指定构造器并给参数</code>name<code>和</code>quantity<code>传入了值。\n因为</code>init(name: String)<code>和父类的</code>init(name: String)<code>使用了相同的参数，所以在前面使用</code>override<code>标识。\n第14行：父类的</code>init()<code>被子类继承了，但是它其中调用的</code>init(name: String)<code>替换成子类</code>RecipeIngredient`重写过后的便利构造器。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ShoppingListItem</span>: <span class=\"title\">RecipeIngredient</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> purchased = <span class=\"literal\">false</span></div><div class=\"line\">    <span class=\"keyword\">var</span> description: <span class=\"type\">String</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> output = <span class=\"string\">\"\\(quantity) x \\(name.lowercaseString)\"</span></div><div class=\"line\">        output += purchased ? <span class=\"string\">\" ✔\"</span> : <span class=\"string\">\" ✘\"</span></div><div class=\"line\">        <span class=\"keyword\">return</span> output</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> breakfastList = [</div><div class=\"line\">    <span class=\"type\">ShoppingListItem</span>(),</div><div class=\"line\">    <span class=\"type\">ShoppingListItem</span>(name: <span class=\"string\">\"Bacon\"</span>),</div><div class=\"line\">    <span class=\"type\">ShoppingListItem</span>(name: <span class=\"string\">\"Eggs\"</span>, quantity: <span class=\"number\">6</span>),</div><div class=\"line\">]</div><div class=\"line\">breakfastList[<span class=\"number\">0</span>].name = <span class=\"string\">\"Orange juice\"</span></div><div class=\"line\">breakfastList[<span class=\"number\">0</span>].purchased = <span class=\"literal\">true</span></div><div class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> breakfastList &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(item.description)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 1 x orange juice ✔</span></div><div class=\"line\"><span class=\"comment\">// 1 x bacon ✘</span></div><div class=\"line\"><span class=\"comment\">// 6 x eggs ✘</span></div></pre></td></tr></table></figure></p>\n<p>类<code>ShoppingListItem</code>继承类<code>RecipeIngredient</code>。<br>因为子类的新属性<code>purchased</code>有默认值，而且自己没有定义任何构造器，所以继承了父类的所有指定构造器。<br>这时就满足上面提到继承父类构造器的第二个条件：子类提供了所有父类指定构造器的实现。<br>所以子类也继承了父类的所有便利构造器。<br>类<code>shoppingListItem</code>就继承了<code>init()</code>，<code>init(name: String)</code>和<code>init(name: String, quantity: Int)</code>三种构造器。</p>\n<h2 id=\"可失败构造器\"><a href=\"#可失败构造器\" class=\"headerlink\" title=\"可失败构造器\"></a>可失败构造器</h2><p>构造过程中可能因为传入无效参数值，缺少资源，不满足必要条件等原因构造失败的构造器，称为可失败构造器。</p>\n<h3 id=\"基本语法-1\"><a href=\"#基本语法-1\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h3><p>可失败构造器在<code>init</code>关键字后面加上<code>?</code>，即<code>init?</code>。<br>并在失败的情况下加上<code>return nil</code>使构造器返回<code>nil</code>，非可失败构造器中不能使用<code>return</code>返回值。<br>可失败构造器的参数名和参数类型不能与其他非可失败构造器完全相同。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Animal</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> species: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>?(species: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> species.isEmpty &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</div><div class=\"line\">        <span class=\"keyword\">self</span>.species = species</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> someCreature = <span class=\"type\">Animal</span>(species: <span class=\"string\">\"Giraffe\"</span>)</div><div class=\"line\"><span class=\"comment\">// someCreature 的类型是 Animal? 而不是 Animal</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> giraffe = someCreature &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"An animal was initialized with a species of \\(giraffe.species)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"An animal was initialized with a species of Giraffe\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> anonymousCreature = <span class=\"type\">Animal</span>(species: <span class=\"string\">\"\"</span>)</div><div class=\"line\"><span class=\"comment\">// anonymousCreature 的类型是 Animal?, 而不是 Animal</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> anonymousCreature == <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"The anonymous creature could not be initialized\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"The anonymous creature could not be initialized\"</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"枚举类型的可失败构造器\"><a href=\"#枚举类型的可失败构造器\" class=\"headerlink\" title=\"枚举类型的可失败构造器\"></a>枚举类型的可失败构造器</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">TemperatureUnit</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Kelvin</span>, <span class=\"type\">Celsius</span>, <span class=\"type\">Fahrenheit</span></div><div class=\"line\">    <span class=\"keyword\">init</span>?(symbol: <span class=\"type\">Character</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> symbol &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"K\"</span>:</div><div class=\"line\">            <span class=\"keyword\">self</span> = .<span class=\"type\">Kelvin</span></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"C\"</span>:</div><div class=\"line\">            <span class=\"keyword\">self</span> = .<span class=\"type\">Celsius</span></div><div class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">\"F\"</span>:</div><div class=\"line\">            <span class=\"keyword\">self</span> = .<span class=\"type\">Fahrenheit</span></div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> fahrenheitUnit = <span class=\"type\">TemperatureUnit</span>(symbol: <span class=\"string\">\"F\"</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> fahrenheitUnit != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"This is a defined temperature unit, so initialization succeeded.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"This is a defined temperature unit, so initialization succeeded.\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> unknownUnit = <span class=\"type\">TemperatureUnit</span>(symbol: <span class=\"string\">\"X\"</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> unknownUnit == <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"This is not a defined temperature unit, so initialization failed.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"This is not a defined temperature unit, so initialization failed.\"</span></div></pre></td></tr></table></figure>\n<p>当参数值不能与任意一枚举成员相匹配时，该枚举类型的构建过程失败。</p>\n<p>带原始值的枚举类型会自带一个可失败构造器<code>init?(rawValue: )</code>，<code>rawValue</code>是一个默认参数，和枚举类型的原始值类型一致。<br>如果该参数的值能和枚举类型成员所带的原始值匹配，则构建器构造一个带此原始值的枚举成员，否则构造失败。<br>上面的例子可以重写为：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">TemperatureUnit</span>: <span class=\"title\">Character</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">case</span> <span class=\"type\">Kelvin</span> = <span class=\"string\">\"K\"</span>, <span class=\"type\">Celsius</span> = <span class=\"string\">\"C\"</span>, <span class=\"type\">Fahrenheit</span> = <span class=\"string\">\"F\"</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> fahrenheitUnit = <span class=\"type\">TemperatureUnit</span>(rawValue: <span class=\"string\">\"F\"</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> fahrenheitUnit != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"This is a defined temperature unit, so initialization succeeded.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// prints \"This is a defined temperature unit, so initialization succeeded.\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> unknownUnit = <span class=\"type\">TemperatureUnit</span>(rawValue: <span class=\"string\">\"X\"</span>)</div><div class=\"line\"><span class=\"keyword\">if</span> unknownUnit == <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"This is not a defined temperature unit, so initialization failed.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// prints \"This is not a defined temperature unit, so initialization failed.\"</span></div></pre></td></tr></table></figure></p>\n<h3 id=\"类的可失败构造器\"><a href=\"#类的可失败构造器\" class=\"headerlink\" title=\"类的可失败构造器\"></a>类的可失败构造器</h3><p>类的可失败构造器只能在所有类属性被初始化和所有类之间的构造代理之间的代理调用发生完后触发失败行为。<br>而值类型的可失败构造器可以随时随地触发。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span>!</div><div class=\"line\">    <span class=\"keyword\">init</span>?(name: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">        <span class=\"keyword\">if</span> name.isEmpty &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> bowTie = <span class=\"type\">Product</span>(name: <span class=\"string\">\"bow tie\"</span>) &#123;</div><div class=\"line\">    <span class=\"comment\">// 不需要检查 bowTie.name == nil</span></div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"The product's name is \\(bowTie.name)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"The product's name is bow tie\"</span></div></pre></td></tr></table></figure></p>\n<p>类<code>Product</code>的可失败构造器必须建立在<code>name</code>被赋值的情况下。<br>所以<code>name</code>被声明为隐式解析可选类型（<code>String!</code>）保证触发失败条件时，<code>name</code>一定有值。<br>类<code>Prodcut</code>构建成功时，<code>name</code>一定有一个非<code>nil</code>值，可以直接访问<code>name</code>。</p>\n<h3 id=\"可失败构造器的代理\"><a href=\"#可失败构造器的代理\" class=\"headerlink\" title=\"可失败构造器的代理\"></a>可失败构造器的代理</h3><p>可失败构造器的代理规则和构造器基本一致，只是一旦触发构造失败，整个构造过程就会被立即终止。<br>可失败构造器可以在同一类中代理调用其他非可失败构造器，这样可以为已有的构造器添加构造失败的条件。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Product</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span>!</div><div class=\"line\">    <span class=\"keyword\">init</span>?(name: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> name.isEmpty &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CartItem</span>: <span class=\"title\">Product</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> quantity: <span class=\"type\">Int</span>!</div><div class=\"line\">    <span class=\"keyword\">init</span>?(name: <span class=\"type\">String</span>, quantity: <span class=\"type\">Int</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>(name: name)</div><div class=\"line\">        <span class=\"keyword\">if</span> quantity &lt; <span class=\"number\">1</span> &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</div><div class=\"line\">        <span class=\"keyword\">self</span>.quantity = quantity</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> twoSocks = <span class=\"type\">CartItem</span>(name: <span class=\"string\">\"sock\"</span>, quantity: <span class=\"number\">2</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Item: \\(twoSocks.name), quantity: \\(twoSocks.quantity)\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"Item: sock, quantity: 2\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> zeroShirts = <span class=\"type\">CartItem</span>(name: <span class=\"string\">\"shirt\"</span>, quantity: <span class=\"number\">0</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Item: \\(zeroShirts.name), quantity: \\(zeroShirts.quantity)\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Unable to initialize zero shirts\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"Unable to initialize zero shirts\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> oneUnnamed = <span class=\"type\">CartItem</span>(name: <span class=\"string\">\"\"</span>, quantity: <span class=\"number\">1</span>) &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Item: \\(oneUnnamed.name), quantity: \\(oneUnnamed.quantity)\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Unable to initialize one unnamed product\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"Unable to initialize one unnamed product\"</span></div></pre></td></tr></table></figure></p>\n<p>第18行：构造成功。<br>第23行：<code>quantiry</code>的值小于<code>1</code>，不满足条件，构造失败。<br>第30行：<code>name</code>为空，父类<code>Product</code>可失败构造器触发构造失败，整个构造过程停止并失败。</p>\n<h3 id=\"可失败构造器的重写\"><a href=\"#可失败构造器的重写\" class=\"headerlink\" title=\"可失败构造器的重写\"></a>可失败构造器的重写</h3><p>父类的可失败构造器可以被子类的可失败构造器或者非可失败构造器重写。<br>但是父类的非可失败构造器不可以被子类的可失败构造器重写。<br>如果用非可失败构造器重写可失败构造器时，不再向上代理父类的可失败构造器，非可失败构造器不不会代理调用可失败构造器。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Document</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> name: <span class=\"type\">String</span>?</div><div class=\"line\">    <span class=\"comment\">// 该构造器构建了一个name属性值为nil的document对象</span></div><div class=\"line\">    <span class=\"keyword\">init</span>() &#123;&#125;</div><div class=\"line\">    <span class=\"comment\">// 该构造器构建了一个name属性值为非空字符串的document对象</span></div><div class=\"line\">    <span class=\"keyword\">init</span>?(name: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> name.isEmpty &#123; <span class=\"keyword\">return</span> <span class=\"literal\">nil</span> &#125;</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AutomaticallyNamedDocument</span>: <span class=\"title\">Document</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">init</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>()</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = <span class=\"string\">\"[Untitled]\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">override</span> <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.<span class=\"keyword\">init</span>()</div><div class=\"line\">        <span class=\"keyword\">if</span> name.isEmpty &#123;</div><div class=\"line\">            <span class=\"keyword\">self</span>.name = <span class=\"string\">\"[Untitled]\"</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h3 id=\"隐私解析可选类型的可失败构造器\"><a href=\"#隐私解析可选类型的可失败构造器\" class=\"headerlink\" title=\"隐私解析可选类型的可失败构造器\"></a>隐私解析可选类型的可失败构造器</h3><p><code>init!</code>同<code>init?</code>一样都是可失败构造器，该可失败构造器就会构造一个特定类型的隐私解析可选类型的对象。<br><code>init?</code>和<code>init!</code>可以相互代理调用，相互重写。<br><code>init</code>也可以代理调用<code>init!</code>，但这会触发一个断言：<code>init!</code>是否会触发构造失败。</p>\n<h3 id=\"必要构造器\"><a href=\"#必要构造器\" class=\"headerlink\" title=\"必要构造器\"></a>必要构造器</h3><p>在类的构造器前添加<code>required</code>关键字表示该类的子类都必须实现该构造器。<br>子类重写父类的<code>required</code>必要构造器时，也要加上<code>required</code>关键字，也是必要构造器。<br>覆盖基类的必要构造器时，不需要添加<code>override</code>关键字。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">init</span>() &#123;</div><div class=\"line\">        <span class=\"comment\">// 在这里添加该必要构造器的实现代码</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeSubclass</span>: <span class=\"title\">SomeClass</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">required</span> <span class=\"keyword\">init</span>() &#123;</div><div class=\"line\">        <span class=\"comment\">// 在这里添加子类必要构造器的实现代码</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>不一定需要显示的实现父类的必要构造器，只要满足父类的必要构造器需求即可。</p>\n<h2 id=\"闭包设置属性默认值\"><a href=\"#闭包设置属性默认值\" class=\"headerlink\" title=\"闭包设置属性默认值\"></a>闭包设置属性默认值</h2><p>闭包可以用来为属性提供定制的默认值，返回和属性类型相同类型的默认值。<br>在闭包中不能使用其他属性，不能访问其他实例方法，不能使用<code>self</code>属性。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SomeClass</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> someProperty: <span class=\"type\">SomeType</span> = &#123;</div><div class=\"line\">        <span class=\"comment\">// 在这个闭包中给 someProperty 创建一个默认值</span></div><div class=\"line\">        <span class=\"comment\">// someValue 必须和 SomeType 类型相同</span></div><div class=\"line\">        <span class=\"keyword\">return</span> someValue</div><div class=\"line\">        &#125;()</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>闭包后面接<code>()</code>表示闭包立刻执行，否则会把闭包赋值给<code>someProperty</code>。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Checkerboard</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> boardColors: [<span class=\"type\">Bool</span>] = &#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> temporaryBoard = [<span class=\"type\">Bool</span>]()</div><div class=\"line\">        <span class=\"keyword\">var</span> isBlack = <span class=\"literal\">false</span></div><div class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">1</span>...<span class=\"number\">10</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"number\">1</span>...<span class=\"number\">10</span> &#123;</div><div class=\"line\">                temporaryBoard.append(isBlack)</div><div class=\"line\">                isBlack = !isBlack</div><div class=\"line\">            &#125;</div><div class=\"line\">            isBlack = !isBlack</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> temporaryBoard</div><div class=\"line\">        &#125;()</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">squareIsBlackAtRow</span><span class=\"params\">(row: Int, column: Int)</span></span> -&gt; <span class=\"type\">Bool</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> boardColors[(row * <span class=\"number\">10</span>) + column]</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> board = <span class=\"type\">Checkerboard</span>()</div><div class=\"line\"><span class=\"built_in\">println</span>(board.squareIsBlackAtRow(<span class=\"number\">0</span>, column: <span class=\"number\">1</span>))</div><div class=\"line\"><span class=\"comment\">// 输出 \"true\"</span></div><div class=\"line\"><span class=\"built_in\">println</span>(board.squareIsBlackAtRow(<span class=\"number\">9</span>, column: <span class=\"number\">9</span>))</div><div class=\"line\"><span class=\"comment\">// 输出 \"false\"</span></div></pre></td></tr></table></figure></p>\n<p>这里的闭包把类<code>Checkerboard</code>的布尔型数组<code>boardColors</code>初始化为<code>true</code>和<code>false</code>交替的数组，可以用来标识国际象棋的棋盘。</p>\n<h1 id=\"析构过程\"><a href=\"#析构过程\" class=\"headerlink\" title=\"析构过程\"></a>析构过程</h1><p>Swift会自动释放不再需要的实例以释放资源。如果我们需要进行一些额外的清理，就需要使用析构函数。<br>每个类最多只能有一个析构函数。<br>析构函数使用关键字<code>deinit</code>，不带任何参数，在写法上不带括号：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ClassName</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123; </div><div class=\"line\">\t<span class=\"comment\">//some action</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>析构函数是在实例释放前被自动调用，不允许自己主动调用。<br>子类的析构函数先调用，父类的析构函数后调用。子类没有提供析构函数，也会调用父类的析构函数。</p>\n<h1 id=\"嵌套类型\"><a href=\"#嵌套类型\" class=\"headerlink\" title=\"嵌套类型\"></a>嵌套类型</h1><p>枚举，类和结构体可以想换嵌套，将需要嵌套的类型定义写在被嵌套类型的区域{}内，可以实现多级嵌套。</p>\n<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BlackjackCard</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">// 嵌套定义枚举型Suit</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Suit</span>: <span class=\"title\">Character</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">case</span> <span class=\"type\">Spades</span> = <span class=\"string\">\"♠\"</span>, <span class=\"type\">Hearts</span> = <span class=\"string\">\"♡\"</span>, <span class=\"type\">Diamonds</span> = <span class=\"string\">\"♢\"</span>, <span class=\"type\">Clubs</span> = <span class=\"string\">\"♣\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 嵌套定义枚举型Rank</span></div><div class=\"line\">    <span class=\"class\"><span class=\"keyword\">enum</span> <span class=\"title\">Rank</span>: <span class=\"title\">Int</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">case</span> <span class=\"type\">Two</span> = <span class=\"number\">2</span>, <span class=\"type\">Three</span>, <span class=\"type\">Four</span>, <span class=\"type\">Five</span>, <span class=\"type\">Six</span>, <span class=\"type\">Seven</span>, <span class=\"type\">Eight</span>, <span class=\"type\">Nine</span>, <span class=\"type\">Ten</span></div><div class=\"line\">       <span class=\"keyword\">case</span> <span class=\"type\">Jack</span>, <span class=\"type\">Queen</span>, <span class=\"type\">King</span>, <span class=\"type\">Ace</span></div><div class=\"line\">       <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Values</span> </span>&#123;</div><div class=\"line\">           <span class=\"keyword\">let</span> first: <span class=\"type\">Int</span>, second: <span class=\"type\">Int</span>?</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">var</span> values: <span class=\"type\">Values</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">switch</span> <span class=\"keyword\">self</span> &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> .<span class=\"type\">Ace</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">Values</span>(first: <span class=\"number\">1</span>, second: <span class=\"number\">11</span>)</div><div class=\"line\">        <span class=\"keyword\">case</span> .<span class=\"type\">Jack</span>, .<span class=\"type\">Queen</span>, .<span class=\"type\">King</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">Values</span>(first: <span class=\"number\">10</span>, second: <span class=\"literal\">nil</span>)</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"type\">Values</span>(first: <span class=\"keyword\">self</span>.toRaw(), second: <span class=\"literal\">nil</span>)</div><div class=\"line\">            &#125;</div><div class=\"line\">       &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// BlackjackCard 的属性和方法</span></div><div class=\"line\">    <span class=\"keyword\">let</span> rank: <span class=\"type\">Rank</span>, suit: <span class=\"type\">Suit</span></div><div class=\"line\">    <span class=\"keyword\">var</span> description: <span class=\"type\">String</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> output = <span class=\"string\">\"suit is \\(suit.toRaw()),\"</span></div><div class=\"line\">        output += <span class=\"string\">\" value is \\(rank.values.first)\"</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> second = rank.values.second &#123;</div><div class=\"line\">            output += <span class=\"string\">\" or \\(second)\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> output</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>结构体<code>BlackjackCard</code>用来存储“二十一点游戏”中的扑克牌，嵌套了枚举类型<code>Suit</code>表示花色，嵌套了枚举类型<code>Rank</code>表示点数。而且<code>Rank</code>中又定义了结构体<code>Values</code>准确描述牌的大小：数字牌表示本身数字的大小，<code>Ace</code>表示1或者11，<code>Jack</code>，<code>Queen</code>和<code>King</code>表示10。<br>结构体有默认的成员构造函数，这里的默认构造函数为：<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">let</span> theAceOfSpades = <span class=\"type\">BlackjackCard</span>(rank: .<span class=\"type\">Ace</span>, suit: .<span class=\"type\">Spades</span>)</div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"theAceOfSpades: \\(theAceOfSpades.description)\"</span>)</div><div class=\"line\"><span class=\"comment\">// 打印出 \"theAceOfSpades: suit is ♠, value is 1 or 11\"</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> heartsSymbol = <span class=\"type\">BlackjackCard</span>.<span class=\"type\">Suit</span>.<span class=\"type\">Hearts</span>.toRaw()</div><div class=\"line\"><span class=\"comment\">// 红心的符号 为 \"♡\"</span></div></pre></td></tr></table></figure></p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>"},{"title":"Swift基础入门(9)：可选链和自动引用计数","date":"2015-07-23T07:43:48.000Z","toc":true,"_content":"\n本篇介绍Swift的基础知识：通过可选链（_optional chaining_）调用属性，方法和下标；自动引用计数（_automatic reference counting_）的工作机制；循环强引用的解决方案。\n\n<!--more-->\n**Title: [Swift基础入门(9)：可选链自动引用计数](https://aidaizyy.github.io/swift_9)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-07-24](http://aidaizyy.github.io)**\n\n# 可选链\n如果请求和调用属性，方法和下标的目标可能为空`nil`，这样的多次请求或调用就可以被链接起来，称为可选链。\n如果任何一个节点为空`nil`，整个可选链失效。\n``` swift\nclass Person { //人\n    var residence: Residence? //每个人可能有住所\n}\n\nclass Residence { //住所\n    var id: String? //住所可能有ID\n    var address: Address? //住所可能有地址\n    var rooms = [Room]() //住所的房间\n    var numberOfRooms: Int { //返回住所的房间数量\n        return rooms.count\n    }\n    subscript(i: Int) -> Room { //下标地址访问住所的一个房间\n        return rooms[i]\n    }\n    func printNumberOfRooms() { //打印房间的数量\n        println(\"The number of rooms is \\(numberOfRooms)\")\n    }\n    func getId() -> String? { //返回住所的ID\n        if id != nil {\n            return id\n        } else {\n            return nil\n        }\n    }\n}\n\nclass Room { //房间\n    let name: String //房间的名字\n    init(name: String) { self.name = name } //房间的构造器\n}\n\nclass Address { //地址\n    var street: String? //地址可能有街道\n}\n\nlet john = Person()\n\n//属性\nif let roomCount = john.residence?.numberOfRooms {\n    println(\"John's residence has \\(roomCount) room(s).\")\n} else {\n    println(\"Unable to retrieve the number of rooms.\")\n}\n// 打印 \"Unable to retrieve the number of rooms。\n\n//无返回值方法\nif john.residence?.printNumberOfRooms() != nil{\n    println(\"It was possible to print the number of rooms.\")\n} else {\n    println(\"It was not possible to print the number of rooms.\")\n}\n// 打印 \"It was not possible to print the number of rooms.\"。\n\n//有返回值方法\nif let buildingId = john.residence?.getId() {\n    println(\"John's building identifier is \\(buildingId).\")\n} else {\n    println(\"Unable to retrieve the ID of building.\")\n}\n// 打印 \"John's building identifier is The Larches.\"。\n\n//下标\nif let firstRoomName = john.residence?[0].name {\n    println(\"The first room name is \\(firstRoomName).\")\n} else {\n    println(\"Unable to retrieve the first room name.\")\n}\n// 打印 \"Unable to retrieve the first room name.\"。\n\n//多层链接\nif let johnsStreet = john.residence?.address?.street {\n    println(\"John's street name is \\(johnsStreet).\")\n} else {\n    println(\"Unable to retrieve the address.\")\n}\n// 打印 \"Unable to retrieve the address.”。\n```\n创建了`Person`的实例`john`，`john`中包含类`Residence`的实例`resindence`。\n`resindence`包含了可选类型的属性和方法，值可能为`nil`，所以访问它的属性，方法和下标时都应该加上`?`。\n可选链中只要有一个节点为可选类型，可选链的结果就一定为可选类型。\n第39行，`john.residence?.numberOfRooms`的结果类型为`Int?`。\n第47行，`john.residence?.printNumberOfRooms()`的结果类型为`void?`。这里不能直接用函数结构作为布尔型去判断，而是与`nil`比较。\n第55行，`john.residence?.getId()`的结果类型为`String?`。\n第63行，`john.residence?[0].name`的结果类型为`String?`。这里的`?`放在`[0]`前，因为确保数组有值，才能通过下标去访问。\n第71行，`john.reidence?.address?.street`的结果类型为`String?`。多层的可选链接链接到一起，`residence`和`address`都是可选类型，所以使用了两个`?`。如果给`john.residence.address`中的`address`分配实例，应该写作`john.residence!.address`，强制解析确保`residence`有值，才能对其中的`address`分配实例。\n\n# 自动引用计数\n自动引用计数（_ARC_）跟踪和管理内存，会自动释放不再使用的实例占用的内存。\nARC会跟踪和计算每一个实例被多少属性，常量和变量引用，这样的引用称为对实例的强引用。不存在强引用，实例会被销毁，否则实例会被保留。\n\n## 类实例的循环强引用\n两个类中相互引用，相互保持对方的强引用，这样无法销毁，形成了循环强引用。\n\n### 强引用\n``` swift\nclass Person {\n    let name: String\n    init(name: String) { self.name = name }\n    var apartment: Apartment?\n    deinit { println(\"\\(name) is being deinitialized\") }dd\n}\n\nclass Apartment {\n    let number: Int\n    init(number: Int) { self.number = number }\n    var tenant: Person?\n    deinit { println(\"Apartment #\\(number) is being deinitialized\") }\n}\n\nvar john: Person?\nvar number73: Apartment?\n\njohn = Person(name: \"John Appleseed\")\nnumber73 = Apartment(number: 73)\n\njohn!.apartment = number73\nnumber73!.tenant = john\n\njohn = nil\nnumber73 = nil\n```\n上面的代码展示了类实例的循环强引用。\n类`Person`中有属性是`Apartment`类型，类`Apartment`中有属性是`Person`类型。\n声明了实例`john`和实例`number73`，并赋值。\n最后两行把两个实例都设为`nil`，但是析构函数并没有被调用，因为两个实例还有循环强引用联系，并没有自动销魂，而且造成了内存泄露。\n\n### 弱引用\n为了解决循环强引用问题，有两种办法：弱引用（_weak reference_）和无主引用（_unowned reference_）。\n一个实例对另一个实例弱引用或者无主引用，不产生强引用，反过来，另一个实例对一个实例强引用，这样能够相互引用而不产生循环强引用。如果实例的值可能为`nil`使用弱引用；如果实例的值不可能为`nil`使用无主引用。\n\n声明时在属性或常量变量前加上`weak`关键字表示弱引用。\n两个实例的值都可能为`nil`，使用弱引用。\n``` swift\nlass Person {\n    let name: String\n    init(name: String) { self.name = name }\n    var apartment: Apartment?\n    deinit { println(\"\\(name) is being deinitialized\") }\n}\n\nclass Apartment {\n    let number: Int\n    init(number: Int) { self.number = number }\n    weak var tenant: Person?\n    deinit { println(\"Apartment #\\(number) is being deinitialized\") }\n}\n\nvar john: Person?\nvar number73: Apartment?\n\njohn = Person(name: \"John Appleseed\")\nnumber73 = Apartment(number: 73)\n\njohn!.apartment = number73\nnumber73!.tenant = john\n\njohn = nil\n// prints \"John Appleseed is being deinitialized\"\nnumber73 = nil\n// prints \"Apartment #73 is being deinitialized\"\n```\n上面的代码和循环强引用代码基本一致，只是在类`Apartment`的类型为`Person?`的属性`tenant`前加上了`weak。因为`Person?`是可选类型，`tenant`值可能为`nil`，所以使用弱引用。\n最后一句，赋值`nil`给`john`后，因为`number73`对`john`不是强引用，`john`这时没有强引用，可以销毁，调用了析构函数。`john`销毁后，`number73`没有强引用，也可以被销毁。\n如果把`number73 = nil`和`john = nil`语句顺序交换，打印顺序不会变，因为没有强引用的`john`一定是先销毁。\n\n### 无主引用\n声明时在属性或常量变量前加上`unowned`关键字表示无主引用。\n- 一个实例的值可能为`nil`，另一个实例的值不可能为`nil`。\n``` swift\nclass Customer {\n    let name: String\n    var card: CreditCard?\n    init(name: String) {\n        self.name = name\n    }\n    deinit { println(\"\\(name) is being deinitialized\") }\n}\n\nclass CreditCard {\n    let number: Int\n    unowned let customer: Customer\n    init(number: Int, customer: Customer) {\n        self.number = number\n        self.customer = customer\n    }\n    deinit { println(\"Card #\\(number) is being deinitialized\") }\n}\n\nvar john: Customer?\n\njohn = Customer(name: \"John Appleseed\")\njohn!.card = CreditCard(number: 1234_5678_9012_3456, customer: john!)\n\njohn = nil\n// prints \"John Appleseed is being deinitialized\"\n// prints \"Card #1234567890123456 is being deinitialized\"\n```\n类`CreditCard`的类型为`Customer`的属性`customer`前加上了`unowned`。因为`customer`在构造函数中就会赋予初始值，值不会为`nil`，所以使用无主引用。\n最后一句，赋值`nil`给`john`后，因为类`CreditCard`的实例对`john`不是强引用，`john`这时没有强引用，可以销毁，调用了析构函数。`john`销毁后，类`Creditcard`的实例也没有强引用了，跟着被销毁了。\n- 两个实例的值都不可能为`nil`。\n这种场景一个类使用无主属性，另一个类使用隐式解析可选类型。\n``` swift\nclass Country {\n    let name: String\n    let capitalCity: City!\n    init(name: String, capitalName: String) {\n        self.name = name\n        self.capitalCity = City(name: capitalName, country: self)\n    }\n}\n\nclass City {\n    let name: String\n    unowned let country: Country\n    init(name: String, country: Country) {\n        self.name = name\n        self.country = country\n    }\n}\n\nvar country = Country(name: \"Canada\", capitalName: \"Ottawa\")\nprintln(\"\\(country.name)'s capital city is called \\(country.capitalCity.name)\")\n// prints \"Canada's capital city is called Ottawa\"\n```\n类`City`的类型为`Country`的属性`country`前加上了`unowned`表示无主属性。\n类`Country`的类型为`City!`的属性`capitalCity`在类型后加上了`!`表示隐式解析可选类型。\n类`Country`的实例的`country`创建时，调用构造器，为`name`和`capiptalCity`赋值。因为`self`属性必须在构造的第二阶段使用，也就是类中所有存储型属性全部有初始值之后才能使用。如果`Country`的值可以为`nil`，先给`capitalCity`赋值`nil`就可以调用构造器为`capitalCity`赋予新值。但是这里不可以赋值`nil`，所以加上了`!`隐私解析可选类型，默认初始值为`nil`，可以调用构造器赋予新值。\n属性`capitalCity`在调用时可以直接使用，不再需要加`!`访问。\n\n## 闭包的循环强引用\n除了两个类实例的循环强引用，类实例和闭包也可能引起循环强引用，比如把闭包赋值给类的一个属性，而闭包中又通过`self`访问类的一个属性，这就引起了循环强引用，实例不会被销毁。\n\n### 闭包占用列表\n闭包占用列表（_closuer capture list_）可以解决闭包引起的循环强引用问题。\n> 闭包调用类属性，必须加上`self.`，不能直接通过属性名调用。\n``` swift\nlazy var someClosure: (Int, String) -> String = {\n    [unowned self] (index: Int, stringToProcess: String) -> String in\n    // closure body goes here\n}\n```\n定义占用列表，使用`weak`或`unowned`，视值是否能为`nil`而定。\n``` swift\nclass HTMLElement {\n\n    let name: String\n    let text: String?\n\n    lazy var asHTML: () -> String = {\n        [unowned self] in\n        if let text = self.text {\n            return \"<\\(self.name)>\\(text)</\\(self.name)>\"\n        } else {\n            return \"<\\(self.name) />\"\n        }\n    }\n\n    init(name: String, text: String? = nil) {\n        self.name = name\n        self.text = text\n    }\n\n    deinit {\n        println(\"\\(name) is being deinitialized\")\n    }\n\n}\n\nvar paragraph: HTMLElement? = HTMLElement(name: \"p\", text: \"hello, world\")\nprintln(paragraph!.asHTML())\n// prints \"<p>hello, world</p>\"\n\nparagraph = nil\n// prints \"p is being deinitialized\"\n```\n上面的例子中，闭包的指定参数列表和返回类型可以通过上下文推断，所以省略。`in`放在占用列表之后。\n这里使用了无主引用，闭包通过`unowned self`对类`HTMLELement`无主引用。\n最后一句，赋值`nil`给`paragraph`，没有了闭包对它的强引用，可以销毁并调用析构函数。\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","source":"_posts/swift_9.md","raw":"title: \"Swift基础入门(9)：可选链和自动引用计数\"\ndate: 2015-07-23 15:43:48\ntags:\n- swift\ncategories: swift\ntoc: true\n---\n\n本篇介绍Swift的基础知识：通过可选链（_optional chaining_）调用属性，方法和下标；自动引用计数（_automatic reference counting_）的工作机制；循环强引用的解决方案。\n\n<!--more-->\n**Title: [Swift基础入门(9)：可选链自动引用计数](https://aidaizyy.github.io/swift_9)**\n**Author: [Yunyao Zhang(张云尧)](http://aidaizyy.github.io)**\n**E-mail: <aidaizyy@gmail.com>**\n**Last Modified: [2015-07-24](http://aidaizyy.github.io)**\n\n# 可选链\n如果请求和调用属性，方法和下标的目标可能为空`nil`，这样的多次请求或调用就可以被链接起来，称为可选链。\n如果任何一个节点为空`nil`，整个可选链失效。\n``` swift\nclass Person { //人\n    var residence: Residence? //每个人可能有住所\n}\n\nclass Residence { //住所\n    var id: String? //住所可能有ID\n    var address: Address? //住所可能有地址\n    var rooms = [Room]() //住所的房间\n    var numberOfRooms: Int { //返回住所的房间数量\n        return rooms.count\n    }\n    subscript(i: Int) -> Room { //下标地址访问住所的一个房间\n        return rooms[i]\n    }\n    func printNumberOfRooms() { //打印房间的数量\n        println(\"The number of rooms is \\(numberOfRooms)\")\n    }\n    func getId() -> String? { //返回住所的ID\n        if id != nil {\n            return id\n        } else {\n            return nil\n        }\n    }\n}\n\nclass Room { //房间\n    let name: String //房间的名字\n    init(name: String) { self.name = name } //房间的构造器\n}\n\nclass Address { //地址\n    var street: String? //地址可能有街道\n}\n\nlet john = Person()\n\n//属性\nif let roomCount = john.residence?.numberOfRooms {\n    println(\"John's residence has \\(roomCount) room(s).\")\n} else {\n    println(\"Unable to retrieve the number of rooms.\")\n}\n// 打印 \"Unable to retrieve the number of rooms。\n\n//无返回值方法\nif john.residence?.printNumberOfRooms() != nil{\n    println(\"It was possible to print the number of rooms.\")\n} else {\n    println(\"It was not possible to print the number of rooms.\")\n}\n// 打印 \"It was not possible to print the number of rooms.\"。\n\n//有返回值方法\nif let buildingId = john.residence?.getId() {\n    println(\"John's building identifier is \\(buildingId).\")\n} else {\n    println(\"Unable to retrieve the ID of building.\")\n}\n// 打印 \"John's building identifier is The Larches.\"。\n\n//下标\nif let firstRoomName = john.residence?[0].name {\n    println(\"The first room name is \\(firstRoomName).\")\n} else {\n    println(\"Unable to retrieve the first room name.\")\n}\n// 打印 \"Unable to retrieve the first room name.\"。\n\n//多层链接\nif let johnsStreet = john.residence?.address?.street {\n    println(\"John's street name is \\(johnsStreet).\")\n} else {\n    println(\"Unable to retrieve the address.\")\n}\n// 打印 \"Unable to retrieve the address.”。\n```\n创建了`Person`的实例`john`，`john`中包含类`Residence`的实例`resindence`。\n`resindence`包含了可选类型的属性和方法，值可能为`nil`，所以访问它的属性，方法和下标时都应该加上`?`。\n可选链中只要有一个节点为可选类型，可选链的结果就一定为可选类型。\n第39行，`john.residence?.numberOfRooms`的结果类型为`Int?`。\n第47行，`john.residence?.printNumberOfRooms()`的结果类型为`void?`。这里不能直接用函数结构作为布尔型去判断，而是与`nil`比较。\n第55行，`john.residence?.getId()`的结果类型为`String?`。\n第63行，`john.residence?[0].name`的结果类型为`String?`。这里的`?`放在`[0]`前，因为确保数组有值，才能通过下标去访问。\n第71行，`john.reidence?.address?.street`的结果类型为`String?`。多层的可选链接链接到一起，`residence`和`address`都是可选类型，所以使用了两个`?`。如果给`john.residence.address`中的`address`分配实例，应该写作`john.residence!.address`，强制解析确保`residence`有值，才能对其中的`address`分配实例。\n\n# 自动引用计数\n自动引用计数（_ARC_）跟踪和管理内存，会自动释放不再使用的实例占用的内存。\nARC会跟踪和计算每一个实例被多少属性，常量和变量引用，这样的引用称为对实例的强引用。不存在强引用，实例会被销毁，否则实例会被保留。\n\n## 类实例的循环强引用\n两个类中相互引用，相互保持对方的强引用，这样无法销毁，形成了循环强引用。\n\n### 强引用\n``` swift\nclass Person {\n    let name: String\n    init(name: String) { self.name = name }\n    var apartment: Apartment?\n    deinit { println(\"\\(name) is being deinitialized\") }dd\n}\n\nclass Apartment {\n    let number: Int\n    init(number: Int) { self.number = number }\n    var tenant: Person?\n    deinit { println(\"Apartment #\\(number) is being deinitialized\") }\n}\n\nvar john: Person?\nvar number73: Apartment?\n\njohn = Person(name: \"John Appleseed\")\nnumber73 = Apartment(number: 73)\n\njohn!.apartment = number73\nnumber73!.tenant = john\n\njohn = nil\nnumber73 = nil\n```\n上面的代码展示了类实例的循环强引用。\n类`Person`中有属性是`Apartment`类型，类`Apartment`中有属性是`Person`类型。\n声明了实例`john`和实例`number73`，并赋值。\n最后两行把两个实例都设为`nil`，但是析构函数并没有被调用，因为两个实例还有循环强引用联系，并没有自动销魂，而且造成了内存泄露。\n\n### 弱引用\n为了解决循环强引用问题，有两种办法：弱引用（_weak reference_）和无主引用（_unowned reference_）。\n一个实例对另一个实例弱引用或者无主引用，不产生强引用，反过来，另一个实例对一个实例强引用，这样能够相互引用而不产生循环强引用。如果实例的值可能为`nil`使用弱引用；如果实例的值不可能为`nil`使用无主引用。\n\n声明时在属性或常量变量前加上`weak`关键字表示弱引用。\n两个实例的值都可能为`nil`，使用弱引用。\n``` swift\nlass Person {\n    let name: String\n    init(name: String) { self.name = name }\n    var apartment: Apartment?\n    deinit { println(\"\\(name) is being deinitialized\") }\n}\n\nclass Apartment {\n    let number: Int\n    init(number: Int) { self.number = number }\n    weak var tenant: Person?\n    deinit { println(\"Apartment #\\(number) is being deinitialized\") }\n}\n\nvar john: Person?\nvar number73: Apartment?\n\njohn = Person(name: \"John Appleseed\")\nnumber73 = Apartment(number: 73)\n\njohn!.apartment = number73\nnumber73!.tenant = john\n\njohn = nil\n// prints \"John Appleseed is being deinitialized\"\nnumber73 = nil\n// prints \"Apartment #73 is being deinitialized\"\n```\n上面的代码和循环强引用代码基本一致，只是在类`Apartment`的类型为`Person?`的属性`tenant`前加上了`weak。因为`Person?`是可选类型，`tenant`值可能为`nil`，所以使用弱引用。\n最后一句，赋值`nil`给`john`后，因为`number73`对`john`不是强引用，`john`这时没有强引用，可以销毁，调用了析构函数。`john`销毁后，`number73`没有强引用，也可以被销毁。\n如果把`number73 = nil`和`john = nil`语句顺序交换，打印顺序不会变，因为没有强引用的`john`一定是先销毁。\n\n### 无主引用\n声明时在属性或常量变量前加上`unowned`关键字表示无主引用。\n- 一个实例的值可能为`nil`，另一个实例的值不可能为`nil`。\n``` swift\nclass Customer {\n    let name: String\n    var card: CreditCard?\n    init(name: String) {\n        self.name = name\n    }\n    deinit { println(\"\\(name) is being deinitialized\") }\n}\n\nclass CreditCard {\n    let number: Int\n    unowned let customer: Customer\n    init(number: Int, customer: Customer) {\n        self.number = number\n        self.customer = customer\n    }\n    deinit { println(\"Card #\\(number) is being deinitialized\") }\n}\n\nvar john: Customer?\n\njohn = Customer(name: \"John Appleseed\")\njohn!.card = CreditCard(number: 1234_5678_9012_3456, customer: john!)\n\njohn = nil\n// prints \"John Appleseed is being deinitialized\"\n// prints \"Card #1234567890123456 is being deinitialized\"\n```\n类`CreditCard`的类型为`Customer`的属性`customer`前加上了`unowned`。因为`customer`在构造函数中就会赋予初始值，值不会为`nil`，所以使用无主引用。\n最后一句，赋值`nil`给`john`后，因为类`CreditCard`的实例对`john`不是强引用，`john`这时没有强引用，可以销毁，调用了析构函数。`john`销毁后，类`Creditcard`的实例也没有强引用了，跟着被销毁了。\n- 两个实例的值都不可能为`nil`。\n这种场景一个类使用无主属性，另一个类使用隐式解析可选类型。\n``` swift\nclass Country {\n    let name: String\n    let capitalCity: City!\n    init(name: String, capitalName: String) {\n        self.name = name\n        self.capitalCity = City(name: capitalName, country: self)\n    }\n}\n\nclass City {\n    let name: String\n    unowned let country: Country\n    init(name: String, country: Country) {\n        self.name = name\n        self.country = country\n    }\n}\n\nvar country = Country(name: \"Canada\", capitalName: \"Ottawa\")\nprintln(\"\\(country.name)'s capital city is called \\(country.capitalCity.name)\")\n// prints \"Canada's capital city is called Ottawa\"\n```\n类`City`的类型为`Country`的属性`country`前加上了`unowned`表示无主属性。\n类`Country`的类型为`City!`的属性`capitalCity`在类型后加上了`!`表示隐式解析可选类型。\n类`Country`的实例的`country`创建时，调用构造器，为`name`和`capiptalCity`赋值。因为`self`属性必须在构造的第二阶段使用，也就是类中所有存储型属性全部有初始值之后才能使用。如果`Country`的值可以为`nil`，先给`capitalCity`赋值`nil`就可以调用构造器为`capitalCity`赋予新值。但是这里不可以赋值`nil`，所以加上了`!`隐私解析可选类型，默认初始值为`nil`，可以调用构造器赋予新值。\n属性`capitalCity`在调用时可以直接使用，不再需要加`!`访问。\n\n## 闭包的循环强引用\n除了两个类实例的循环强引用，类实例和闭包也可能引起循环强引用，比如把闭包赋值给类的一个属性，而闭包中又通过`self`访问类的一个属性，这就引起了循环强引用，实例不会被销毁。\n\n### 闭包占用列表\n闭包占用列表（_closuer capture list_）可以解决闭包引起的循环强引用问题。\n> 闭包调用类属性，必须加上`self.`，不能直接通过属性名调用。\n``` swift\nlazy var someClosure: (Int, String) -> String = {\n    [unowned self] (index: Int, stringToProcess: String) -> String in\n    // closure body goes here\n}\n```\n定义占用列表，使用`weak`或`unowned`，视值是否能为`nil`而定。\n``` swift\nclass HTMLElement {\n\n    let name: String\n    let text: String?\n\n    lazy var asHTML: () -> String = {\n        [unowned self] in\n        if let text = self.text {\n            return \"<\\(self.name)>\\(text)</\\(self.name)>\"\n        } else {\n            return \"<\\(self.name) />\"\n        }\n    }\n\n    init(name: String, text: String? = nil) {\n        self.name = name\n        self.text = text\n    }\n\n    deinit {\n        println(\"\\(name) is being deinitialized\")\n    }\n\n}\n\nvar paragraph: HTMLElement? = HTMLElement(name: \"p\", text: \"hello, world\")\nprintln(paragraph!.asHTML())\n// prints \"<p>hello, world</p>\"\n\nparagraph = nil\n// prints \"p is being deinitialized\"\n```\n上面的例子中，闭包的指定参数列表和返回类型可以通过上下文推断，所以省略。`in`放在占用列表之后。\n这里使用了无主引用，闭包通过`unowned self`对类`HTMLELement`无主引用。\n最后一句，赋值`nil`给`paragraph`，没有了闭包对它的强引用，可以销毁并调用析构函数。\n\n** 转载请注明原作者和出处。**\n> 如果觉得这篇文章对您有帮助或启发，请随意打赏~\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width = \"250\" align = \"left\" /> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width = \"250\" align = \"left\" /> </p>\n","slug":"swift_9","published":1,"updated":"2017-05-08T16:40:35.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj2gdu6ll001pv1o3gm8tzty0","content":"<p>本篇介绍Swift的基础知识：通过可选链（<em>optional chaining</em>）调用属性，方法和下标；自动引用计数（<em>automatic reference counting</em>）的工作机制；循环强引用的解决方案。</p>\n<a id=\"more\"></a>\n<p><strong>Title: <a href=\"https://aidaizyy.github.io/swift_9\" target=\"_blank\" rel=\"external\">Swift基础入门(9)：可选链自动引用计数</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#109;&#97;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#97;&#x69;&#100;&#x61;&#105;&#x7a;&#x79;&#121;&#64;&#103;&#109;&#x61;&#105;&#108;&#x2e;&#99;&#x6f;&#x6d;\">&#97;&#x69;&#100;&#x61;&#105;&#x7a;&#x79;&#121;&#64;&#103;&#109;&#x61;&#105;&#108;&#x2e;&#99;&#x6f;&#x6d;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-07-24</a></strong></p>\n<h1 id=\"可选链\"><a href=\"#可选链\" class=\"headerlink\" title=\"可选链\"></a>可选链</h1><p>如果请求和调用属性，方法和下标的目标可能为空<code>nil</code>，这样的多次请求或调用就可以被链接起来，称为可选链。<br>如果任何一个节点为空<code>nil</code>，整个可选链失效。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123; <span class=\"comment\">//人</span></div><div class=\"line\">    <span class=\"keyword\">var</span> residence: <span class=\"type\">Residence</span>? <span class=\"comment\">//每个人可能有住所</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Residence</span> </span>&#123; <span class=\"comment\">//住所</span></div><div class=\"line\">    <span class=\"keyword\">var</span> id: <span class=\"type\">String</span>? <span class=\"comment\">//住所可能有ID</span></div><div class=\"line\">    <span class=\"keyword\">var</span> address: <span class=\"type\">Address</span>? <span class=\"comment\">//住所可能有地址</span></div><div class=\"line\">    <span class=\"keyword\">var</span> rooms = [<span class=\"type\">Room</span>]() <span class=\"comment\">//住所的房间</span></div><div class=\"line\">    <span class=\"keyword\">var</span> numberOfRooms: <span class=\"type\">Int</span> &#123; <span class=\"comment\">//返回住所的房间数量</span></div><div class=\"line\">        <span class=\"keyword\">return</span> rooms.<span class=\"built_in\">count</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">subscript</span>(i: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Room</span> &#123; <span class=\"comment\">//下标地址访问住所的一个房间</span></div><div class=\"line\">        <span class=\"keyword\">return</span> rooms[i]</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printNumberOfRooms</span><span class=\"params\">()</span></span> &#123; <span class=\"comment\">//打印房间的数量</span></div><div class=\"line\">        <span class=\"built_in\">println</span>(<span class=\"string\">\"The number of rooms is \\(numberOfRooms)\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getId</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span>? &#123; <span class=\"comment\">//返回住所的ID</span></div><div class=\"line\">        <span class=\"keyword\">if</span> id != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> id</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Room</span> </span>&#123; <span class=\"comment\">//房间</span></div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span> <span class=\"comment\">//房间的名字</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123; <span class=\"keyword\">self</span>.name = name &#125; <span class=\"comment\">//房间的构造器</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> </span>&#123; <span class=\"comment\">//地址</span></div><div class=\"line\">    <span class=\"keyword\">var</span> street: <span class=\"type\">String</span>? <span class=\"comment\">//地址可能有街道</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> john = <span class=\"type\">Person</span>()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//属性</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> roomCount = john.residence?.numberOfRooms &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"John's residence has \\(roomCount) room(s).\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Unable to retrieve the number of rooms.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"Unable to retrieve the number of rooms。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//无返回值方法</span></div><div class=\"line\"><span class=\"keyword\">if</span> john.residence?.printNumberOfRooms() != <span class=\"literal\">nil</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"It was possible to print the number of rooms.\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"It was not possible to print the number of rooms.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"It was not possible to print the number of rooms.\"。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//有返回值方法</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> buildingId = john.residence?.getId() &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"John's building identifier is \\(buildingId).\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Unable to retrieve the ID of building.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"John's building identifier is The Larches.\"。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//下标</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> firstRoomName = john.residence?[<span class=\"number\">0</span>].name &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"The first room name is \\(firstRoomName).\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Unable to retrieve the first room name.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"Unable to retrieve the first room name.\"。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//多层链接</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> johnsStreet = john.residence?.address?.street &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"John's street name is \\(johnsStreet).\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Unable to retrieve the address.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"Unable to retrieve the address.”。</span></div></pre></td></tr></table></figure></p>\n<p>创建了<code>Person</code>的实例<code>john</code>，<code>john</code>中包含类<code>Residence</code>的实例<code>resindence</code>。<br><code>resindence</code>包含了可选类型的属性和方法，值可能为<code>nil</code>，所以访问它的属性，方法和下标时都应该加上<code>?</code>。<br>可选链中只要有一个节点为可选类型，可选链的结果就一定为可选类型。<br>第39行，<code>john.residence?.numberOfRooms</code>的结果类型为<code>Int?</code>。<br>第47行，<code>john.residence?.printNumberOfRooms()</code>的结果类型为<code>void?</code>。这里不能直接用函数结构作为布尔型去判断，而是与<code>nil</code>比较。<br>第55行，<code>john.residence?.getId()</code>的结果类型为<code>String?</code>。<br>第63行，<code>john.residence?[0].name</code>的结果类型为<code>String?</code>。这里的<code>?</code>放在<code>[0]</code>前，因为确保数组有值，才能通过下标去访问。<br>第71行，<code>john.reidence?.address?.street</code>的结果类型为<code>String?</code>。多层的可选链接链接到一起，<code>residence</code>和<code>address</code>都是可选类型，所以使用了两个<code>?</code>。如果给<code>john.residence.address</code>中的<code>address</code>分配实例，应该写作<code>john.residence!.address</code>，强制解析确保<code>residence</code>有值，才能对其中的<code>address</code>分配实例。</p>\n<h1 id=\"自动引用计数\"><a href=\"#自动引用计数\" class=\"headerlink\" title=\"自动引用计数\"></a>自动引用计数</h1><p>自动引用计数（<em>ARC</em>）跟踪和管理内存，会自动释放不再使用的实例占用的内存。<br>ARC会跟踪和计算每一个实例被多少属性，常量和变量引用，这样的引用称为对实例的强引用。不存在强引用，实例会被销毁，否则实例会被保留。</p>\n<h2 id=\"类实例的循环强引用\"><a href=\"#类实例的循环强引用\" class=\"headerlink\" title=\"类实例的循环强引用\"></a>类实例的循环强引用</h2><p>两个类中相互引用，相互保持对方的强引用，这样无法销毁，形成了循环强引用。</p>\n<h3 id=\"强引用\"><a href=\"#强引用\" class=\"headerlink\" title=\"强引用\"></a>强引用</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123; <span class=\"keyword\">self</span>.name = name &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> apartment: <span class=\"type\">Apartment</span>?</div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">println</span>(<span class=\"string\">\"\\(name) is being deinitialized\"</span>) &#125;dd</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apartment</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> number: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(number: <span class=\"type\">Int</span>) &#123; <span class=\"keyword\">self</span>.number = number &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> tenant: <span class=\"type\">Person</span>?</div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">println</span>(<span class=\"string\">\"Apartment #\\(number) is being deinitialized\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> john: <span class=\"type\">Person</span>?</div><div class=\"line\"><span class=\"keyword\">var</span> number73: <span class=\"type\">Apartment</span>?</div><div class=\"line\"></div><div class=\"line\">john = <span class=\"type\">Person</span>(name: <span class=\"string\">\"John Appleseed\"</span>)</div><div class=\"line\">number73 = <span class=\"type\">Apartment</span>(number: <span class=\"number\">73</span>)</div><div class=\"line\"></div><div class=\"line\">john!.apartment = number73</div><div class=\"line\">number73!.tenant = john</div><div class=\"line\"></div><div class=\"line\">john = <span class=\"literal\">nil</span></div><div class=\"line\">number73 = <span class=\"literal\">nil</span></div></pre></td></tr></table></figure>\n<p>上面的代码展示了类实例的循环强引用。<br>类<code>Person</code>中有属性是<code>Apartment</code>类型，类<code>Apartment</code>中有属性是<code>Person</code>类型。<br>声明了实例<code>john</code>和实例<code>number73</code>，并赋值。<br>最后两行把两个实例都设为<code>nil</code>，但是析构函数并没有被调用，因为两个实例还有循环强引用联系，并没有自动销魂，而且造成了内存泄露。</p>\n<h3 id=\"弱引用\"><a href=\"#弱引用\" class=\"headerlink\" title=\"弱引用\"></a>弱引用</h3><p>为了解决循环强引用问题，有两种办法：弱引用（<em>weak reference</em>）和无主引用（<em>unowned reference</em>）。<br>一个实例对另一个实例弱引用或者无主引用，不产生强引用，反过来，另一个实例对一个实例强引用，这样能够相互引用而不产生循环强引用。如果实例的值可能为<code>nil</code>使用弱引用；如果实例的值不可能为<code>nil</code>使用无主引用。</p>\n<p>声明时在属性或常量变量前加上<code>weak</code>关键字表示弱引用。<br>两个实例的值都可能为<code>nil</code>，使用弱引用。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">lass <span class=\"type\">Person</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123; <span class=\"keyword\">self</span>.name = name &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> apartment: <span class=\"type\">Apartment</span>?</div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">println</span>(<span class=\"string\">\"\\(name) is being deinitialized\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apartment</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> number: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(number: <span class=\"type\">Int</span>) &#123; <span class=\"keyword\">self</span>.number = number &#125;</div><div class=\"line\">    <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> tenant: <span class=\"type\">Person</span>?</div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">println</span>(<span class=\"string\">\"Apartment #\\(number) is being deinitialized\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> john: <span class=\"type\">Person</span>?</div><div class=\"line\"><span class=\"keyword\">var</span> number73: <span class=\"type\">Apartment</span>?</div><div class=\"line\"></div><div class=\"line\">john = <span class=\"type\">Person</span>(name: <span class=\"string\">\"John Appleseed\"</span>)</div><div class=\"line\">number73 = <span class=\"type\">Apartment</span>(number: <span class=\"number\">73</span>)</div><div class=\"line\"></div><div class=\"line\">john!.apartment = number73</div><div class=\"line\">number73!.tenant = john</div><div class=\"line\"></div><div class=\"line\">john = <span class=\"literal\">nil</span></div><div class=\"line\"><span class=\"comment\">// prints \"John Appleseed is being deinitialized\"</span></div><div class=\"line\">number73 = <span class=\"literal\">nil</span></div><div class=\"line\"><span class=\"comment\">// prints \"Apartment #73 is being deinitialized\"</span></div></pre></td></tr></table></figure></p>\n<p>上面的代码和循环强引用代码基本一致，只是在类<code>Apartment</code>的类型为<code>Person?</code>的属性<code>tenant</code>前加上了<code>weak。因为</code>Person?<code>是可选类型，</code>tenant<code>值可能为</code>nil<code>，所以使用弱引用。\n最后一句，赋值</code>nil<code>给</code>john<code>后，因为</code>number73<code>对</code>john<code>不是强引用，</code>john<code>这时没有强引用，可以销毁，调用了析构函数。</code>john<code>销毁后，</code>number73<code>没有强引用，也可以被销毁。\n如果把</code>number73 = nil<code>和</code>john = nil<code>语句顺序交换，打印顺序不会变，因为没有强引用的</code>john`一定是先销毁。</p>\n<h3 id=\"无主引用\"><a href=\"#无主引用\" class=\"headerlink\" title=\"无主引用\"></a>无主引用</h3><p>声明时在属性或常量变量前加上<code>unowned</code>关键字表示无主引用。</p>\n<ul>\n<li>一个实例的值可能为<code>nil</code>，另一个实例的值不可能为<code>nil</code>。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">var</span> card: <span class=\"type\">CreditCard</span>?</div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">println</span>(<span class=\"string\">\"\\(name) is being deinitialized\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CreditCard</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> number: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">unowned</span> <span class=\"keyword\">let</span> customer: <span class=\"type\">Customer</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(number: <span class=\"type\">Int</span>, customer: <span class=\"type\">Customer</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.number = number</div><div class=\"line\">        <span class=\"keyword\">self</span>.customer = customer</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">println</span>(<span class=\"string\">\"Card #\\(number) is being deinitialized\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> john: <span class=\"type\">Customer</span>?</div><div class=\"line\"></div><div class=\"line\">john = <span class=\"type\">Customer</span>(name: <span class=\"string\">\"John Appleseed\"</span>)</div><div class=\"line\">john!.card = <span class=\"type\">CreditCard</span>(number: <span class=\"number\">1234_5678_9012_3456</span>, customer: john!)</div><div class=\"line\"></div><div class=\"line\">john = <span class=\"literal\">nil</span></div><div class=\"line\"><span class=\"comment\">// prints \"John Appleseed is being deinitialized\"</span></div><div class=\"line\"><span class=\"comment\">// prints \"Card #1234567890123456 is being deinitialized\"</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>类<code>CreditCard</code>的类型为<code>Customer</code>的属性<code>customer</code>前加上了<code>unowned</code>。因为<code>customer</code>在构造函数中就会赋予初始值，值不会为<code>nil</code>，所以使用无主引用。<br>最后一句，赋值<code>nil</code>给<code>john</code>后，因为类<code>CreditCard</code>的实例对<code>john</code>不是强引用，<code>john</code>这时没有强引用，可以销毁，调用了析构函数。<code>john</code>销毁后，类<code>Creditcard</code>的实例也没有强引用了，跟着被销毁了。</p>\n<ul>\n<li>两个实例的值都不可能为<code>nil</code>。<br>这种场景一个类使用无主属性，另一个类使用隐式解析可选类型。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Country</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">let</span> capitalCity: <span class=\"type\">City</span>!</div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>, capitalName: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">        <span class=\"keyword\">self</span>.capitalCity = <span class=\"type\">City</span>(name: capitalName, country: <span class=\"keyword\">self</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">City</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">unowned</span> <span class=\"keyword\">let</span> country: <span class=\"type\">Country</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>, country: <span class=\"type\">Country</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">        <span class=\"keyword\">self</span>.country = country</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> country = <span class=\"type\">Country</span>(name: <span class=\"string\">\"Canada\"</span>, capitalName: <span class=\"string\">\"Ottawa\"</span>)</div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"\\(country.name)'s capital city is called \\(country.capitalCity.name)\"</span>)</div><div class=\"line\"><span class=\"comment\">// prints \"Canada's capital city is called Ottawa\"</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>类<code>City</code>的类型为<code>Country</code>的属性<code>country</code>前加上了<code>unowned</code>表示无主属性。<br>类<code>Country</code>的类型为<code>City!</code>的属性<code>capitalCity</code>在类型后加上了<code>!</code>表示隐式解析可选类型。<br>类<code>Country</code>的实例的<code>country</code>创建时，调用构造器，为<code>name</code>和<code>capiptalCity</code>赋值。因为<code>self</code>属性必须在构造的第二阶段使用，也就是类中所有存储型属性全部有初始值之后才能使用。如果<code>Country</code>的值可以为<code>nil</code>，先给<code>capitalCity</code>赋值<code>nil</code>就可以调用构造器为<code>capitalCity</code>赋予新值。但是这里不可以赋值<code>nil</code>，所以加上了<code>!</code>隐私解析可选类型，默认初始值为<code>nil</code>，可以调用构造器赋予新值。<br>属性<code>capitalCity</code>在调用时可以直接使用，不再需要加<code>!</code>访问。</p>\n<h2 id=\"闭包的循环强引用\"><a href=\"#闭包的循环强引用\" class=\"headerlink\" title=\"闭包的循环强引用\"></a>闭包的循环强引用</h2><p>除了两个类实例的循环强引用，类实例和闭包也可能引起循环强引用，比如把闭包赋值给类的一个属性，而闭包中又通过<code>self</code>访问类的一个属性，这就引起了循环强引用，实例不会被销毁。</p>\n<h3 id=\"闭包占用列表\"><a href=\"#闭包占用列表\" class=\"headerlink\" title=\"闭包占用列表\"></a>闭包占用列表</h3><p>闭包占用列表（<em>closuer capture list</em>）可以解决闭包引起的循环强引用问题。</p>\n<blockquote>\n<p>闭包调用类属性，必须加上<code>self.</code>，不能直接通过属性名调用。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> someClosure: (<span class=\"type\">Int</span>, <span class=\"type\">String</span>) -&gt; <span class=\"type\">String</span> = &#123;</div><div class=\"line\">    [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] (index: <span class=\"type\">Int</span>, stringToProcess: <span class=\"type\">String</span>) -&gt; <span class=\"type\">String</span> <span class=\"keyword\">in</span></div><div class=\"line\">    <span class=\"comment\">// closure body goes here</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>定义占用列表，使用<code>weak</code>或<code>unowned</code>，视值是否能为<code>nil</code>而定。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HTMLElement</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">let</span> text: <span class=\"type\">String</span>?</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> asHTML: () -&gt; <span class=\"type\">String</span> = &#123;</div><div class=\"line\">        [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] <span class=\"keyword\">in</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> text = <span class=\"keyword\">self</span>.text &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;\\(self.name)&gt;\\(text)&lt;/\\(self.name)&gt;\"</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;\\(self.name) /&gt;\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>, text: <span class=\"type\">String</span>? = <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">        <span class=\"keyword\">self</span>.text = text</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">println</span>(<span class=\"string\">\"\\(name) is being deinitialized\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> paragraph: <span class=\"type\">HTMLElement</span>? = <span class=\"type\">HTMLElement</span>(name: <span class=\"string\">\"p\"</span>, text: <span class=\"string\">\"hello, world\"</span>)</div><div class=\"line\"><span class=\"built_in\">println</span>(paragraph!.asHTML())</div><div class=\"line\"><span class=\"comment\">// prints \"&lt;p&gt;hello, world&lt;/p&gt;\"</span></div><div class=\"line\"></div><div class=\"line\">paragraph = <span class=\"literal\">nil</span></div><div class=\"line\"><span class=\"comment\">// prints \"p is being deinitialized\"</span></div></pre></td></tr></table></figure></p>\n<p>上面的例子中，闭包的指定参数列表和返回类型可以通过上下文推断，所以省略。<code>in</code>放在占用列表之后。<br>这里使用了无主引用，闭包通过<code>unowned self</code>对类<code>HTMLELement</code>无主引用。<br>最后一句，赋值<code>nil</code>给<code>paragraph</code>，没有了闭包对它的强引用，可以销毁并调用析构函数。</p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>本篇介绍Swift的基础知识：通过可选链（<em>optional chaining</em>）调用属性，方法和下标；自动引用计数（<em>automatic reference counting</em>）的工作机制；循环强引用的解决方案。</p>","more":"<p><strong>Title: <a href=\"https://aidaizyy.github.io/swift_9\" target=\"_blank\" rel=\"external\">Swift基础入门(9)：可选链自动引用计数</a></strong><br><strong>Author: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">Yunyao Zhang(张云尧)</a></strong><br><strong>E-mail: <a href=\"&#109;&#97;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#97;&#x69;&#100;&#x61;&#105;&#x7a;&#x79;&#121;&#64;&#103;&#109;&#x61;&#105;&#108;&#x2e;&#99;&#x6f;&#x6d;\">&#97;&#x69;&#100;&#x61;&#105;&#x7a;&#x79;&#121;&#64;&#103;&#109;&#x61;&#105;&#108;&#x2e;&#99;&#x6f;&#x6d;</a></strong><br><strong>Last Modified: <a href=\"http://aidaizyy.github.io\" target=\"_blank\" rel=\"external\">2015-07-24</a></strong></p>\n<h1 id=\"可选链\"><a href=\"#可选链\" class=\"headerlink\" title=\"可选链\"></a>可选链</h1><p>如果请求和调用属性，方法和下标的目标可能为空<code>nil</code>，这样的多次请求或调用就可以被链接起来，称为可选链。<br>如果任何一个节点为空<code>nil</code>，整个可选链失效。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123; <span class=\"comment\">//人</span></div><div class=\"line\">    <span class=\"keyword\">var</span> residence: <span class=\"type\">Residence</span>? <span class=\"comment\">//每个人可能有住所</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Residence</span> </span>&#123; <span class=\"comment\">//住所</span></div><div class=\"line\">    <span class=\"keyword\">var</span> id: <span class=\"type\">String</span>? <span class=\"comment\">//住所可能有ID</span></div><div class=\"line\">    <span class=\"keyword\">var</span> address: <span class=\"type\">Address</span>? <span class=\"comment\">//住所可能有地址</span></div><div class=\"line\">    <span class=\"keyword\">var</span> rooms = [<span class=\"type\">Room</span>]() <span class=\"comment\">//住所的房间</span></div><div class=\"line\">    <span class=\"keyword\">var</span> numberOfRooms: <span class=\"type\">Int</span> &#123; <span class=\"comment\">//返回住所的房间数量</span></div><div class=\"line\">        <span class=\"keyword\">return</span> rooms.<span class=\"built_in\">count</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">subscript</span>(i: <span class=\"type\">Int</span>) -&gt; <span class=\"type\">Room</span> &#123; <span class=\"comment\">//下标地址访问住所的一个房间</span></div><div class=\"line\">        <span class=\"keyword\">return</span> rooms[i]</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printNumberOfRooms</span><span class=\"params\">()</span></span> &#123; <span class=\"comment\">//打印房间的数量</span></div><div class=\"line\">        <span class=\"built_in\">println</span>(<span class=\"string\">\"The number of rooms is \\(numberOfRooms)\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getId</span><span class=\"params\">()</span></span> -&gt; <span class=\"type\">String</span>? &#123; <span class=\"comment\">//返回住所的ID</span></div><div class=\"line\">        <span class=\"keyword\">if</span> id != <span class=\"literal\">nil</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> id</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Room</span> </span>&#123; <span class=\"comment\">//房间</span></div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span> <span class=\"comment\">//房间的名字</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123; <span class=\"keyword\">self</span>.name = name &#125; <span class=\"comment\">//房间的构造器</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Address</span> </span>&#123; <span class=\"comment\">//地址</span></div><div class=\"line\">    <span class=\"keyword\">var</span> street: <span class=\"type\">String</span>? <span class=\"comment\">//地址可能有街道</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">let</span> john = <span class=\"type\">Person</span>()</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//属性</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> roomCount = john.residence?.numberOfRooms &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"John's residence has \\(roomCount) room(s).\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Unable to retrieve the number of rooms.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"Unable to retrieve the number of rooms。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//无返回值方法</span></div><div class=\"line\"><span class=\"keyword\">if</span> john.residence?.printNumberOfRooms() != <span class=\"literal\">nil</span>&#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"It was possible to print the number of rooms.\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"It was not possible to print the number of rooms.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"It was not possible to print the number of rooms.\"。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//有返回值方法</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> buildingId = john.residence?.getId() &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"John's building identifier is \\(buildingId).\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Unable to retrieve the ID of building.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"John's building identifier is The Larches.\"。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//下标</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> firstRoomName = john.residence?[<span class=\"number\">0</span>].name &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"The first room name is \\(firstRoomName).\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Unable to retrieve the first room name.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"Unable to retrieve the first room name.\"。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//多层链接</span></div><div class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">let</span> johnsStreet = john.residence?.address?.street &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"John's street name is \\(johnsStreet).\"</span>)</div><div class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    <span class=\"built_in\">println</span>(<span class=\"string\">\"Unable to retrieve the address.\"</span>)</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">// 打印 \"Unable to retrieve the address.”。</span></div></pre></td></tr></table></figure></p>\n<p>创建了<code>Person</code>的实例<code>john</code>，<code>john</code>中包含类<code>Residence</code>的实例<code>resindence</code>。<br><code>resindence</code>包含了可选类型的属性和方法，值可能为<code>nil</code>，所以访问它的属性，方法和下标时都应该加上<code>?</code>。<br>可选链中只要有一个节点为可选类型，可选链的结果就一定为可选类型。<br>第39行，<code>john.residence?.numberOfRooms</code>的结果类型为<code>Int?</code>。<br>第47行，<code>john.residence?.printNumberOfRooms()</code>的结果类型为<code>void?</code>。这里不能直接用函数结构作为布尔型去判断，而是与<code>nil</code>比较。<br>第55行，<code>john.residence?.getId()</code>的结果类型为<code>String?</code>。<br>第63行，<code>john.residence?[0].name</code>的结果类型为<code>String?</code>。这里的<code>?</code>放在<code>[0]</code>前，因为确保数组有值，才能通过下标去访问。<br>第71行，<code>john.reidence?.address?.street</code>的结果类型为<code>String?</code>。多层的可选链接链接到一起，<code>residence</code>和<code>address</code>都是可选类型，所以使用了两个<code>?</code>。如果给<code>john.residence.address</code>中的<code>address</code>分配实例，应该写作<code>john.residence!.address</code>，强制解析确保<code>residence</code>有值，才能对其中的<code>address</code>分配实例。</p>\n<h1 id=\"自动引用计数\"><a href=\"#自动引用计数\" class=\"headerlink\" title=\"自动引用计数\"></a>自动引用计数</h1><p>自动引用计数（<em>ARC</em>）跟踪和管理内存，会自动释放不再使用的实例占用的内存。<br>ARC会跟踪和计算每一个实例被多少属性，常量和变量引用，这样的引用称为对实例的强引用。不存在强引用，实例会被销毁，否则实例会被保留。</p>\n<h2 id=\"类实例的循环强引用\"><a href=\"#类实例的循环强引用\" class=\"headerlink\" title=\"类实例的循环强引用\"></a>类实例的循环强引用</h2><p>两个类中相互引用，相互保持对方的强引用，这样无法销毁，形成了循环强引用。</p>\n<h3 id=\"强引用\"><a href=\"#强引用\" class=\"headerlink\" title=\"强引用\"></a>强引用</h3><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123; <span class=\"keyword\">self</span>.name = name &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> apartment: <span class=\"type\">Apartment</span>?</div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">println</span>(<span class=\"string\">\"\\(name) is being deinitialized\"</span>) &#125;dd</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apartment</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> number: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(number: <span class=\"type\">Int</span>) &#123; <span class=\"keyword\">self</span>.number = number &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> tenant: <span class=\"type\">Person</span>?</div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">println</span>(<span class=\"string\">\"Apartment #\\(number) is being deinitialized\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> john: <span class=\"type\">Person</span>?</div><div class=\"line\"><span class=\"keyword\">var</span> number73: <span class=\"type\">Apartment</span>?</div><div class=\"line\"></div><div class=\"line\">john = <span class=\"type\">Person</span>(name: <span class=\"string\">\"John Appleseed\"</span>)</div><div class=\"line\">number73 = <span class=\"type\">Apartment</span>(number: <span class=\"number\">73</span>)</div><div class=\"line\"></div><div class=\"line\">john!.apartment = number73</div><div class=\"line\">number73!.tenant = john</div><div class=\"line\"></div><div class=\"line\">john = <span class=\"literal\">nil</span></div><div class=\"line\">number73 = <span class=\"literal\">nil</span></div></pre></td></tr></table></figure>\n<p>上面的代码展示了类实例的循环强引用。<br>类<code>Person</code>中有属性是<code>Apartment</code>类型，类<code>Apartment</code>中有属性是<code>Person</code>类型。<br>声明了实例<code>john</code>和实例<code>number73</code>，并赋值。<br>最后两行把两个实例都设为<code>nil</code>，但是析构函数并没有被调用，因为两个实例还有循环强引用联系，并没有自动销魂，而且造成了内存泄露。</p>\n<h3 id=\"弱引用\"><a href=\"#弱引用\" class=\"headerlink\" title=\"弱引用\"></a>弱引用</h3><p>为了解决循环强引用问题，有两种办法：弱引用（<em>weak reference</em>）和无主引用（<em>unowned reference</em>）。<br>一个实例对另一个实例弱引用或者无主引用，不产生强引用，反过来，另一个实例对一个实例强引用，这样能够相互引用而不产生循环强引用。如果实例的值可能为<code>nil</code>使用弱引用；如果实例的值不可能为<code>nil</code>使用无主引用。</p>\n<p>声明时在属性或常量变量前加上<code>weak</code>关键字表示弱引用。<br>两个实例的值都可能为<code>nil</code>，使用弱引用。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\">lass <span class=\"type\">Person</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123; <span class=\"keyword\">self</span>.name = name &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> apartment: <span class=\"type\">Apartment</span>?</div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">println</span>(<span class=\"string\">\"\\(name) is being deinitialized\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Apartment</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> number: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(number: <span class=\"type\">Int</span>) &#123; <span class=\"keyword\">self</span>.number = number &#125;</div><div class=\"line\">    <span class=\"keyword\">weak</span> <span class=\"keyword\">var</span> tenant: <span class=\"type\">Person</span>?</div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">println</span>(<span class=\"string\">\"Apartment #\\(number) is being deinitialized\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> john: <span class=\"type\">Person</span>?</div><div class=\"line\"><span class=\"keyword\">var</span> number73: <span class=\"type\">Apartment</span>?</div><div class=\"line\"></div><div class=\"line\">john = <span class=\"type\">Person</span>(name: <span class=\"string\">\"John Appleseed\"</span>)</div><div class=\"line\">number73 = <span class=\"type\">Apartment</span>(number: <span class=\"number\">73</span>)</div><div class=\"line\"></div><div class=\"line\">john!.apartment = number73</div><div class=\"line\">number73!.tenant = john</div><div class=\"line\"></div><div class=\"line\">john = <span class=\"literal\">nil</span></div><div class=\"line\"><span class=\"comment\">// prints \"John Appleseed is being deinitialized\"</span></div><div class=\"line\">number73 = <span class=\"literal\">nil</span></div><div class=\"line\"><span class=\"comment\">// prints \"Apartment #73 is being deinitialized\"</span></div></pre></td></tr></table></figure></p>\n<p>上面的代码和循环强引用代码基本一致，只是在类<code>Apartment</code>的类型为<code>Person?</code>的属性<code>tenant</code>前加上了<code>weak。因为</code>Person?<code>是可选类型，</code>tenant<code>值可能为</code>nil<code>，所以使用弱引用。\n最后一句，赋值</code>nil<code>给</code>john<code>后，因为</code>number73<code>对</code>john<code>不是强引用，</code>john<code>这时没有强引用，可以销毁，调用了析构函数。</code>john<code>销毁后，</code>number73<code>没有强引用，也可以被销毁。\n如果把</code>number73 = nil<code>和</code>john = nil<code>语句顺序交换，打印顺序不会变，因为没有强引用的</code>john`一定是先销毁。</p>\n<h3 id=\"无主引用\"><a href=\"#无主引用\" class=\"headerlink\" title=\"无主引用\"></a>无主引用</h3><p>声明时在属性或常量变量前加上<code>unowned</code>关键字表示无主引用。</p>\n<ul>\n<li>一个实例的值可能为<code>nil</code>，另一个实例的值不可能为<code>nil</code>。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Customer</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">var</span> card: <span class=\"type\">CreditCard</span>?</div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">println</span>(<span class=\"string\">\"\\(name) is being deinitialized\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CreditCard</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> number: <span class=\"type\">Int</span></div><div class=\"line\">    <span class=\"keyword\">unowned</span> <span class=\"keyword\">let</span> customer: <span class=\"type\">Customer</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(number: <span class=\"type\">Int</span>, customer: <span class=\"type\">Customer</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.number = number</div><div class=\"line\">        <span class=\"keyword\">self</span>.customer = customer</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123; <span class=\"built_in\">println</span>(<span class=\"string\">\"Card #\\(number) is being deinitialized\"</span>) &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> john: <span class=\"type\">Customer</span>?</div><div class=\"line\"></div><div class=\"line\">john = <span class=\"type\">Customer</span>(name: <span class=\"string\">\"John Appleseed\"</span>)</div><div class=\"line\">john!.card = <span class=\"type\">CreditCard</span>(number: <span class=\"number\">1234_5678_9012_3456</span>, customer: john!)</div><div class=\"line\"></div><div class=\"line\">john = <span class=\"literal\">nil</span></div><div class=\"line\"><span class=\"comment\">// prints \"John Appleseed is being deinitialized\"</span></div><div class=\"line\"><span class=\"comment\">// prints \"Card #1234567890123456 is being deinitialized\"</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>类<code>CreditCard</code>的类型为<code>Customer</code>的属性<code>customer</code>前加上了<code>unowned</code>。因为<code>customer</code>在构造函数中就会赋予初始值，值不会为<code>nil</code>，所以使用无主引用。<br>最后一句，赋值<code>nil</code>给<code>john</code>后，因为类<code>CreditCard</code>的实例对<code>john</code>不是强引用，<code>john</code>这时没有强引用，可以销毁，调用了析构函数。<code>john</code>销毁后，类<code>Creditcard</code>的实例也没有强引用了，跟着被销毁了。</p>\n<ul>\n<li>两个实例的值都不可能为<code>nil</code>。<br>这种场景一个类使用无主属性，另一个类使用隐式解析可选类型。<figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Country</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">let</span> capitalCity: <span class=\"type\">City</span>!</div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>, capitalName: <span class=\"type\">String</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">        <span class=\"keyword\">self</span>.capitalCity = <span class=\"type\">City</span>(name: capitalName, country: <span class=\"keyword\">self</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">City</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">unowned</span> <span class=\"keyword\">let</span> country: <span class=\"type\">Country</span></div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>, country: <span class=\"type\">Country</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">        <span class=\"keyword\">self</span>.country = country</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> country = <span class=\"type\">Country</span>(name: <span class=\"string\">\"Canada\"</span>, capitalName: <span class=\"string\">\"Ottawa\"</span>)</div><div class=\"line\"><span class=\"built_in\">println</span>(<span class=\"string\">\"\\(country.name)'s capital city is called \\(country.capitalCity.name)\"</span>)</div><div class=\"line\"><span class=\"comment\">// prints \"Canada's capital city is called Ottawa\"</span></div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>类<code>City</code>的类型为<code>Country</code>的属性<code>country</code>前加上了<code>unowned</code>表示无主属性。<br>类<code>Country</code>的类型为<code>City!</code>的属性<code>capitalCity</code>在类型后加上了<code>!</code>表示隐式解析可选类型。<br>类<code>Country</code>的实例的<code>country</code>创建时，调用构造器，为<code>name</code>和<code>capiptalCity</code>赋值。因为<code>self</code>属性必须在构造的第二阶段使用，也就是类中所有存储型属性全部有初始值之后才能使用。如果<code>Country</code>的值可以为<code>nil</code>，先给<code>capitalCity</code>赋值<code>nil</code>就可以调用构造器为<code>capitalCity</code>赋予新值。但是这里不可以赋值<code>nil</code>，所以加上了<code>!</code>隐私解析可选类型，默认初始值为<code>nil</code>，可以调用构造器赋予新值。<br>属性<code>capitalCity</code>在调用时可以直接使用，不再需要加<code>!</code>访问。</p>\n<h2 id=\"闭包的循环强引用\"><a href=\"#闭包的循环强引用\" class=\"headerlink\" title=\"闭包的循环强引用\"></a>闭包的循环强引用</h2><p>除了两个类实例的循环强引用，类实例和闭包也可能引起循环强引用，比如把闭包赋值给类的一个属性，而闭包中又通过<code>self</code>访问类的一个属性，这就引起了循环强引用，实例不会被销毁。</p>\n<h3 id=\"闭包占用列表\"><a href=\"#闭包占用列表\" class=\"headerlink\" title=\"闭包占用列表\"></a>闭包占用列表</h3><p>闭包占用列表（<em>closuer capture list</em>）可以解决闭包引起的循环强引用问题。</p>\n<blockquote>\n<p>闭包调用类属性，必须加上<code>self.</code>，不能直接通过属性名调用。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> someClosure: (<span class=\"type\">Int</span>, <span class=\"type\">String</span>) -&gt; <span class=\"type\">String</span> = &#123;</div><div class=\"line\">    [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] (index: <span class=\"type\">Int</span>, stringToProcess: <span class=\"type\">String</span>) -&gt; <span class=\"type\">String</span> <span class=\"keyword\">in</span></div><div class=\"line\">    <span class=\"comment\">// closure body goes here</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n</blockquote>\n<p>定义占用列表，使用<code>weak</code>或<code>unowned</code>，视值是否能为<code>nil</code>而定。<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HTMLElement</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">let</span> name: <span class=\"type\">String</span></div><div class=\"line\">    <span class=\"keyword\">let</span> text: <span class=\"type\">String</span>?</div><div class=\"line\"></div><div class=\"line\">    <span class=\"built_in\">lazy</span> <span class=\"keyword\">var</span> asHTML: () -&gt; <span class=\"type\">String</span> = &#123;</div><div class=\"line\">        [<span class=\"keyword\">unowned</span> <span class=\"keyword\">self</span>] <span class=\"keyword\">in</span></div><div class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">let</span> text = <span class=\"keyword\">self</span>.text &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;\\(self.name)&gt;\\(text)&lt;/\\(self.name)&gt;\"</span></div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"&lt;\\(self.name) /&gt;\"</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">init</span>(name: <span class=\"type\">String</span>, text: <span class=\"type\">String</span>? = <span class=\"literal\">nil</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">self</span>.name = name</div><div class=\"line\">        <span class=\"keyword\">self</span>.text = text</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">deinit</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">println</span>(<span class=\"string\">\"\\(name) is being deinitialized\"</span>)</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">var</span> paragraph: <span class=\"type\">HTMLElement</span>? = <span class=\"type\">HTMLElement</span>(name: <span class=\"string\">\"p\"</span>, text: <span class=\"string\">\"hello, world\"</span>)</div><div class=\"line\"><span class=\"built_in\">println</span>(paragraph!.asHTML())</div><div class=\"line\"><span class=\"comment\">// prints \"&lt;p&gt;hello, world&lt;/p&gt;\"</span></div><div class=\"line\"></div><div class=\"line\">paragraph = <span class=\"literal\">nil</span></div><div class=\"line\"><span class=\"comment\">// prints \"p is being deinitialized\"</span></div></pre></td></tr></table></figure></p>\n<p>上面的例子中，闭包的指定参数列表和返回类型可以通过上下文推断，所以省略。<code>in</code>放在占用列表之后。<br>这里使用了无主引用，闭包通过<code>unowned self</code>对类<code>HTMLELement</code>无主引用。<br>最后一句，赋值<code>nil</code>给<code>paragraph</code>，没有了闭包对它的强引用，可以销毁并调用析构函数。</p>\n<p><strong> 转载请注明原作者和出处。</strong></p>\n<blockquote>\n<p>如果觉得这篇文章对您有帮助或启发，请随意打赏~</p>\n<p> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode01.jpg\" width=\"250\" align=\"left\"> <img src=\"http://7xivk7.com1.z0.glb.clouddn.com/paycode02.jpg\" width=\"250\" align=\"left\"> </p>\n</blockquote>"}],"PostAsset":[],"PostCategory":[{"post_id":"cj2gdu6if0001v1o36agfpyts","category_id":"cj2gdu6j70005v1o3p8liwdhm","_id":"cj2gdu6jo000dv1o3s8zixtn9"},{"post_id":"cj2gdu6iw0003v1o3c931u9e3","category_id":"cj2gdu6jl000av1o3y52e8lbn","_id":"cj2gdu6k1000kv1o300z7ra2i"},{"post_id":"cj2gdu6jb0007v1o381rycwb2","category_id":"cj2gdu6jq000fv1o3foanz2jc","_id":"cj2gdu6k8000qv1o3l9f0ikw1"},{"post_id":"cj2gdu6jd0008v1o3rk6iaj4p","category_id":"cj2gdu6jq000fv1o3foanz2jc","_id":"cj2gdu6kf000wv1o30rmdiew7"},{"post_id":"cj2gdu6ji0009v1o3tpvnhjch","category_id":"cj2gdu6k8000rv1o3yv0uqo8d","_id":"cj2gdu6km0013v1o3ajdsk6ia"},{"post_id":"cj2gdu6jm000cv1o3sze4jy6x","category_id":"cj2gdu6kg000yv1o3xe1rn6cx","_id":"cj2gdu6ky0019v1o3j62d7lgs"},{"post_id":"cj2gdu6jp000ev1o3t19g3lte","category_id":"cj2gdu6kg000yv1o3xe1rn6cx","_id":"cj2gdu6l6001ev1o3ahj0qmxi"},{"post_id":"cj2gdu6jy000hv1o3x1kqhdbb","category_id":"cj2gdu6kz001bv1o3u0cc6rrq","_id":"cj2gdu6lj001lv1o3lvv8lpbw"},{"post_id":"cj2gdu6k0000jv1o3iiyfnmdt","category_id":"cj2gdu6l7001gv1o33kkbdl06","_id":"cj2gdu6lo001qv1o36wvsuspv"},{"post_id":"cj2gdu6ll001pv1o3gm8tzty0","category_id":"cj2gdu6lj001nv1o3bbgrzjv1","_id":"cj2gdu6lr001tv1o32jrp9yvq"},{"post_id":"cj2gdu6k3000ov1o3sv1msred","category_id":"cj2gdu6lj001nv1o3bbgrzjv1","_id":"cj2gdu6lu001vv1o3q8cq2ci1"},{"post_id":"cj2gdu6k6000pv1o3gcn3x18w","category_id":"cj2gdu6lj001nv1o3bbgrzjv1","_id":"cj2gdu6lw001zv1o3w0t27lnh"},{"post_id":"cj2gdu6k9000tv1o37txn4wts","category_id":"cj2gdu6lj001nv1o3bbgrzjv1","_id":"cj2gdu6ly0023v1o3h6ydlzto"},{"post_id":"cj2gdu6kc000vv1o31qpbjwg5","category_id":"cj2gdu6lj001nv1o3bbgrzjv1","_id":"cj2gdu6m10028v1o3v8ebw1dm"},{"post_id":"cj2gdu6kg000zv1o3la96gp1a","category_id":"cj2gdu6lj001nv1o3bbgrzjv1","_id":"cj2gdu6m4002cv1o3qjfpsm12"},{"post_id":"cj2gdu6kk0012v1o3vjp6bpk0","category_id":"cj2gdu6lj001nv1o3bbgrzjv1","_id":"cj2gdu6m7002gv1o3rb5cg2fp"},{"post_id":"cj2gdu6kn0014v1o3byp9vuph","category_id":"cj2gdu6lj001nv1o3bbgrzjv1","_id":"cj2gdu6mb002kv1o3j36j0n7h"},{"post_id":"cj2gdu6kr0018v1o3baawrq14","category_id":"cj2gdu6lj001nv1o3bbgrzjv1","_id":"cj2gdu6me002ov1o3cew96unu"},{"post_id":"cj2gdu6ky001av1o3zh0mzd30","category_id":"cj2gdu6lj001nv1o3bbgrzjv1","_id":"cj2gdu6mg002sv1o3lir108wg"},{"post_id":"cj2gdu6l1001dv1o3gagoshcj","category_id":"cj2gdu6lj001nv1o3bbgrzjv1","_id":"cj2gdu6mh002wv1o3acopi4my"},{"post_id":"cj2gdu6l6001fv1o3g257wvue","category_id":"cj2gdu6lj001nv1o3bbgrzjv1","_id":"cj2gdu6mi0030v1o3bf3pkpg5"},{"post_id":"cj2gdu6l9001iv1o3td4ug1jo","category_id":"cj2gdu6lj001nv1o3bbgrzjv1","_id":"cj2gdu6ml0034v1o3s8jusftp"},{"post_id":"cj2gdu6le001kv1o3xspkx3sm","category_id":"cj2gdu6lj001nv1o3bbgrzjv1","_id":"cj2gdu6mm0037v1o3m0boxeyl"}],"PostTag":[{"post_id":"cj2gdu6if0001v1o36agfpyts","tag_id":"cj2gdu6jb0006v1o3y556hhui","_id":"cj2gdu6jz000iv1o33mdj7uad"},{"post_id":"cj2gdu6if0001v1o36agfpyts","tag_id":"cj2gdu6jl000bv1o36thwv0fo","_id":"cj2gdu6k1000lv1o3mmlnjs81"},{"post_id":"cj2gdu6iw0003v1o3c931u9e3","tag_id":"cj2gdu6ju000gv1o3wtzkf4nx","_id":"cj2gdu6kb000uv1o38nicfljr"},{"post_id":"cj2gdu6iw0003v1o3c931u9e3","tag_id":"cj2gdu6k1000nv1o3z4io7bwp","_id":"cj2gdu6kg000xv1o372q1tnpr"},{"post_id":"cj2gdu6jb0007v1o381rycwb2","tag_id":"cj2gdu6k9000sv1o3dv668aqn","_id":"cj2gdu6kj0011v1o38wd97no2"},{"post_id":"cj2gdu6jd0008v1o3rk6iaj4p","tag_id":"cj2gdu6k9000sv1o3dv668aqn","_id":"cj2gdu6kr0017v1o3xbnaspzy"},{"post_id":"cj2gdu6ji0009v1o3tpvnhjch","tag_id":"cj2gdu6kp0016v1o33tp1aimk","_id":"cj2gdu6ld001jv1o35uhoe1ed"},{"post_id":"cj2gdu6ji0009v1o3tpvnhjch","tag_id":"cj2gdu6l0001cv1o35rb42jgu","_id":"cj2gdu6lj001mv1o3wqw8nhfh"},{"post_id":"cj2gdu6jm000cv1o3sze4jy6x","tag_id":"cj2gdu6l8001hv1o3njkr6yxe","_id":"cj2gdu6lt001uv1o3lx2p5ops"},{"post_id":"cj2gdu6jm000cv1o3sze4jy6x","tag_id":"cj2gdu6lk001ov1o3nckqexuz","_id":"cj2gdu6lu001xv1o3rlcq86f5"},{"post_id":"cj2gdu6jp000ev1o3t19g3lte","tag_id":"cj2gdu6l8001hv1o3njkr6yxe","_id":"cj2gdu6lx0022v1o3k9psb2fg"},{"post_id":"cj2gdu6jp000ev1o3t19g3lte","tag_id":"cj2gdu6lk001ov1o3nckqexuz","_id":"cj2gdu6ly0025v1o37rpytu6j"},{"post_id":"cj2gdu6jy000hv1o3x1kqhdbb","tag_id":"cj2gdu6lx0021v1o34q5utbeg","_id":"cj2gdu6m10027v1o31cr654n0"},{"post_id":"cj2gdu6k3000ov1o3sv1msred","tag_id":"cj2gdu6lz0026v1o3q8irxdov","_id":"cj2gdu6m4002bv1o3ts15dbos"},{"post_id":"cj2gdu6k6000pv1o3gcn3x18w","tag_id":"cj2gdu6lz0026v1o3q8irxdov","_id":"cj2gdu6m7002fv1o3fdw2cs4f"},{"post_id":"cj2gdu6k9000tv1o37txn4wts","tag_id":"cj2gdu6lz0026v1o3q8irxdov","_id":"cj2gdu6mb002jv1o3e5zt22gm"},{"post_id":"cj2gdu6kc000vv1o31qpbjwg5","tag_id":"cj2gdu6lz0026v1o3q8irxdov","_id":"cj2gdu6me002nv1o31kajy2qx"},{"post_id":"cj2gdu6kg000zv1o3la96gp1a","tag_id":"cj2gdu6lz0026v1o3q8irxdov","_id":"cj2gdu6mf002rv1o31gmy3gdi"},{"post_id":"cj2gdu6kk0012v1o3vjp6bpk0","tag_id":"cj2gdu6lz0026v1o3q8irxdov","_id":"cj2gdu6mh002vv1o3rnql59t9"},{"post_id":"cj2gdu6kn0014v1o3byp9vuph","tag_id":"cj2gdu6lz0026v1o3q8irxdov","_id":"cj2gdu6mi002zv1o3axcknalr"},{"post_id":"cj2gdu6kr0018v1o3baawrq14","tag_id":"cj2gdu6lz0026v1o3q8irxdov","_id":"cj2gdu6ml0033v1o3xab24988"},{"post_id":"cj2gdu6ky001av1o3zh0mzd30","tag_id":"cj2gdu6lz0026v1o3q8irxdov","_id":"cj2gdu6mm0036v1o34s7jfo9u"},{"post_id":"cj2gdu6l1001dv1o3gagoshcj","tag_id":"cj2gdu6lz0026v1o3q8irxdov","_id":"cj2gdu6mn0039v1o3e62v7kvf"},{"post_id":"cj2gdu6l6001fv1o3g257wvue","tag_id":"cj2gdu6lz0026v1o3q8irxdov","_id":"cj2gdu6mo003bv1o3p4z2sin2"},{"post_id":"cj2gdu6l9001iv1o3td4ug1jo","tag_id":"cj2gdu6lz0026v1o3q8irxdov","_id":"cj2gdu6mq003dv1o30pbya1jh"},{"post_id":"cj2gdu6le001kv1o3xspkx3sm","tag_id":"cj2gdu6lz0026v1o3q8irxdov","_id":"cj2gdu6mr003fv1o3iz7kr1m8"},{"post_id":"cj2gdu6ll001pv1o3gm8tzty0","tag_id":"cj2gdu6lz0026v1o3q8irxdov","_id":"cj2gdu6ms003gv1o35z5ph6zy"}],"Tag":[{"name":"android","_id":"cj2gdu6jb0006v1o3y556hhui"},{"name":"proguard","_id":"cj2gdu6jl000bv1o36thwv0fo"},{"name":"cache","_id":"cj2gdu6ju000gv1o3wtzkf4nx"},{"name":"computer architecture","_id":"cj2gdu6k1000nv1o3z4io7bwp"},{"name":"dpdk","_id":"cj2gdu6k9000sv1o3dv668aqn"},{"name":"hadoop","_id":"cj2gdu6kp0016v1o33tp1aimk"},{"name":"java","_id":"cj2gdu6l0001cv1o35rb42jgu"},{"name":"openvswitch","_id":"cj2gdu6l8001hv1o3njkr6yxe"},{"name":"openflow","_id":"cj2gdu6lk001ov1o3nckqexuz"},{"name":"spdk","_id":"cj2gdu6lx0021v1o34q5utbeg"},{"name":"swift","_id":"cj2gdu6lz0026v1o3q8irxdov"}]}}